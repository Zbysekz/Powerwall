
/tmp/arduino_build_556828/cellModule.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	1a c5       	rjmp	.+2612   	; 0xa3c <__vector_3>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	ce c3       	rjmp	.+1948   	; 0x7a8 <__vector_5>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	8d c5       	rjmp	.+2842   	; 0xb2c <__vector_8>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	c8 c4       	rjmp	.+2448   	; 0x9ac <__vector_13>
      1c:	0f c4       	rjmp	.+2078   	; 0x83c <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
      2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
      30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
      36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf e5       	ldi	r28, 0x5F	; 95
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      48:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      4e:	e0 ea       	ldi	r30, 0xA0	; 160
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      50:	f0 e1       	ldi	r31, 0x10	; 16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      54:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      56:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      58:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      5a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      5e:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      60:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      62:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      68:	a5 3e       	cpi	r26, 0xE5	; 229
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      6a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
      6e:	b6 d5       	rcall	.+2924   	; 0xbdc <main>
      70:	15 c8       	rjmp	.-4054   	; 0xfffff09c <__eeprom_end+0xff7ef09c>

00000072 <__bad_interrupt>:
__vector_1():
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]>:
_Z14calculateCRC32PKhj.constprop.9():
/media/D/Data/Powerwall/cellModule/b_functions.ino:12
inline void ledOFF() {
  DDRB |= (1 << DDB1);
  PORTB &= ~(1 << PB1);
}

uint32_t calculateCRC32(const uint8_t *data, size_t length)
      74:	4f 92       	push	r4
      76:	5f 92       	push	r5
      78:	6f 92       	push	r6
      7a:	7f 92       	push	r7
      7c:	8f 92       	push	r8
      7e:	9f 92       	push	r9
      80:	af 92       	push	r10
      82:	bf 92       	push	r11
      84:	cf 92       	push	r12
      86:	df 92       	push	r13
      88:	ef 92       	push	r14
      8a:	ff 92       	push	r15
      8c:	fc 01       	movw	r30, r24
      8e:	39 96       	adiw	r30, 0x09	; 9
/media/D/Data/Powerwall/cellModule/b_functions.ino:14
{
  uint32_t crc = 0xffffffff;
      90:	cc 24       	eor	r12, r12
      92:	ca 94       	dec	r12
      94:	dc 2c       	mov	r13, r12
      96:	76 01       	movw	r14, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:15
  while (length--) {
      98:	8e 17       	cp	r24, r30
      9a:	9f 07       	cpc	r25, r31
      9c:	e1 f1       	breq	.+120    	; 0x116 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0xa2>
/media/D/Data/Powerwall/cellModule/b_functions.ino:16
    uint8_t c = *data++;
      9e:	dc 01       	movw	r26, r24
      a0:	4d 90       	ld	r4, X+
      a2:	cd 01       	movw	r24, r26
      a4:	28 e0       	ldi	r18, 0x08	; 8
      a6:	30 e0       	ldi	r19, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      a8:	40 e8       	ldi	r20, 0x80	; 128
      aa:	84 2e       	mov	r8, r20
      ac:	91 2c       	mov	r9, r1
      ae:	a1 2c       	mov	r10, r1
      b0:	b1 2c       	mov	r11, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:19
      bool bit = crc & 0x80000000;
      if (c & i) {
      b2:	51 2c       	mov	r5, r1
      b4:	71 2c       	mov	r7, r1
      b6:	61 2c       	mov	r6, r1
      b8:	b3 01       	movw	r22, r6
      ba:	a2 01       	movw	r20, r4
      bc:	48 21       	and	r20, r8
      be:	59 21       	and	r21, r9
      c0:	6a 21       	and	r22, r10
      c2:	7b 21       	and	r23, r11
      c4:	45 2b       	or	r20, r21
      c6:	46 2b       	or	r20, r22
      c8:	47 2b       	or	r20, r23
      ca:	f1 f4       	brne	.+60     	; 0x108 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x94>
/media/D/Data/Powerwall/cellModule/b_functions.ino:18
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      bool bit = crc & 0x80000000;
      cc:	b7 01       	movw	r22, r14
      ce:	a6 01       	movw	r20, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      if (c & i) {
        bit = !bit;
      d0:	44 27       	eor	r20, r20
      d2:	77 fd       	sbrc	r23, 7
      d4:	43 95       	inc	r20
      d6:	55 27       	eor	r21, r21
      d8:	66 27       	eor	r22, r22
      da:	77 27       	eor	r23, r23
/media/D/Data/Powerwall/cellModule/b_functions.ino:22
      }
      crc <<= 1;
      dc:	cc 0c       	add	r12, r12
      de:	dd 1c       	adc	r13, r13
      e0:	ee 1c       	adc	r14, r14
      e2:	ff 1c       	adc	r15, r15
/media/D/Data/Powerwall/cellModule/b_functions.ino:23
      if (bit) {
      e4:	44 23       	and	r20, r20
      e6:	41 f0       	breq	.+16     	; 0xf8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x84>
/media/D/Data/Powerwall/cellModule/b_functions.ino:24
        crc ^= 0x04c11db7;
      e8:	b7 eb       	ldi	r27, 0xB7	; 183
      ea:	cb 26       	eor	r12, r27
      ec:	bd e1       	ldi	r27, 0x1D	; 29
      ee:	db 26       	eor	r13, r27
      f0:	b1 ec       	ldi	r27, 0xC1	; 193
      f2:	eb 26       	eor	r14, r27
      f4:	b4 e0       	ldi	r27, 0x04	; 4
      f6:	fb 26       	eor	r15, r27
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
uint32_t calculateCRC32(const uint8_t *data, size_t length)
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      f8:	b6 94       	lsr	r11
      fa:	a7 94       	ror	r10
      fc:	97 94       	ror	r9
      fe:	87 94       	ror	r8
     100:	21 50       	subi	r18, 0x01	; 1
     102:	31 09       	sbc	r19, r1
     104:	c9 f6       	brne	.-78     	; 0xb8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x44>
     106:	c8 cf       	rjmp	.-112    	; 0x98 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x24>
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      bool bit = crc & 0x80000000;
      if (c & i) {
        bit = !bit;
     108:	b7 01       	movw	r22, r14
     10a:	a6 01       	movw	r20, r12
     10c:	40 95       	com	r20
     10e:	50 95       	com	r21
     110:	60 95       	com	r22
     112:	70 95       	com	r23
     114:	dd cf       	rjmp	.-70     	; 0xd0 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x5c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:29
        crc ^= 0x04c11db7;
      }
    }
  }
  return crc;
}
     116:	c7 01       	movw	r24, r14
     118:	b6 01       	movw	r22, r12
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	9f 90       	pop	r9
     128:	8f 90       	pop	r8
     12a:	7f 90       	pop	r7
     12c:	6f 90       	pop	r6
     12e:	5f 90       	pop	r5
     130:	4f 90       	pop	r4
     132:	08 95       	ret

00000134 <TwoWire::write(unsigned char) [clone .constprop.8]>:
_ZN7TwoWire5writeEh.constprop.8():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     134:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <TWI_TxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     138:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     13c:	2f 5f       	subi	r18, 0xFF	; 255
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     13e:	92 1b       	sub	r25, r18
     140:	9f 70       	andi	r25, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:513
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     142:	91 f0       	breq	.+36     	; 0x168 <TwoWire::write(unsigned char) [clone .constprop.8]+0x34>
USI_TWI_Transmit_Byte():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     144:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <TWI_TxHead>
     148:	9f 5f       	subi	r25, 0xFF	; 255
     14a:	9f 70       	andi	r25, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
     14c:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <TWI_TxTail>
     150:	92 17       	cp	r25, r18
     152:	e1 f3       	breq	.-8      	; 0x14c <TwoWire::write(unsigned char) [clone .constprop.8]+0x18>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     154:	e9 2f       	mov	r30, r25
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	ec 57       	subi	r30, 0x7C	; 124
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	80 83       	st	Z, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
     15e:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <TWI_TxHead>
_ZN7TwoWire5writeEh.constprop.8():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:519
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:514
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
      return 0;
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	80 e0       	ldi	r24, 0x00	; 0
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:520
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
}
     16c:	08 95       	ret

0000016e <digitalWrite.constprop.2>:
digitalWrite.constprop.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     16e:	ea e3       	ldi	r30, 0x3A	; 58
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     174:	e4 e3       	ldi	r30, 0x34	; 52
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     17a:	ee e2       	ldi	r30, 0x2E	; 46
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	e4 91       	lpm	r30, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     180:	ee 23       	and	r30, r30
     182:	c1 f0       	breq	.+48     	; 0x1b4 <digitalWrite.constprop.2+0x46>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     184:	22 23       	and	r18, r18
     186:	29 f0       	breq	.+10     	; 0x192 <digitalWrite.constprop.2+0x24>
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     188:	21 30       	cpi	r18, 0x01	; 1
     18a:	a9 f4       	brne	.+42     	; 0x1b6 <digitalWrite.constprop.2+0x48>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     18c:	2a b5       	in	r18, 0x2a	; 42
     18e:	2f 77       	andi	r18, 0x7F	; 127
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     190:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	ec 5d       	subi	r30, 0xDC	; 220
     19a:	ff 4f       	sbci	r31, 0xFF	; 255
     19c:	a5 91       	lpm	r26, Z+
     19e:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:151

  if (val == LOW) {
     1a0:	81 11       	cpse	r24, r1
     1a2:	1a c0       	rjmp	.+52     	; 0x1d8 <digitalWrite.constprop.2+0x6a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:152
    uint8_t oldSREG = SREG;
     1a4:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:153
    cli();
     1a6:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:154
    *out &= ~bit;
     1a8:	2c 91       	ld	r18, X
     1aa:	e9 2f       	mov	r30, r25
     1ac:	e0 95       	com	r30
     1ae:	e2 23       	and	r30, r18
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     1b0:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
     1b2:	8f bf       	out	0x3f, r24	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:162
  }
}
     1b4:	08 95       	ret
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     1b6:	22 30       	cpi	r18, 0x02	; 2
     1b8:	19 f4       	brne	.+6      	; 0x1c0 <digitalWrite.constprop.2+0x52>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     1ba:	2a b5       	in	r18, 0x2a	; 42
     1bc:	2f 7d       	andi	r18, 0xDF	; 223
     1be:	e8 cf       	rjmp	.-48     	; 0x190 <digitalWrite.constprop.2+0x22>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
     1c0:	23 30       	cpi	r18, 0x03	; 3
     1c2:	21 f4       	brne	.+8      	; 0x1cc <digitalWrite.constprop.2+0x5e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
     1c4:	20 b7       	in	r18, 0x30	; 48
     1c6:	2f 7d       	andi	r18, 0xDF	; 223
     1c8:	20 bf       	out	0x30, r18	; 48
     1ca:	e3 cf       	rjmp	.-58     	; 0x192 <digitalWrite.constprop.2+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
     1cc:	24 30       	cpi	r18, 0x04	; 4
     1ce:	09 f7       	brne	.-62     	; 0x192 <digitalWrite.constprop.2+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
     1d0:	2c b5       	in	r18, 0x2c	; 44
     1d2:	2f 7d       	andi	r18, 0xDF	; 223
     1d4:	2c bd       	out	0x2c, r18	; 44
     1d6:	dd cf       	rjmp	.-70     	; 0x192 <digitalWrite.constprop.2+0x24>
digitalWrite.constprop.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:157
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     1d8:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:158
    cli();
     1da:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    *out |= bit;
     1dc:	ec 91       	ld	r30, X
     1de:	e9 2b       	or	r30, r25
     1e0:	e7 cf       	rjmp	.-50     	; 0x1b0 <digitalWrite.constprop.2+0x42>

000001e2 <micros>:
micros():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     1e2:	3f b7       	in	r19, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:183

    cli();
     1e4:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:184
    m = millis_timer_overflow_count;
     1e6:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <millis_timer_overflow_count>
     1ea:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x1>
     1ee:	a0 91 d7 00 	lds	r26, 0x00D7	; 0x8000d7 <millis_timer_overflow_count+0x2>
     1f2:	b0 91 d8 00 	lds	r27, 0x00D8	; 0x8000d8 <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     1f6:	22 b7       	in	r18, 0x32	; 50
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:201

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     1f8:	08 b6       	in	r0, 0x38	; 56
     1fa:	01 fe       	sbrs	r0, 1
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <micros+0x26>
     1fe:	2f 3f       	cpi	r18, 0xFF	; 255
     200:	19 f0       	breq	.+6      	; 0x208 <micros+0x26>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:202
      m++;
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	a1 1d       	adc	r26, r1
     206:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     208:	3f bf       	out	0x3f, r19	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     20a:	ba 2f       	mov	r27, r26
     20c:	a9 2f       	mov	r26, r25
     20e:	98 2f       	mov	r25, r24
     210:	88 27       	eor	r24, r24
     212:	bc 01       	movw	r22, r24
     214:	cd 01       	movw	r24, r26
     216:	62 0f       	add	r22, r18
     218:	71 1d       	adc	r23, r1
     21a:	81 1d       	adc	r24, r1
     21c:	91 1d       	adc	r25, r1
     21e:	43 e0       	ldi	r20, 0x03	; 3
     220:	66 0f       	add	r22, r22
     222:	77 1f       	adc	r23, r23
     224:	88 1f       	adc	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	4a 95       	dec	r20
     22a:	d1 f7       	brne	.-12     	; 0x220 <micros+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     22c:	08 95       	ret

0000022e <delay>:
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:276
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	6b 01       	movw	r12, r22
     23c:	7c 01       	movw	r14, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:278
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     23e:	d1 df       	rcall	.-94     	; 0x1e2 <micros>
     240:	eb 01       	movw	r28, r22
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     242:	cf df       	rcall	.-98     	; 0x1e2 <micros>
     244:	6c 1b       	sub	r22, r28
     246:	7d 0b       	sbc	r23, r29
     248:	68 3e       	cpi	r22, 0xE8	; 232
     24a:	73 40       	sbci	r23, 0x03	; 3
     24c:	a0 f0       	brcs	.+40     	; 0x276 <__stack+0x17>
     24e:	c1 14       	cp	r12, r1
     250:	d1 04       	cpc	r13, r1
     252:	e1 04       	cpc	r14, r1
     254:	f1 04       	cpc	r15, r1
     256:	39 f4       	brne	.+14     	; 0x266 <__stack+0x7>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:292
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:283
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	c8 1a       	sub	r12, r24
     26a:	d1 08       	sbc	r13, r1
     26c:	e1 08       	sbc	r14, r1
     26e:	f1 08       	sbc	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:284
        start += 1000;
     270:	c8 51       	subi	r28, 0x18	; 24
     272:	dc 4f       	sbci	r29, 0xFC	; 252
     274:	e6 cf       	rjmp	.-52     	; 0x242 <delay+0x14>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     276:	c1 14       	cp	r12, r1
     278:	d1 04       	cpc	r13, r1
     27a:	e1 04       	cpc	r14, r1
     27c:	f1 04       	cpc	r15, r1
     27e:	09 f7       	brne	.-62     	; 0x242 <delay+0x14>
     280:	eb cf       	rjmp	.-42     	; 0x258 <delay+0x2a>

00000282 <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
     282:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
     286:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <TWI_RxHead>
     28a:	89 1b       	sub	r24, r25
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:138
}
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	08 95       	ret

00000290 <TwoWire::read() [clone .constprop.6]>:
_ZN7TwoWire4readEv.constprop.6():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:545

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     290:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <TwoWire::BufferLength>
     294:	88 23       	and	r24, r24
     296:	39 f0       	breq	.+14     	; 0x2a6 <TwoWire::read() [clone .constprop.6]+0x16>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:546
    return BufferLength - BufferIndex;
     298:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <TwoWire::BufferIndex>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:559
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     29c:	82 13       	cpse	r24, r18
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <TwoWire::read() [clone .constprop.6]+0x40>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:556

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	9f ef       	ldi	r25, 0xFF	; 255
     2a4:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:548
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    return BufferLength - BufferIndex;
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     2a6:	ed df       	rcall	.-38     	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:559
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     2a8:	88 23       	and	r24, r24
     2aa:	d1 f3       	breq	.-12     	; 0x2a0 <TwoWire::read() [clone .constprop.6]+0x10>
USI_TWI_Receive_Byte():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
     2ac:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
     2b0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <TWI_RxHead>
     2b4:	98 17       	cp	r25, r24
     2b6:	e1 f3       	breq	.-8      	; 0x2b0 <TwoWire::read() [clone .constprop.6]+0x20>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
     2b8:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <TWI_RxTail>
     2bc:	ef 5f       	subi	r30, 0xFF	; 255
     2be:	ef 70       	andi	r30, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
     2c0:	e0 93 e0 00 	sts	0x00E0, r30	; 0x8000e0 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ec 58       	subi	r30, 0x8C	; 140
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
_ZN7TwoWire4readEv.constprop.6():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:564
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
     2ca:	80 81       	ld	r24, Z
     2cc:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:569
    }
  }

  return value;
}
     2ce:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:561
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
     2d0:	e2 2f       	mov	r30, r18
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ec 58       	subi	r30, 0x8C	; 140
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	80 81       	ld	r24, Z
     2da:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:562
      ++BufferIndex;
     2dc:	2f 5f       	subi	r18, 0xFF	; 255
     2de:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <TwoWire::BufferIndex>
     2e2:	08 95       	ret

000002e4 <init_i2c()>:
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:11
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
}
void init_i2c() {
  Wire.begin(currentConfig.SLAVE_ADDR);
     2e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentConfig>
begin():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:371

  USI_TWI_Master_Initialise();
}

void TwoWire::begin(uint8_t address) {
  BufferIndex = 0;
     2e8:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <TwoWire::BufferIndex>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:372
  BufferLength = 0;
     2ec:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <TwoWire::BufferLength>
Flush_TWI_Buffers():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:54
static volatile uint8_t TWI_TxHead;
static volatile uint8_t TWI_TxTail;

void Flush_TWI_Buffers(void)
{
  TWI_RxTail = 0;
     2f0:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:55
  TWI_RxHead = 0;
     2f4:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:56
  TWI_TxTail = 0;
     2f8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:57
  TWI_TxHead = 0;
     2fc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <TWI_TxHead>
USI_TWI_Slave_Initialise():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:69
----------------------------------------------------------*/
void USI_TWI_Slave_Initialise(unsigned char TWI_ownAddress)
{
  Flush_TWI_Buffers();

  TWI_slaveAddress = TWI_ownAddress;
     300:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <TWI_slaveAddress>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:71

  USI_TWI_On_Slave_Transmit = 0;
     304:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <USI_TWI_On_Slave_Transmit+0x1>
     308:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <USI_TWI_On_Slave_Transmit>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:72
  USI_TWI_On_Slave_Receive = 0;
     30c:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <USI_TWI_On_Slave_Receive+0x1>
     310:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <USI_TWI_On_Slave_Receive>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:74

  PORT_USI_CL |= (1 << PORT_USI_SCL);     // Set SCL high
     314:	c2 9a       	sbi	0x18, 2	; 24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:75
  PORT_USI |= (1 << PORT_USI_SDA);        // Set SDA high
     316:	c0 9a       	sbi	0x18, 0	; 24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:76
  DDR_USI_CL |= (1 << PORT_USI_SCL);      // Set SCL as output
     318:	ba 9a       	sbi	0x17, 2	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:77
  DDR_USI &= ~(1 << PORT_USI_SDA);        // Set SDA as input
     31a:	b8 98       	cbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:78
  USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     31c:	88 ea       	ldi	r24, 0xA8	; 168
     31e:	8d b9       	out	0x0d, r24	; 13
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:83
          (1 << USIWM1) | (0 << USIWM0) | // Set USI in Two-wire mode. No USI Counter overflow prior
                                          // to first Start Condition (potential failure)
          (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
          (0 << USITC);
  USISR = 0xF0; // Clear all flags and reset overflow counter
     320:	80 ef       	ldi	r24, 0xF0	; 240
     322:	8e b9       	out	0x0e, r24	; 14
onRequest():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:599
  USI_TWI_On_Slave_Receive = function;
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) ) {
  USI_TWI_On_Slave_Transmit = function;
     324:	8e e0       	ldi	r24, 0x0E	; 14
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <USI_TWI_On_Slave_Transmit+0x1>
     32c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <USI_TWI_On_Slave_Transmit>
onReceive():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:594
  // XXX: to be implemented.
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) ) {
  USI_TWI_On_Slave_Receive = function;
     330:	8a ec       	ldi	r24, 0xCA	; 202
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <USI_TWI_On_Slave_Receive+0x1>
     338:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <USI_TWI_On_Slave_Receive>
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:14
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);
}
     33c:	08 95       	ret

0000033e <getVoltageMeasurement()>:
_Z21getVoltageMeasurementv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:130


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	20 e0       	ldi	r18, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:129
}


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	dc 01       	movw	r26, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:131
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
    sum += analogVal[k];
     348:	f9 01       	movw	r30, r18
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	e3 56       	subi	r30, 0x63	; 99
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	40 81       	ld	r20, Z
     354:	51 81       	ldd	r21, Z+1	; 0x01
     356:	84 0f       	add	r24, r20
     358:	95 1f       	adc	r25, r21
     35a:	a1 1d       	adc	r26, r1
     35c:	b1 1d       	adc	r27, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:130


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	20 31       	cpi	r18, 0x10	; 16
     364:	31 05       	cpc	r19, r1
     366:	81 f7       	brne	.-32     	; 0x348 <getVoltageMeasurement()+0xa>
/media/D/Data/Powerwall/cellModule/b_functions.ino:136
    sum += analogVal[k];
  }
  //Shift the bits to match OVERSAMPLE_LOOP size (buffer size of 8=3 shifts, 16=4 shifts)
  //Assume perfect reference of 2560mV for reference - we will correct for this with voltageCalibration

  uint16_t raw = (uint16_t)(sum / OVERSAMPLE_LOOP);
     368:	24 e0       	ldi	r18, 0x04	; 4
     36a:	b6 95       	lsr	r27
     36c:	a7 95       	ror	r26
     36e:	97 95       	ror	r25
     370:	87 95       	ror	r24
     372:	2a 95       	dec	r18
     374:	d1 f7       	brne	.-12     	; 0x36a <getVoltageMeasurement()+0x2c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:138

  return (uint16_t)((float)raw * currentConfig.voltageCalibration);
     376:	bc 01       	movw	r22, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	72 d5       	rcall	.+2788   	; 0xe62 <__floatunsisf>
     37e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <currentConfig+0x1>
     382:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <currentConfig+0x2>
     386:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <currentConfig+0x3>
     38a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <currentConfig+0x4>
     38e:	f3 d5       	rcall	.+3046   	; 0xf76 <__mulsf3>
     390:	3c d5       	rcall	.+2680   	; 0xe0a <__fixunssfsi>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	65 d5       	rcall	.+2762   	; 0xe62 <__floatunsisf>
/media/D/Data/Powerwall/cellModule/b_functions.ino:139
}
     398:	08 95       	ret

0000039a <bypass_off()>:
_Z10bypass_offv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:120
  uint16_t_to_bytes.b[1] = Wire.read();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     39a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <targetBypassVoltage+0x1>
     39e:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:121
  bypassCnt = 0;
     3a2:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:122
  bypassEnabled = false;
     3a6:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <bypassEnabled>
/media/D/Data/Powerwall/cellModule/b_functions.ino:123
  green_pattern = GREEN_LED_PATTERN_STANDARD;
     3aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/b_functions.ino:124
}
     3ae:	08 95       	ret

000003b0 <readFloat()>:
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:105
  Wire.write(float_to_bytes.b[1]);
  Wire.write(float_to_bytes.b[2]);
  Wire.write(float_to_bytes.b[3]);
}

float readFloat() {
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
/media/D/Data/Powerwall/cellModule/b_functions.ino:106
  float_to_bytes.b[0] = Wire.read();
     3b4:	6d df       	rcall	.-294    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3b6:	c4 e9       	ldi	r28, 0x94	; 148
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
     3ba:	88 83       	st	Y, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:107
  float_to_bytes.b[1] = Wire.read();
     3bc:	69 df       	rcall	.-302    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3be:	89 83       	std	Y+1, r24	; 0x01
/media/D/Data/Powerwall/cellModule/b_functions.ino:108
  float_to_bytes.b[2] = Wire.read();
     3c0:	67 df       	rcall	.-306    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3c2:	8a 83       	std	Y+2, r24	; 0x02
/media/D/Data/Powerwall/cellModule/b_functions.ino:109
  float_to_bytes.b[3] = Wire.read();
     3c4:	65 df       	rcall	.-310    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3c6:	8b 83       	std	Y+3, r24	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:111

  return float_to_bytes.val;
     3c8:	68 81       	ld	r22, Y
     3ca:	79 81       	ldd	r23, Y+1	; 0x01
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	9b 81       	ldd	r25, Y+3	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <sendFloat(float)>:
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:96

void sendByte(uint8_t number) {
  Wire.write(number);
}

void sendFloat(float number) {
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	17 2f       	mov	r17, r23
     3de:	d8 2f       	mov	r29, r24
     3e0:	c9 2f       	mov	r28, r25
/media/D/Data/Powerwall/cellModule/b_functions.ino:97
  float_to_bytes.val = number;
     3e2:	86 2f       	mov	r24, r22
     3e4:	97 2f       	mov	r25, r23
     3e6:	ad 2f       	mov	r26, r29
     3e8:	bc 2f       	mov	r27, r28
     3ea:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <float_to_bytes>
     3ee:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <float_to_bytes+0x1>
     3f2:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <float_to_bytes+0x2>
     3f6:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <float_to_bytes+0x3>
/media/D/Data/Powerwall/cellModule/b_functions.ino:99

  Wire.write(float_to_bytes.b[0]);
     3fa:	9c de       	rcall	.-712    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:100
  Wire.write(float_to_bytes.b[1]);
     3fc:	81 2f       	mov	r24, r17
     3fe:	9a de       	rcall	.-716    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:101
  Wire.write(float_to_bytes.b[2]);
     400:	8d 2f       	mov	r24, r29
     402:	98 de       	rcall	.-720    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:102
  Wire.write(float_to_bytes.b[3]);
     404:	8c 2f       	mov	r24, r28
/media/D/Data/Powerwall/cellModule/b_functions.ino:103
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
/media/D/Data/Powerwall/cellModule/b_functions.ino:102
  float_to_bytes.val = number;

  Wire.write(float_to_bytes.b[0]);
  Wire.write(float_to_bytes.b[1]);
  Wire.write(float_to_bytes.b[2]);
  Wire.write(float_to_bytes.b[3]);
     40c:	93 ce       	rjmp	.-730    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>

0000040e <sendUnsignedInt(unsigned int)>:
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:87
    wdt_reset();
  }
}


void sendUnsignedInt(uint16_t number) {
     40e:	cf 93       	push	r28
     410:	c8 2f       	mov	r28, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:88
  Wire.write((byte)((number >> 8) & 0xFF));
     412:	89 2f       	mov	r24, r25
     414:	8f de       	rcall	.-738    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
  Wire.write((byte)(number & 0xFF));
     416:	8c 2f       	mov	r24, r28
/media/D/Data/Powerwall/cellModule/b_functions.ino:90
}
     418:	cf 91       	pop	r28
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
}


void sendUnsignedInt(uint16_t number) {
  Wire.write((byte)((number >> 8) & 0xFF));
  Wire.write((byte)(number & 0xFF));
     41a:	8c ce       	rjmp	.-744    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>

0000041c <requestEvent()>:
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:4
//cellModule -> cellController
// function that executes whenever data is requested by master (this answers requestFrom command)
void requestEvent() {
  switch (cmdByte) {
     41c:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <cmdByte>
     420:	ea 50       	subi	r30, 0x0A	; 10
     422:	e8 30       	cpi	r30, 0x08	; 8
     424:	d0 f4       	brcc	.+52     	; 0x45a <requestEvent()+0x3e>
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	e9 5e       	subi	r30, 0xE9	; 233
     42a:	fd 4f       	sbci	r31, 0xFD	; 253
     42c:	09 94       	ijmp
     42e:	07 c0       	rjmp	.+14     	; 0x43e <requestEvent()+0x22>
     430:	28 c0       	rjmp	.+80     	; 0x482 <requestEvent()+0x66>
     432:	3a c0       	rjmp	.+116    	; 0x4a8 <requestEvent()+0x8c>
     434:	43 c0       	rjmp	.+134    	; 0x4bc <requestEvent()+0xa0>
     436:	17 c0       	rjmp	.+46     	; 0x466 <requestEvent()+0x4a>
     438:	1b c0       	rjmp	.+54     	; 0x470 <requestEvent()+0x54>
     43a:	1f c0       	rjmp	.+62     	; 0x47a <requestEvent()+0x5e>
     43c:	04 c0       	rjmp	.+8      	; 0x446 <requestEvent()+0x2a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:6
    case READOUT_voltage:
      if (bypassEnabled) {
     43e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <bypassEnabled>
     442:	88 23       	and	r24, r24
     444:	29 f0       	breq	.+10     	; 0x450 <requestEvent()+0x34>
/media/D/Data/Powerwall/cellModule/c_comm.ino:14
        sendUnsignedInt(voltageMeasurement);
      }

      break;
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
     446:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <voltageMeasurement_bypass>
     44a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <voltageMeasurement_bypass+0x1>
     44e:	04 c0       	rjmp	.+8      	; 0x458 <requestEvent()+0x3c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:9
  switch (cmdByte) {
    case READOUT_voltage:
      if (bypassEnabled) {
        sendUnsignedInt(voltageMeasurement_bypass);
      } else {
        sendUnsignedInt(voltageMeasurement);
     450:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <voltageMeasurement>
     454:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <voltageMeasurement+0x1>
     458:	da df       	rcall	.-76     	; 0x40e <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:47
      //Dont do anything - timeout
      break;
  }

  //Clear cmdByte
  cmdByte = 0;
     45a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:50

  //Reset when we last processed a request, if this times out master has stopped communicating with module
  last_i2c_request = 150;
     45e:	86 e9       	ldi	r24, 0x96	; 150
     460:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <last_i2c_request>
/media/D/Data/Powerwall/cellModule/c_comm.ino:51
}
     464:	08 95       	ret
/media/D/Data/Powerwall/cellModule/c_comm.ino:18
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
      break;
      
    case READOUT_raw_voltage:
      sendUnsignedInt(last_raw_adc);
     466:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <last_raw_adc>
     46a:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <last_raw_adc+0x1>
     46e:	f4 cf       	rjmp	.-24     	; 0x458 <requestEvent()+0x3c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:22
      break;

    case READOUT_error_counter:
      sendUnsignedInt(error_counter);
     470:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <error_counter>
     474:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <error_counter+0x1>
     478:	ef cf       	rjmp	.-34     	; 0x458 <requestEvent()+0x3c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:26
      break;

    case READOUT_bypass_state:
      sendByte(bypassEnabled);
     47a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <bypassEnabled>
sendByte():
/media/D/Data/Powerwall/cellModule/b_functions.ino:93
}

void sendByte(uint8_t number) {
  Wire.write(number);
     47e:	5a de       	rcall	.-844    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
     480:	ec cf       	rjmp	.-40     	; 0x45a <requestEvent()+0x3e>
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:30
      break;

    case READOUT_temperature:
      sendUnsignedInt((uint16_t)((float)tempSensorValue * currentConfig.tempSensorCalibration));
     482:	60 91 bf 00 	lds	r22, 0x00BF	; 0x8000bf <tempSensorValue>
     486:	70 91 c0 00 	lds	r23, 0x00C0	; 0x8000c0 <tempSensorValue+0x1>
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	e9 d4       	rcall	.+2514   	; 0xe62 <__floatunsisf>
     490:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <currentConfig+0x5>
     494:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <currentConfig+0x6>
     498:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <currentConfig+0x7>
     49c:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <currentConfig+0x8>
     4a0:	6a d5       	rcall	.+2772   	; 0xf76 <__mulsf3>
     4a2:	b3 d4       	rcall	.+2406   	; 0xe0a <__fixunssfsi>
     4a4:	cb 01       	movw	r24, r22
     4a6:	d8 cf       	rjmp	.-80     	; 0x458 <requestEvent()+0x3c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:34
      break;

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
     4a8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <currentConfig+0x1>
     4ac:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <currentConfig+0x2>
     4b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentConfig+0x3>
     4b4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:38
      break;

    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
     4b8:	8e df       	rcall	.-228    	; 0x3d6 <sendFloat(float)>
     4ba:	cf cf       	rjmp	.-98     	; 0x45a <requestEvent()+0x3e>
     4bc:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <currentConfig+0x5>
     4c0:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <currentConfig+0x6>
     4c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <currentConfig+0x7>
     4c8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <currentConfig+0x8>
     4cc:	f5 cf       	rjmp	.-22     	; 0x4b8 <requestEvent()+0x9c>

000004ce <ledOFF()>:
_Z6ledOFFv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:8
  DDRB |= (1 << DDB1);
  PORTB |=  (1 << PB1);
}

inline void ledOFF() {
  DDRB |= (1 << DDB1);
     4ce:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:9
  PORTB &= ~(1 << PB1);
     4d0:	c1 98       	cbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:10
}
     4d2:	08 95       	ret

000004d4 <ledON()>:
_Z5ledONv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:3

inline void ledON() {
  DDRB |= (1 << DDB1);
     4d4:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:4
  PORTB |=  (1 << PB1);
     4d6:	c1 9a       	sbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:5
}
     4d8:	08 95       	ret

000004da <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	ec 01       	movw	r28, r24
     4e6:	f6 2e       	mov	r15, r22
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     4e8:	08 81       	ld	r16, Y
     4ea:	19 81       	ldd	r17, Y+1	; 0x01
     4ec:	c8 01       	movw	r24, r16
     4ee:	73 d4       	rcall	.+2278   	; 0xdd6 <eeprom_read_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4f0:	f8 16       	cp	r15, r24
     4f2:	19 f0       	breq	.+6      	; 0x4fa <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     4f4:	6f 2d       	mov	r22, r15
     4f6:	c8 01       	movw	r24, r16
     4f8:	76 d4       	rcall	.+2284   	; 0xde6 <eeprom_write_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4fa:	ce 01       	movw	r24, r28
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	08 95       	ret

00000508 <WriteConfigToEEPROM()>:
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:31
    }
  }
  return crc;
}

void WriteConfigToEEPROM() {
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <WriteConfigToEEPROM()+0xe>
     516:	00 d0       	rcall	.+0      	; 0x518 <WriteConfigToEEPROM()+0x10>
     518:	00 d0       	rcall	.+0      	; 0x51a <WriteConfigToEEPROM()+0x12>
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	81 e6       	ldi	r24, 0x61	; 97
     520:	e8 2e       	mov	r14, r24
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	f8 2e       	mov	r15, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     526:	04 e1       	ldi	r16, 0x14	; 20
     528:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     52a:	1a 83       	std	Y+2, r17	; 0x02
     52c:	09 83       	std	Y+1, r16	; 0x01
     52e:	f7 01       	movw	r30, r14
     530:	61 91       	ld	r22, Z+
     532:	7f 01       	movw	r14, r30
     534:	ce 01       	movw	r24, r28
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	d0 df       	rcall	.-96     	; 0x4da <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     53a:	0f 5f       	subi	r16, 0xFF	; 255
     53c:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     53e:	0d 31       	cpi	r16, 0x1D	; 29
     540:	11 05       	cpc	r17, r1
     542:	99 f7       	brne	.-26     	; 0x52a <WriteConfigToEEPROM()+0x22>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:33
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
     544:	81 e6       	ldi	r24, 0x61	; 97
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	95 dd       	rcall	.-1238   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]>
     54a:	69 83       	std	Y+1, r22	; 0x01
     54c:	7a 83       	std	Y+2, r23	; 0x02
     54e:	8b 83       	std	Y+3, r24	; 0x03
     550:	9c 83       	std	Y+4, r25	; 0x04
     552:	8e 01       	movw	r16, r28
     554:	0f 5f       	subi	r16, 0xFF	; 255
     556:	1f 4f       	sbci	r17, 0xFF	; 255
     558:	f1 2c       	mov	r15, r1
     55a:	e1 2c       	mov	r14, r1
_ZN11EEPROMClass3putImEERKT_iS3_.isra.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     55c:	fe 82       	std	Y+6, r15	; 0x06
     55e:	ed 82       	std	Y+5, r14	; 0x05
     560:	f8 01       	movw	r30, r16
     562:	61 91       	ld	r22, Z+
     564:	8f 01       	movw	r16, r30
     566:	ce 01       	movw	r24, r28
     568:	05 96       	adiw	r24, 0x05	; 5
     56a:	b7 df       	rcall	.-146    	; 0x4da <EERef::update(unsigned char)>
     56c:	ff ef       	ldi	r31, 0xFF	; 255
     56e:	ef 1a       	sub	r14, r31
     570:	ff 0a       	sbc	r15, r31
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	e8 16       	cp	r14, r24
     576:	f1 04       	cpc	r15, r1
     578:	89 f7       	brne	.-30     	; 0x55c <WriteConfigToEEPROM()+0x54>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:34
}
     57a:	26 96       	adiw	r28, 0x06	; 6
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <receiveEvent(int)>:
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:56
}


//cellController -> cellModule
// function that executes whenever data is received from master
void receiveEvent(int bytesCnt) {
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <receiveEvent(int)+0x12>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
/media/D/Data/Powerwall/cellModule/c_comm.ino:57
  if (bytesCnt <= 0) return;
     5aa:	18 16       	cp	r1, r24
     5ac:	19 06       	cpc	r1, r25
     5ae:	0c f0       	brlt	.+2      	; 0x5b2 <receiveEvent(int)+0x1e>
     5b0:	f0 c0       	rjmp	.+480    	; 0x792 <receiveEvent(int)+0x1fe>
/media/D/Data/Powerwall/cellModule/c_comm.ino:61

  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;
     5b2:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <cmdByte>
     5b6:	22 23       	and	r18, r18
     5b8:	51 f0       	breq	.+20     	; 0x5ce <receiveEvent(int)+0x3a>
     5ba:	20 91 db 00 	lds	r18, 0x00DB	; 0x8000db <error_counter>
     5be:	30 91 dc 00 	lds	r19, 0x00DC	; 0x8000dc <error_counter+0x1>
     5c2:	2f 5f       	subi	r18, 0xFF	; 255
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	30 93 dc 00 	sts	0x00DC, r19	; 0x8000dc <error_counter+0x1>
     5ca:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <error_counter>
     5ce:	8c 01       	movw	r16, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:63

  cmdByte = Wire.read();
     5d0:	5f de       	rcall	.-834    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     5d2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:67
  bytesCnt--;

  //Is it a command byte (there are other bytes to process) or not?
  if (bitRead(cmdByte, COMMAND_BIT)) {
     5d6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <cmdByte>
     5da:	86 ff       	sbrs	r24, 6
     5dc:	c8 c0       	rjmp	.+400    	; 0x76e <receiveEvent(int)+0x1da>
/media/D/Data/Powerwall/cellModule/c_comm.ino:64
  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;

  cmdByte = Wire.read();
  bytesCnt--;
     5de:	01 50       	subi	r16, 0x01	; 1
     5e0:	11 09       	sbc	r17, r1
/media/D/Data/Powerwall/cellModule/c_comm.ino:69

  //Is it a command byte (there are other bytes to process) or not?
  if (bitRead(cmdByte, COMMAND_BIT)) {

    bitClear(cmdByte, COMMAND_BIT);
     5e2:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <cmdByte>
     5e6:	2f 7b       	andi	r18, 0xBF	; 191
     5e8:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:71

    switch (cmdByte) {
     5ec:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <cmdByte>
     5f0:	e1 50       	subi	r30, 0x01	; 1
     5f2:	e8 30       	cpi	r30, 0x08	; 8
     5f4:	90 f4       	brcc	.+36     	; 0x61a <receiveEvent(int)+0x86>
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e1 50       	subi	r30, 0x01	; 1
     5fa:	fd 4f       	sbci	r31, 0xFD	; 253
     5fc:	09 94       	ijmp
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <receiveEvent(int)+0x7a>
     600:	0c c0       	rjmp	.+24     	; 0x61a <receiveEvent(int)+0x86>
     602:	1e c0       	rjmp	.+60     	; 0x640 <receiveEvent(int)+0xac>
     604:	a1 c0       	rjmp	.+322    	; 0x748 <receiveEvent(int)+0x1b4>
     606:	19 c0       	rjmp	.+50     	; 0x63a <receiveEvent(int)+0xa6>
     608:	2a c0       	rjmp	.+84     	; 0x65e <receiveEvent(int)+0xca>
     60a:	44 c0       	rjmp	.+136    	; 0x694 <receiveEvent(int)+0x100>
     60c:	5f c0       	rjmp	.+190    	; 0x6cc <receiveEvent(int)+0x138>
/media/D/Data/Powerwall/cellModule/c_comm.ino:73
      case COMMAND_green_led_pattern:
        if (bytesCnt == 1) {
     60e:	01 30       	cpi	r16, 0x01	; 1
     610:	11 05       	cpc	r17, r1
     612:	19 f4       	brne	.+6      	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:74
          green_pattern = Wire.read();
     614:	3d de       	rcall	.-902    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     616:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:142
        }
        break;

    }

    cmdByte = 0;
     61a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <cmdByte>
available():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:545

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     61e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <TwoWire::BufferLength>
     622:	88 23       	and	r24, r24
     624:	09 f4       	brne	.+2      	; 0x628 <receiveEvent(int)+0x94>
     626:	b2 c0       	rjmp	.+356    	; 0x78c <receiveEvent(int)+0x1f8>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:546
    return BufferLength - BufferIndex;
     628:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <TwoWire::BufferIndex>
     62c:	89 1b       	sub	r24, r25
     62e:	99 0b       	sbc	r25, r25
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:155
        break;
    }
  }

  // clear rx buffer
  while (Wire.available()) Wire.read();
     630:	89 2b       	or	r24, r25
     632:	09 f4       	brne	.+2      	; 0x636 <receiveEvent(int)+0xa2>
     634:	ae c0       	rjmp	.+348    	; 0x792 <receiveEvent(int)+0x1fe>
     636:	2c de       	rcall	.-936    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     638:	f2 cf       	rjmp	.-28     	; 0x61e <receiveEvent(int)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:79
          green_pattern = Wire.read();
        }
        break;

      case COMMAND_green_led_default:
        green_pattern = GREEN_LED_PATTERN_STANDARD;
     63a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     63e:	ed cf       	rjmp	.-38     	; 0x61a <receiveEvent(int)+0x86>
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     640:	1a 82       	std	Y+2, r1	; 0x02
     642:	19 82       	std	Y+1, r1	; 0x01
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	47 df       	rcall	.-370    	; 0x4da <EERef::update(unsigned char)>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	9a 83       	std	Y+2, r25	; 0x02
     652:	89 83       	std	Y+1, r24	; 0x01
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	3f df       	rcall	.-386    	; 0x4da <EERef::update(unsigned char)>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:135
          uint8_t newAddress = Wire.read();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= DEFAULT_SLAVE_ADDR_START_RANGE && newAddress <= DEFAULT_SLAVE_ADDR_END_RANGE) {
            currentConfig.SLAVE_ADDR = newAddress;
            WriteConfigToEEPROM();
            Reboot();
     65c:	b9 d2       	rcall	.+1394   	; 0xbd0 <Reboot()>
/media/D/Data/Powerwall/cellModule/c_comm.ino:88
        factory_default();
        Reboot();
        break;

      case COMMAND_set_voltage_calibration:
        if (bytesCnt == sizeof(float)) {
     65e:	04 30       	cpi	r16, 0x04	; 4
     660:	11 05       	cpc	r17, r1
     662:	d9 f6       	brne	.-74     	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:89
          float newValue = readFloat();
     664:	a5 de       	rcall	.-694    	; 0x3b0 <readFloat()>
     666:	6b 01       	movw	r12, r22
     668:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:91
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration) {
     66a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <currentConfig+0x1>
     66e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <currentConfig+0x2>
     672:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <currentConfig+0x3>
     676:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <currentConfig+0x4>
     67a:	c3 d3       	rcall	.+1926   	; 0xe02 <__cmpsf2>
     67c:	88 23       	and	r24, r24
     67e:	69 f2       	breq	.-102    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:92
            currentConfig.voltageCalibration = newValue;
     680:	c0 92 62 00 	sts	0x0062, r12	; 0x800062 <currentConfig+0x1>
     684:	d0 92 63 00 	sts	0x0063, r13	; 0x800063 <currentConfig+0x2>
     688:	e0 92 64 00 	sts	0x0064, r14	; 0x800064 <currentConfig+0x3>
     68c:	f0 92 65 00 	sts	0x0065, r15	; 0x800065 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:104
        if (bytesCnt == sizeof(float)) {
          float newValue = readFloat();
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
            currentConfig.tempSensorCalibration = newValue;
            WriteConfigToEEPROM();
     690:	3b df       	rcall	.-394    	; 0x508 <WriteConfigToEEPROM()>
     692:	c3 cf       	rjmp	.-122    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:99
          }
        }
        break;

      case COMMAND_set_temperature_calibration:
        if (bytesCnt == sizeof(float)) {
     694:	04 30       	cpi	r16, 0x04	; 4
     696:	11 05       	cpc	r17, r1
     698:	09 f0       	breq	.+2      	; 0x69c <receiveEvent(int)+0x108>
     69a:	bf cf       	rjmp	.-130    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:100
          float newValue = readFloat();
     69c:	89 de       	rcall	.-750    	; 0x3b0 <readFloat()>
     69e:	6b 01       	movw	r12, r22
     6a0:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:102
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
     6a2:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <currentConfig+0x5>
     6a6:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <currentConfig+0x6>
     6aa:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <currentConfig+0x7>
     6ae:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <currentConfig+0x8>
     6b2:	a7 d3       	rcall	.+1870   	; 0xe02 <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	09 f4       	brne	.+2      	; 0x6ba <receiveEvent(int)+0x126>
     6b8:	b0 cf       	rjmp	.-160    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:103
            currentConfig.tempSensorCalibration = newValue;
     6ba:	c0 92 66 00 	sts	0x0066, r12	; 0x800066 <currentConfig+0x5>
     6be:	d0 92 67 00 	sts	0x0067, r13	; 0x800067 <currentConfig+0x6>
     6c2:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <currentConfig+0x7>
     6c6:	f0 92 69 00 	sts	0x0069, r15	; 0x800069 <currentConfig+0x8>
     6ca:	e2 cf       	rjmp	.-60     	; 0x690 <receiveEvent(int)+0xfc>
/media/D/Data/Powerwall/cellModule/c_comm.ino:110
          }
        }
        break;

      case COMMAND_set_bypass_voltage:
        if (bytesCnt == sizeof(uint16_t)) {
     6cc:	02 30       	cpi	r16, 0x02	; 2
     6ce:	11 05       	cpc	r17, r1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <receiveEvent(int)+0x140>
     6d2:	a3 cf       	rjmp	.-186    	; 0x61a <receiveEvent(int)+0x86>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  float_to_bytes.b[3] = Wire.read();

  return float_to_bytes.val;
}
uint16_t readUINT16() {
  uint16_t_to_bytes.b[0] = Wire.read();
     6d4:	dd dd       	rcall	.-1094   	; 0x290 <TwoWire::read() [clone .constprop.6]>
     6d6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <uint16_t_to_bytes>
/media/D/Data/Powerwall/cellModule/b_functions.ino:115
  uint16_t_to_bytes.b[1] = Wire.read();
     6da:	da dd       	rcall	.-1100   	; 0x290 <TwoWire::read() [clone .constprop.6]>
     6dc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <uint16_t_to_bytes+0x1>
/media/D/Data/Powerwall/cellModule/b_functions.ino:116
  return uint16_t_to_bytes.val;
     6e0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <uint16_t_to_bytes>
     6e4:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <uint16_t_to_bytes+0x1>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:113
          uint16_t newValue = readUINT16();
          //Only accept if its a realistic value and the value is LESS than the last voltage reading
          if (newValue >= MIN_BYPASS_VOLTAGE && newValue <= MAX_BYPASS_VOLTAGE && newValue < voltageMeasurement) {
     6e8:	9c 01       	movw	r18, r24
     6ea:	28 5b       	subi	r18, 0xB8	; 184
     6ec:	3b 40       	sbci	r19, 0x0B	; 11
     6ee:	21 3b       	cpi	r18, 0xB1	; 177
     6f0:	34 40       	sbci	r19, 0x04	; 4
     6f2:	e8 f4       	brcc	.+58     	; 0x72e <receiveEvent(int)+0x19a>
     6f4:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <voltageMeasurement>
     6f8:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <voltageMeasurement+0x1>
     6fc:	82 17       	cp	r24, r18
     6fe:	93 07       	cpc	r25, r19
     700:	b0 f4       	brcc	.+44     	; 0x72e <receiveEvent(int)+0x19a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:114
            targetBypassVoltage = newValue;
     702:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <targetBypassVoltage+0x1>
     706:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/c_comm.ino:115
            voltageMeasurement_bypass = voltageMeasurement;//init bypass voltage
     70a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <voltageMeasurement>
     70e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <voltageMeasurement+0x1>
     712:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <voltageMeasurement_bypass+0x1>
     716:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/c_comm.ino:116
            bypassCnt = BYPASS_COUNTER_MAX;
     71a:	80 ef       	ldi	r24, 0xF0	; 240
     71c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <bypassCnt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:117
            green_pattern = GREEN_LED_PATTERN_BYPASS;
     720:	8c e6       	ldi	r24, 0x6C	; 108
     722:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:118
            bypassEnabled = true;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <bypassEnabled>
     72c:	76 cf       	rjmp	.-276    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:121
          } else {
            //Disable
            bypass_off();millis();
     72e:	35 de       	rcall	.-918    	; 0x39a <bypass_off()>
millis():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:167
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     730:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:171

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     732:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:172
    m = millis_timer_millis;
     734:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <millis_timer_millis>
     738:	50 91 d2 00 	lds	r21, 0x00D2	; 0x8000d2 <millis_timer_millis+0x1>
     73c:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <millis_timer_millis+0x2>
     740:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:173
    SREG = oldSREG;
     744:	8f bf       	out	0x3f, r24	; 63
     746:	69 cf       	rjmp	.-302    	; 0x61a <receiveEvent(int)+0x86>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:129
        break;


      case COMMAND_set_slave_address:
        //Set i2c slave address and write to EEPROM, then reboot
        if (bytesCnt == 1 ) {
     748:	01 30       	cpi	r16, 0x01	; 1
     74a:	11 05       	cpc	r17, r1
     74c:	09 f0       	breq	.+2      	; 0x750 <receiveEvent(int)+0x1bc>
     74e:	65 cf       	rjmp	.-310    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:130
          uint8_t newAddress = Wire.read();
     750:	9f dd       	rcall	.-1218   	; 0x290 <TwoWire::read() [clone .constprop.6]>
/media/D/Data/Powerwall/cellModule/c_comm.ino:132
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= DEFAULT_SLAVE_ADDR_START_RANGE && newAddress <= DEFAULT_SLAVE_ADDR_END_RANGE) {
     752:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <currentConfig>
     756:	89 17       	cp	r24, r25
     758:	09 f4       	brne	.+2      	; 0x75c <receiveEvent(int)+0x1c8>
     75a:	5f cf       	rjmp	.-322    	; 0x61a <receiveEvent(int)+0x86>
     75c:	98 ee       	ldi	r25, 0xE8	; 232
     75e:	98 0f       	add	r25, r24
     760:	99 31       	cpi	r25, 0x19	; 25
     762:	08 f0       	brcs	.+2      	; 0x766 <receiveEvent(int)+0x1d2>
     764:	5a cf       	rjmp	.-332    	; 0x61a <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:133
            currentConfig.SLAVE_ADDR = newAddress;
     766:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentConfig>
/media/D/Data/Powerwall/cellModule/c_comm.ino:134
            WriteConfigToEEPROM();
     76a:	ce de       	rcall	.-612    	; 0x508 <WriteConfigToEEPROM()>
     76c:	77 cf       	rjmp	.-274    	; 0x65c <receiveEvent(int)+0xc8>
/media/D/Data/Powerwall/cellModule/c_comm.ino:146

    cmdByte = 0;
  } else {
    //Its a READ request

    switch (cmdByte) {
     76e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <cmdByte>
     772:	8a 30       	cpi	r24, 0x0A	; 10
     774:	09 f0       	breq	.+2      	; 0x778 <receiveEvent(int)+0x1e4>
     776:	53 cf       	rjmp	.-346    	; 0x61e <receiveEvent(int)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:148
      case READOUT_voltage:
        voltageMeasurement = getVoltageMeasurement();
     778:	e2 dd       	rcall	.-1084   	; 0x33e <getVoltageMeasurement()>
     77a:	47 d3       	rcall	.+1678   	; 0xe0a <__fixunssfsi>
     77c:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <voltageMeasurement+0x1>
     780:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <voltageMeasurement>
/media/D/Data/Powerwall/cellModule/c_comm.ino:149
        ledFlash = true;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <ledFlash>
     78a:	49 cf       	rjmp	.-366    	; 0x61e <receiveEvent(int)+0x8a>
available():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:548
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     78c:	7a dd       	rcall	.-1292   	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	4f cf       	rjmp	.-354    	; 0x630 <receiveEvent(int)+0x9c>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:156
    }
  }

  // clear rx buffer
  while (Wire.available()) Wire.read();
}
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	08 95       	ret

000007a8 <__vector_5>:
__vector_5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	af 93       	push	r26
     7bc:	bf 93       	push	r27
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     7be:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <millis_timer_millis>
     7c2:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <millis_timer_millis+0x1>
     7c6:	a0 91 d3 00 	lds	r26, 0x00D3	; 0x8000d3 <millis_timer_millis+0x2>
     7ca:	b0 91 d4 00 	lds	r27, 0x00D4	; 0x8000d4 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
     7ce:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:145

    f += FRACT_INC;
     7d2:	26 e0       	ldi	r18, 0x06	; 6
     7d4:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:147

    if (f >= FRACT_MAX)
     7d6:	2d 37       	cpi	r18, 0x7D	; 125
     7d8:	68 f1       	brcs	.+90     	; 0x834 <__vector_5+0x8c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:149
    {
      f -= FRACT_MAX;
     7da:	29 e8       	ldi	r18, 0x89	; 137
     7dc:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
     7de:	03 96       	adiw	r24, 0x03	; 3
     7e0:	a1 1d       	adc	r26, r1
     7e2:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     7e4:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:159
    millis_timer_millis = m;
     7e8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <millis_timer_millis>
     7ec:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <millis_timer_millis+0x1>
     7f0:	a0 93 d3 00 	sts	0x00D3, r26	; 0x8000d3 <millis_timer_millis+0x2>
     7f4:	b0 93 d4 00 	sts	0x00D4, r27	; 0x8000d4 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:160
    millis_timer_overflow_count++;
     7f8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <millis_timer_overflow_count>
     7fc:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x1>
     800:	a0 91 d7 00 	lds	r26, 0x00D7	; 0x8000d7 <millis_timer_overflow_count+0x2>
     804:	b0 91 d8 00 	lds	r27, 0x00D8	; 0x8000d8 <millis_timer_overflow_count+0x3>
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	a1 1d       	adc	r26, r1
     80c:	b1 1d       	adc	r27, r1
     80e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <millis_timer_overflow_count>
     812:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <millis_timer_overflow_count+0x1>
     816:	a0 93 d7 00 	sts	0x00D7, r26	; 0x8000d7 <millis_timer_overflow_count+0x2>
     81a:	b0 93 d8 00 	sts	0x00D8, r27	; 0x8000d8 <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:162

  }
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     834:	02 96       	adiw	r24, 0x02	; 2
     836:	a1 1d       	adc	r26, r1
     838:	b1 1d       	adc	r27, r1
     83a:	d4 cf       	rjmp	.-88     	; 0x7e4 <__vector_5+0x3c>

0000083c <__vector_14>:
__vector_14():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	cf 93       	push	r28
     860:	ef 93       	push	r30
     862:	ff 93       	push	r31
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     864:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <USI_TWI_Overflow_State>
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	09 f4       	brne	.+2      	; 0x86e <__vector_14+0x32>
     86c:	76 c0       	rjmp	.+236    	; 0x95a <__vector_14+0x11e>
     86e:	c8 f4       	brcc	.+50     	; 0x8a2 <__vector_14+0x66>
     870:	88 23       	and	r24, r24
     872:	99 f1       	breq	.+102    	; 0x8da <__vector_14+0x9e>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	09 f4       	brne	.+2      	; 0x87a <__vector_14+0x3e>
     878:	56 c0       	rjmp	.+172    	; 0x926 <__vector_14+0xea>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:310
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	cf 91       	pop	r28
     880:	bf 91       	pop	r27
     882:	af 91       	pop	r26
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	7f 91       	pop	r23
     88a:	6f 91       	pop	r22
     88c:	5f 91       	pop	r21
     88e:	4f 91       	pop	r20
     890:	3f 91       	pop	r19
     892:	2f 91       	pop	r18
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     8a2:	84 30       	cpi	r24, 0x04	; 4
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <__vector_14+0x6c>
     8a6:	5f c0       	rjmp	.+190    	; 0x966 <__vector_14+0x12a>
     8a8:	b8 f1       	brcs	.+110    	; 0x918 <__vector_14+0xdc>
     8aa:	85 30       	cpi	r24, 0x05	; 5
     8ac:	31 f7       	brne	.-52     	; 0x87a <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     8b4:	9f b1       	in	r25, 0x0f	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:299
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     8b6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <TWI_RxHead>
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	8f 70       	andi	r24, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:300
    if (TWI_RxTail != tmpRxHead) {
     8be:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <TWI_RxTail>
     8c2:	28 17       	cp	r18, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__vector_14+0x8c>
     8c6:	70 c0       	rjmp	.+224    	; 0x9a8 <__vector_14+0x16c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:301
      TWI_RxHead            = tmpRxHead;
     8c8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     8cc:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <TWI_RxHead>
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	ec 58       	subi	r30, 0x8C	; 140
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	90 83       	st	Z, r25
     8d8:	19 c0       	rjmp	.+50     	; 0x90c <__vector_14+0xd0>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:221

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     8da:	8f b1       	in	r24, 0x0f	; 15
     8dc:	88 23       	and	r24, r24
     8de:	31 f0       	breq	.+12     	; 0x8ec <__vector_14+0xb0>
     8e0:	8f b1       	in	r24, 0x0f	; 15
     8e2:	86 95       	lsr	r24
     8e4:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <TWI_slaveAddress>
     8e8:	89 13       	cpse	r24, r25
     8ea:	19 c0       	rjmp	.+50     	; 0x91e <__vector_14+0xe2>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:222
      if (USIDR & 0x01) {
     8ec:	78 9b       	sbis	0x0f, 0	; 15
     8ee:	12 c0       	rjmp	.+36     	; 0x914 <__vector_14+0xd8>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:223
        if (USI_TWI_On_Slave_Transmit) {
     8f0:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <USI_TWI_On_Slave_Transmit>
     8f4:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <USI_TWI_On_Slave_Transmit+0x1>
     8f8:	30 97       	sbiw	r30, 0x00	; 0
     8fa:	29 f0       	breq	.+10     	; 0x906 <__vector_14+0xca>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:225
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
     8fc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <TWI_TxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
     900:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:227
          USI_TWI_On_Slave_Transmit();
     904:	09 95       	icall
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:229
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     906:	81 e0       	ldi	r24, 0x01	; 1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:231
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     908:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:233
      }
      SET_USI_TO_SEND_ACK();
     90c:	1f b8       	out	0x0f, r1	; 15
     90e:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     910:	8e e7       	ldi	r24, 0x7E	; 126
     912:	21 c0       	rjmp	.+66     	; 0x956 <__vector_14+0x11a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:231
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	f8 cf       	rjmp	.-16     	; 0x908 <__vector_14+0xcc>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:242
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     918:	8f b1       	in	r24, 0x0f	; 15
     91a:	88 23       	and	r24, r24
     91c:	21 f0       	breq	.+8      	; 0x926 <__vector_14+0xea>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     91e:	b8 98       	cbi	0x17, 0	; 23
     920:	88 ea       	ldi	r24, 0xA8	; 168
     922:	8d b9       	out	0x0d, r24	; 13
     924:	17 c0       	rjmp	.+46     	; 0x954 <__vector_14+0x118>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:253

  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     926:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:254
    if (TWI_TxHead != tmpTxTail) {
     92a:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <TWI_TxHead>
     92e:	98 17       	cp	r25, r24
     930:	b1 f3       	breq	.-20     	; 0x91e <__vector_14+0xe2>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     932:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <TWI_TxTail>
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	8f 70       	andi	r24, 0x0F	; 15
     93a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:256
      USIDR      = TWI_TxBuf[TWI_TxTail];
     93e:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <TWI_TxTail>
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ec 57       	subi	r30, 0x7C	; 124
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	80 81       	ld	r24, Z
     94a:	8f b9       	out	0x0f, r24	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:262
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:263
    SET_USI_TO_SEND_DATA();
     952:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     954:	80 e7       	ldi	r24, 0x70	; 112
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     956:	8e b9       	out	0x0e, r24	; 14
     958:	90 cf       	rjmp	.-224    	; 0x87a <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:268
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:269
    SET_USI_TO_READ_ACK();
     960:	b8 98       	cbi	0x17, 0	; 23
     962:	1f b8       	out	0x0f, r1	; 15
     964:	d5 cf       	rjmp	.-86     	; 0x910 <__vector_14+0xd4>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:275
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:276
    SET_USI_TO_READ_DATA();
     96c:	b8 98       	cbi	0x17, 0	; 23
     96e:	80 e7       	ldi	r24, 0x70	; 112
     970:	8e b9       	out	0x0e, r24	; 14
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:278
    // call slave receive callback on stop condition
    if (USI_TWI_On_Slave_Receive) {
     972:	00 91 ca 00 	lds	r16, 0x00CA	; 0x8000ca <USI_TWI_On_Slave_Receive>
     976:	10 91 cb 00 	lds	r17, 0x00CB	; 0x8000cb <USI_TWI_On_Slave_Receive+0x1>
     97a:	01 15       	cp	r16, r1
     97c:	11 05       	cpc	r17, r1
     97e:	09 f4       	brne	.+2      	; 0x982 <__vector_14+0x146>
     980:	7c cf       	rjmp	.-264    	; 0x87a <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:279
      tmpRxHead = TWI_RxHead;
     982:	c0 91 df 00 	lds	r28, 0x00DF	; 0x8000df <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:280
      if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     986:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <TWI_RxTail>
     98a:	8c 17       	cp	r24, r28
     98c:	09 f4       	brne	.+2      	; 0x990 <__vector_14+0x154>
     98e:	75 cf       	rjmp	.-278    	; 0x87a <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:282
        // check for stop Condition
        while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
     990:	8e b1       	in	r24, 0x0e	; 14
     992:	8e 7a       	andi	r24, 0xAE	; 174
     994:	e9 f3       	breq	.-6      	; 0x990 <__vector_14+0x154>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:285
          ;// wait for either Start or Stop Condition
          // cancel after one SCL cycle
        if (USISR & (1 << USIPF)) { // Stop Condition
     996:	75 9b       	sbis	0x0e, 5	; 14
     998:	70 cf       	rjmp	.-288    	; 0x87a <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:286
          USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     99a:	73 dc       	rcall	.-1818   	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	f8 01       	movw	r30, r16
     9a0:	09 95       	icall
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:288
          // reset rx buffer
          TWI_RxTail = tmpRxHead;
     9a2:	c0 93 e0 00 	sts	0x00E0, r28	; 0x8000e0 <TWI_RxTail>
     9a6:	69 cf       	rjmp	.-302    	; 0x87a <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     9a8:	b8 98       	cbi	0x17, 0	; 23
     9aa:	b2 cf       	rjmp	.-156    	; 0x910 <__vector_14+0xd4>

000009ac <__vector_13>:
__vector_13():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	cf 93       	push	r28
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:169
  unsigned char tmpPin; // Temporary variable for pin state
  unsigned char tmpRxHead; // Temporary variable to store volatile
  // call slave receive callback on repeated start
  if (USI_TWI_On_Slave_Receive) {
     9d4:	00 91 ca 00 	lds	r16, 0x00CA	; 0x8000ca <USI_TWI_On_Slave_Receive>
     9d8:	10 91 cb 00 	lds	r17, 0x00CB	; 0x8000cb <USI_TWI_On_Slave_Receive+0x1>
     9dc:	01 15       	cp	r16, r1
     9de:	11 05       	cpc	r17, r1
     9e0:	61 f0       	breq	.+24     	; 0x9fa <__vector_13+0x4e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:170
    tmpRxHead = TWI_RxHead;
     9e2:	c0 91 df 00 	lds	r28, 0x00DF	; 0x8000df <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:171
    if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     9e6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <TWI_RxTail>
     9ea:	8c 17       	cp	r24, r28
     9ec:	31 f0       	breq	.+12     	; 0x9fa <__vector_13+0x4e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:172
      USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     9ee:	49 dc       	rcall	.-1902   	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	f8 01       	movw	r30, r16
     9f4:	09 95       	icall
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:174
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
     9f6:	c0 93 e0 00 	sts	0x00E0, r28	; 0x8000e0 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     9fa:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     9fe:	b8 98       	cbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     a00:	b2 9b       	sbis	0x16, 2	; 22
     a02:	1a c0       	rjmp	.+52     	; 0xa38 <__vector_13+0x8c>
     a04:	b0 9b       	sbis	0x16, 0	; 22
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <__vector_13+0x54>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     a08:	88 ea       	ldi	r24, 0xA8	; 168
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     a0a:	8d b9       	out	0x0d, r24	; 13
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     a0c:	80 ef       	ldi	r24, 0xF0	; 240
     a0e:	8e b9       	out	0x0e, r24	; 14
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	cf 91       	pop	r28
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     a38:	88 ef       	ldi	r24, 0xF8	; 248
     a3a:	e7 cf       	rjmp	.-50     	; 0xa0a <__vector_13+0x5e>

00000a3c <__vector_3>:
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:44
  }
}


ISR(TIMER1_COMPA_vect) // timer interrupt
{
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
     a46:	2f 93       	push	r18
     a48:	3f 93       	push	r19
     a4a:	4f 93       	push	r20
     a4c:	5f 93       	push	r21
     a4e:	6f 93       	push	r22
     a50:	7f 93       	push	r23
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/z_main.ino:46
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {
     a5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a62:	81 11       	cpse	r24, r1
     a64:	49 c0       	rjmp	.+146    	; 0xaf8 <__vector_3+0xbc>
/media/D/Data/Powerwall/cellModule/z_main.ino:47
    if (ledFlash)  {
     a66:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <ledFlash>
     a6a:	81 11       	cpse	r24, r1
/media/D/Data/Powerwall/cellModule/z_main.ino:48
      ledON();
     a6c:	33 dd       	rcall	.-1434   	; 0x4d4 <ledON()>
/media/D/Data/Powerwall/cellModule/z_main.ino:50
    }
    ledFlash = false;
     a6e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <ledFlash>
/media/D/Data/Powerwall/cellModule/z_main.ino:63
      ledOFF();
    }
  }
  ///////////////////////////////////////////////////
  
  if (bypassEnabled) {
     a72:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <bypassEnabled>
     a76:	88 23       	and	r24, r24
     a78:	09 f4       	brne	.+2      	; 0xa7c <__vector_3+0x40>
     a7a:	55 c0       	rjmp	.+170    	; 0xb26 <__vector_3+0xea>
/media/D/Data/Powerwall/cellModule/z_main.ino:65
    //This must go above the following "if (bypassCnt > 0)" statement...
    if (bypassCnt == 0 && analogValIndex == 0) {
     a7c:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <bypassCnt>
     a80:	81 11       	cpse	r24, r1
     a82:	16 c0       	rjmp	.+44     	; 0xab0 <__vector_3+0x74>
     a84:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <analogValIndex>
     a88:	81 11       	cpse	r24, r1
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <__vector_3+0x74>
/media/D/Data/Powerwall/cellModule/z_main.ino:67
      //We are in bypass and just finished an in-cycle voltage measurement
      voltageMeasurement_bypass = getVoltageMeasurement();
     a8c:	58 dc       	rcall	.-1872   	; 0x33e <getVoltageMeasurement()>
     a8e:	bd d1       	rcall	.+890    	; 0xe0a <__fixunssfsi>
     a90:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <voltageMeasurement_bypass+0x1>
     a94:	60 93 c5 00 	sts	0x00C5, r22	; 0x8000c5 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/z_main.ino:69

      if (targetBypassVoltage >= voltageMeasurement_bypass) {
     a98:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <targetBypassVoltage>
     a9c:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <targetBypassVoltage+0x1>
     aa0:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <voltageMeasurement_bypass>
     aa4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <voltageMeasurement_bypass+0x1>
     aa8:	28 17       	cp	r18, r24
     aaa:	39 07       	cpc	r19, r25
     aac:	c0 f1       	brcs	.+112    	; 0xb1e <__vector_3+0xe2>
/media/D/Data/Powerwall/cellModule/z_main.ino:71
        //We reached the goal
        bypass_off();
     aae:	75 dc       	rcall	.-1814   	; 0x39a <bypass_off()>
/media/D/Data/Powerwall/cellModule/z_main.ino:78
        //Try again
        bypassCnt = BYPASS_COUNTER_MAX;
      }
    }

    if (bypassCnt > 0)
     ab0:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <bypassCnt>
     ab4:	88 23       	and	r24, r24
     ab6:	71 f0       	breq	.+28     	; 0xad4 <__vector_3+0x98>
/media/D/Data/Powerwall/cellModule/z_main.ino:81
    {
      //We are in ACTIVE BYPASS mode -> BURNING ENERGY in resistor
      bypassCnt--;
     ab8:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <bypassCnt>
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <bypassCnt>
/media/D/Data/Powerwall/cellModule/z_main.ino:82
      digitalWrite(PB4, HIGH);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	54 db       	rcall	.-2392   	; 0x16e <digitalWrite.constprop.2>
/media/D/Data/Powerwall/cellModule/z_main.ino:84

      if (bypassCnt == 0)
     ac6:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <bypassCnt>
     aca:	81 11       	cpse	r24, r1
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <__vector_3+0x98>
/media/D/Data/Powerwall/cellModule/z_main.ino:88
      {
        //We have just finished this timed ACTIVE BYPASS mode, disable resistor
        //and measure resting voltage now before possible re-enable.
        digitalWrite(PB4, LOW);
     ace:	4f db       	rcall	.-2402   	; 0x16e <digitalWrite.constprop.2>
/media/D/Data/Powerwall/cellModule/z_main.ino:91

        //Reset voltage ADC buffer
        analogValIndex = 0;
     ad0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <analogValIndex>
/media/D/Data/Powerwall/cellModule/z_main.ino:101
    //Safety check we ensure bypass is always off if not enabled
    digitalWrite(PB4, LOW);
  }

  //trigger ADC reading
  ADCSRA |= (1 << ADSC);
     ad4:	36 9a       	sbi	0x06, 6	; 6
/media/D/Data/Powerwall/cellModule/z_main.ino:102
}
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	7f 91       	pop	r23
     ae4:	6f 91       	pop	r22
     ae6:	5f 91       	pop	r21
     ae8:	4f 91       	pop	r20
     aea:	3f 91       	pop	r19
     aec:	2f 91       	pop	r18
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti
/media/D/Data/Powerwall/cellModule/z_main.ino:53
      ledON();
    }
    ledFlash = false;
  } else {
    ///Rotate pattern
    green_pattern = (byte)(green_pattern << 1) | (green_pattern >> 7);
     af8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     afc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b00:	99 0f       	add	r25, r25
     b02:	88 1f       	adc	r24, r24
     b04:	88 27       	eor	r24, r24
     b06:	88 1f       	adc	r24, r24
     b08:	89 2b       	or	r24, r25
     b0a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:55

    if (green_pattern & 0x01) {
     b0e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b12:	80 ff       	sbrs	r24, 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__vector_3+0xde>
/media/D/Data/Powerwall/cellModule/z_main.ino:56
      ledON();
     b16:	de dc       	rcall	.-1604   	; 0x4d4 <ledON()>
     b18:	ac cf       	rjmp	.-168    	; 0xa72 <__vector_3+0x36>
/media/D/Data/Powerwall/cellModule/z_main.ino:58
    } else {
      ledOFF();
     b1a:	d9 dc       	rcall	.-1614   	; 0x4ce <ledOFF()>
     b1c:	aa cf       	rjmp	.-172    	; 0xa72 <__vector_3+0x36>
/media/D/Data/Powerwall/cellModule/z_main.ino:74
      if (targetBypassVoltage >= voltageMeasurement_bypass) {
        //We reached the goal
        bypass_off();
      } else {
        //Try again
        bypassCnt = BYPASS_COUNTER_MAX;
     b1e:	80 ef       	ldi	r24, 0xF0	; 240
     b20:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <bypassCnt>
     b24:	c5 cf       	rjmp	.-118    	; 0xab0 <__vector_3+0x74>
/media/D/Data/Powerwall/cellModule/z_main.ino:97
      }
    }

  } else {
    //Safety check we ensure bypass is always off if not enabled
    digitalWrite(PB4, LOW);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	22 db       	rcall	.-2492   	; 0x16e <digitalWrite.constprop.2>
     b2a:	d4 cf       	rjmp	.-88     	; 0xad4 <__vector_3+0x98>

00000b2c <__vector_8>:
__vector_8():
/media/D/Data/Powerwall/cellModule/d_adc.ino:1
ISR(ADC_vect) {
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	2f 93       	push	r18
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/d_adc.ino:6
  // Interrupt service routine for the ADC completion
  //uint8_t adcl = ADCL;
  //uint16_t value = ADCH << 8 | adcl;

  uint16_t value = ADCW;
     b40:	84 b1       	in	r24, 0x04	; 4
     b42:	95 b1       	in	r25, 0x05	; 5
/media/D/Data/Powerwall/cellModule/d_adc.ino:9

  //If we skip this ADC reading, quit ISR here
  if (skipNextADC) {
     b44:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <skipNextADC>
     b48:	22 23       	and	r18, r18
     b4a:	61 f0       	breq	.+24     	; 0xb64 <__vector_8+0x38>
/media/D/Data/Powerwall/cellModule/d_adc.ino:10
    skipNextADC = false;
     b4c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <skipNextADC>
/media/D/Data/Powerwall/cellModule/d_adc.ino:56
      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
    }
  }

}
     b50:	ff 91       	pop	r31
     b52:	ef 91       	pop	r30
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti
/media/D/Data/Powerwall/cellModule/d_adc.ino:14
  if (skipNextADC) {
    skipNextADC = false;
    return;
  }

  if (tempReadingCnt == TEMP_READING_LOOP_FREQ ) {
     b64:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <tempReadingCnt>
     b68:	20 31       	cpi	r18, 0x10	; 16
     b6a:	61 f4       	brne	.+24     	; 0xb84 <__vector_8+0x58>
/media/D/Data/Powerwall/cellModule/d_adc.ino:19
    //Use A0 (RESET PIN) to act as an analogue input
    //note that we cannot take the pin below 1.4V or the CPU resets
    //so we use the top half between 1.6V and 2.56V (voltage reference)
    //we avoid switching references (VCC vs 2.56V) so the capacitors dont have to keep draining and recharging
    tempReadingCnt = 0;
     b6c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:22

    //We reduce the value by 512 as we have a DC offset we need to remove
    tempSensorValue = value;
     b70:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <tempSensorValue+0x1>
     b74:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <tempSensorValue>
/media/D/Data/Powerwall/cellModule/d_adc.ino:25

    // use ADC3 for input for next reading (voltage)
    ADMUX = B10010011;
     b78:	83 e9       	ldi	r24, 0x93	; 147
/media/D/Data/Powerwall/cellModule/d_adc.ino:49

    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     b7a:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/d_adc.ino:52

      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <skipNextADC>
     b82:	e6 cf       	rjmp	.-52     	; 0xb50 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:33
    skipNextADC = true;

  } else {

    //Populate the rolling buffer with values from the ADC
    last_raw_adc = value;
     b84:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <last_raw_adc+0x1>
     b88:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <last_raw_adc>
/media/D/Data/Powerwall/cellModule/d_adc.ino:34
    analogVal[analogValIndex] = value;
     b8c:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <analogValIndex>
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	e3 56       	subi	r30, 0x63	; 99
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
/media/D/Data/Powerwall/cellModule/d_adc.ino:36

    analogValIndex++;
     b9e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <analogValIndex>
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <analogValIndex>
/media/D/Data/Powerwall/cellModule/d_adc.ino:38

    if (analogValIndex == OVERSAMPLE_LOOP) {
     ba8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <analogValIndex>
     bac:	80 31       	cpi	r24, 0x10	; 16
     bae:	29 f4       	brne	.+10     	; 0xbba <__vector_8+0x8e>
/media/D/Data/Powerwall/cellModule/d_adc.ino:39
      analogValIndex = 0;
     bb0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <analogValIndex>
/media/D/Data/Powerwall/cellModule/d_adc.ino:40
      buffer_ready = 1;// indicates first time ever valid data
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <buffer_ready>
/media/D/Data/Powerwall/cellModule/d_adc.ino:43
    }

    tempReadingCnt++;
     bba:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tempReadingCnt>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:45

    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
     bc4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tempReadingCnt>
     bc8:	80 31       	cpi	r24, 0x10	; 16
     bca:	11 f6       	brne	.-124    	; 0xb50 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:49
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     bcc:	80 e9       	ldi	r24, 0x90	; 144
     bce:	d5 cf       	rjmp	.-86     	; 0xb7a <__vector_8+0x4e>

00000bd0 <Reboot()>:
_Z6Rebootv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:62
void factory_default() {
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, 0);
}

void Reboot() {
  TCCR1 = 0;
     bd0:	10 be       	out	0x30, r1	; 48
/media/D/Data/Powerwall/cellModule/b_functions.ino:63
  TIMSK |= (1 << OCIE1A); //Disable timer1
     bd2:	89 b7       	in	r24, 0x39	; 57
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	89 bf       	out	0x39, r24	; 57
/media/D/Data/Powerwall/cellModule/b_functions.ino:66

  //Now power down loop until the watchdog timer kicks a reset
  ledON();
     bd8:	7d dc       	rcall	.-1798   	; 0x4d4 <ledON()>
     bda:	ff cf       	rjmp	.-2      	; 0xbda <Reboot()+0xa>

00000bdc <main>:
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	2d 97       	sbiw	r28, 0x0d	; 13
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	8a bd       	out	0x2a, r24	; 42
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     bf4:	83 bf       	out	0x33, r24	; 51
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     bf6:	78 94       	sei
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:933

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     bf8:	89 b7       	in	r24, 0x39	; 57
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:594
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     bfe:	80 e4       	ldi	r24, 0x40	; 64
     c00:	8c bd       	out	0x2c, r24	; 44
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:595
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	8d bd       	out	0x2d, r24	; 45
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:596
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     c06:	87 ec       	ldi	r24, 0xC7	; 199
     c08:	80 bf       	out	0x30, r24	; 48
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     c0a:	86 b1       	in	r24, 0x06	; 6
     c0c:	88 77       	andi	r24, 0x78	; 120
     c0e:	86 68       	ori	r24, 0x86	; 134
     c10:	86 b9       	out	0x06, r24	; 6
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     c12:	37 9a       	sbi	0x06, 7	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:18

void setup() {
  //Must be first line of setup()
  MCUSR &= ~(1 << WDRF); // reset status flag
     c14:	84 b7       	in	r24, 0x34	; 52
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	84 bf       	out	0x34, r24	; 52
wdt_disable():
/home/zz/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	a8 95       	wdr
     c20:	81 b5       	in	r24, 0x21	; 33
     c22:	88 61       	ori	r24, 0x18	; 24
     c24:	81 bd       	out	0x21, r24	; 33
     c26:	11 bc       	out	0x21, r1	; 33
     c28:	0f be       	out	0x3f, r0	; 63
pinMode():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:35
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     c2a:	e4 e3       	ldi	r30, 0x34	; 52
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     c30:	ee e2       	ldi	r30, 0x2E	; 46
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	84 91       	lpm	r24, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     c36:	88 23       	and	r24, r24
     c38:	99 f0       	breq	.+38     	; 0xc60 <main+0x84>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	fc 01       	movw	r30, r24
     c42:	e2 5e       	subi	r30, 0xE2	; 226
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	a5 91       	lpm	r26, Z+
     c48:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     c4a:	fc 01       	movw	r30, r24
     c4c:	ec 5d       	subi	r30, 0xDC	; 220
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	85 91       	lpm	r24, Z+
     c52:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     c54:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:58
                cli();
     c56:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:59
    *reg |= bit;
     c58:	ec 91       	ld	r30, X
     c5a:	e2 2b       	or	r30, r18
     c5c:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
     c5e:	8f bf       	out	0x3f, r24	; 63
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:35
    DDRB &= ~(1 << DDB5);
    PORTB &= ~(1 << PB5);
  */

  pinMode(PB4, OUTPUT); //PB4 = PIN 3
  digitalWrite(PB4, LOW);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	85 da       	rcall	.-2806   	; 0x16e <digitalWrite.constprop.2>
/media/D/Data/Powerwall/cellModule/e_setup.ino:37

  ledON();
     c64:	37 dc       	rcall	.-1938   	; 0x4d4 <ledON()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:38
  delay(500);
     c66:	64 ef       	ldi	r22, 0xF4	; 244
     c68:	71 e0       	ldi	r23, 0x01	; 1
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	df da       	rcall	.-2626   	; 0x22e <delay>
/media/D/Data/Powerwall/cellModule/e_setup.ino:39
  ledOFF();
     c70:	2e dc       	rcall	.-1956   	; 0x4ce <ledOFF()>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:37
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
}

bool LoadConfigFromEEPROM() {
  cell_module_config restoredConfig;
     c72:	89 e0       	ldi	r24, 0x09	; 9
     c74:	eb e6       	ldi	r30, 0x6B	; 107
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	de 01       	movw	r26, r28
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	01 90       	ld	r0, Z+
     c7e:	0d 92       	st	X+, r0
     c80:	8a 95       	dec	r24
     c82:	e1 f7       	brne	.-8      	; 0xc7c <main+0xa0>
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	7c 01       	movw	r14, r24
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     c8a:	04 e1       	ldi	r16, 0x14	; 20
     c8c:	10 e0       	ldi	r17, 0x00	; 0
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c8e:	c8 01       	movw	r24, r16
     c90:	a2 d0       	rcall	.+324    	; 0xdd6 <eeprom_read_byte>
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c92:	f7 01       	movw	r30, r14
     c94:	81 93       	st	Z+, r24
     c96:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     c98:	0f 5f       	subi	r16, 0xFF	; 255
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c9c:	0d 31       	cpi	r16, 0x1D	; 29
     c9e:	11 05       	cpc	r17, r1
     ca0:	b1 f7       	brne	.-20     	; 0xc8e <main+0xb2>
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	97 d0       	rcall	.+302    	; 0xdd6 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     ca8:	8a 87       	std	Y+10, r24	; 0x0a
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	93 d0       	rcall	.+294    	; 0xdd6 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cb0:	8b 87       	std	Y+11, r24	; 0x0b
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	8f d0       	rcall	.+286    	; 0xdd6 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cb8:	8c 87       	std	Y+12, r24	; 0x0c
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	8b d0       	rcall	.+278    	; 0xdd6 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cc0:	8d 87       	std	Y+13, r24	; 0x0d
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:44

  EEPROM.get(EEPROM_CONFIG_ADDRESS, restoredConfig);
  EEPROM.get(EEPROM_CHECKSUM_ADDRESS, existingChecksum);

  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	d6 d9       	rcall	.-3156   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:46

  if (checksum == existingChecksum) {
     cc8:	0a 85       	ldd	r16, Y+10	; 0x0a
     cca:	1b 85       	ldd	r17, Y+11	; 0x0b
     ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cce:	3d 85       	ldd	r19, Y+13	; 0x0d
     cd0:	60 17       	cp	r22, r16
     cd2:	71 07       	cpc	r23, r17
     cd4:	82 07       	cpc	r24, r18
     cd6:	93 07       	cpc	r25, r19
     cd8:	41 f1       	breq	.+80     	; 0xd2a <main+0x14e>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:43

  //Load our EEPROM configuration
  if (!LoadConfigFromEEPROM()) {
    badConfiguration = true;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <badConfiguration>
/media/D/Data/Powerwall/cellModule/e_setup.ino:46
  }

  cli();//stop interrupts
     ce0:	f8 94       	cli
/media/D/Data/Powerwall/cellModule/e_setup.ino:48

  analogValIndex = 0;
     ce2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <analogValIndex>
initTimer1():
/media/D/Data/Powerwall/cellModule/e_setup.ino:5
void initADC();

static inline void initTimer1(void)
{
  TCCR1 |= (1 << CTC1);  // clear timer on compare match
     ce6:	80 b7       	in	r24, 0x30	; 48
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:6
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
     cec:	80 b7       	in	r24, 0x30	; 48
     cee:	8f 60       	ori	r24, 0x0F	; 15
     cf0:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:7
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
     cf2:	80 e4       	ldi	r24, 0x40	; 64
     cf4:	8d bd       	out	0x2d, r24	; 45
/media/D/Data/Powerwall/cellModule/e_setup.ino:8
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
     cf6:	89 b7       	in	r24, 0x39	; 57
     cf8:	80 64       	ori	r24, 0x40	; 64
     cfa:	89 bf       	out	0x39, r24	; 57
initADC():
/media/D/Data/Powerwall/cellModule/e_setup.ino:103

  //REFS1 REFS0 ADLAR REFS2 MUX3 MUX2 MUX1 MUX0
  //Internal 2.56V Voltage Reference without external bypass capacitor, disconnected from PB0 (AREF)
  //ADLAR =0 and PB3 (B0011) for INPUT (A3)
  //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
  ADMUX = B10010011;
     cfc:	83 e9       	ldi	r24, 0x93	; 147
     cfe:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/e_setup.ino:126
      (1 << ADPS0);      // set prescaler bit 0
    #endif
  */
  //#if (F_CPU == 8000000)
  //8MHZ clock so set prescaler to 64 (B110)
  ADCSRA =
     d00:	8e e8       	ldi	r24, 0x8E	; 142
     d02:	86 b9       	out	0x06, r24	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:55
  initTimer1();
  initADC();

  // WDTCSR configuration:     WDIE = 1: Interrupt Enable     WDE = 1 :Reset Enable
  // Enter Watchdog Configuration mode:
  WDTCR |= (1 << WDCE) | (1 << WDE);
     d04:	81 b5       	in	r24, 0x21	; 33
     d06:	88 61       	ori	r24, 0x18	; 24
     d08:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:58

  // Set Watchdog settings - 4000ms timeout
  WDTCR = (1 << WDIE) | (1 << WDE) | (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (0 << WDP0);
     d0a:	88 e6       	ldi	r24, 0x68	; 104
     d0c:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:61

  // Enable Global Interrupts
  sei();
     d0e:	78 94       	sei
/media/D/Data/Powerwall/cellModule/e_setup.ino:63

  green_pattern = GREEN_LED_PATTERN_STANDARD;
     d10:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
wait_for_buffer_ready():
/media/D/Data/Powerwall/cellModule/b_functions.ino:80
  while (1) {}
}

void wait_for_buffer_ready() {
  //Just delay here so the buffers are all ready before we service i2c
  while (!buffer_ready) {
     d14:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <buffer_ready>
     d18:	81 11       	cpse	r24, r1
     d1a:	11 c0       	rjmp	.+34     	; 0xd3e <main+0x162>
/media/D/Data/Powerwall/cellModule/b_functions.ino:81
    delay(100);
     d1c:	64 e6       	ldi	r22, 0x64	; 100
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	84 da       	rcall	.-2808   	; 0x22e <delay>
/media/D/Data/Powerwall/cellModule/b_functions.ino:82
    wdt_reset();
     d26:	a8 95       	wdr
     d28:	f5 cf       	rjmp	.-22     	; 0xd14 <main+0x138>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:48
  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));

  if (checksum == existingChecksum) {
    //Clone the config into our global variable and return all OK
    memcpy(&currentConfig, &restoredConfig, sizeof(cell_module_config));
     d2a:	89 e0       	ldi	r24, 0x09	; 9
     d2c:	fe 01       	movw	r30, r28
     d2e:	31 96       	adiw	r30, 0x01	; 1
     d30:	a1 e6       	ldi	r26, 0x61	; 97
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	01 90       	ld	r0, Z+
     d36:	0d 92       	st	X+, r0
     d38:	8a 95       	dec	r24
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <main+0x158>
     d3c:	d1 cf       	rjmp	.-94     	; 0xce0 <main+0x104>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:66
  wait_for_buffer_ready();

  init_i2c();
     d3e:	d2 da       	rcall	.-2652   	; 0x2e4 <init_i2c()>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:12
    last_i2c_request--;
  }

  //If we are on the default SLAVE address signalize it
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
     d40:	1f ee       	ldi	r17, 0xEF	; 239
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:27
}

void HandlePanicMode(){
  if (last_i2c_request == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
      
    green_pattern = GREEN_LED_PANIC;
     d42:	05 e5       	ldi	r16, 0x55	; 85
/media/D/Data/Powerwall/cellModule/z_main.ino:28
    inPanicMode = true;
     d44:	ff 24       	eor	r15, r15
     d46:	f3 94       	inc	r15
USI_TWI_Slave_Disable():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:92
void USI_TWI_Slave_Disable()
{
  DDR_USI_CL &= ~(1 << PORT_USI_SCL);  // Set SCL as input
  DDR_USI &= ~(1 << PORT_USI_SDA);  // Set SDA as input
  USICR = 0x00; // Disable USI
  USISR = 0xF0; // Clear all flags and reset overflow counter
     d48:	80 ef       	ldi	r24, 0xF0	; 240
     d4a:	e8 2e       	mov	r14, r24
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:3

void loop() {
  wdt_reset();
     d4c:	a8 95       	wdr
/media/D/Data/Powerwall/cellModule/z_main.ino:5

  if (last_i2c_request > 0) {
     d4e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <last_i2c_request>
     d52:	88 23       	and	r24, r24
     d54:	29 f0       	breq	.+10     	; 0xd60 <main+0x184>
/media/D/Data/Powerwall/cellModule/z_main.ino:7
    //Count down loop for requests to see if i2c bus hangs or controller stops talking
    last_i2c_request--;
     d56:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <last_i2c_request>
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <last_i2c_request>
/media/D/Data/Powerwall/cellModule/z_main.ino:11
  }

  //If we are on the default SLAVE address signalize it
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
     d60:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <badConfiguration>
     d64:	81 11       	cpse	r24, r1
     d66:	34 c0       	rjmp	.+104    	; 0xdd0 <main+0x1f4>
     d68:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentConfig>
     d6c:	85 31       	cpi	r24, 0x15	; 21
     d6e:	81 f1       	breq	.+96     	; 0xdd0 <main+0x1f4>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:25
  //Don't make this very large or watchdog will reset
  delay(250);
}

void HandlePanicMode(){
  if (last_i2c_request == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
     d70:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <last_i2c_request>
     d74:	81 11       	cpse	r24, r1
     d76:	16 c0       	rjmp	.+44     	; 0xda4 <main+0x1c8>
     d78:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <inPanicMode>
     d7c:	81 11       	cpse	r24, r1
     d7e:	12 c0       	rjmp	.+36     	; 0xda4 <main+0x1c8>
/media/D/Data/Powerwall/cellModule/z_main.ino:27
      
    green_pattern = GREEN_LED_PANIC;
     d80:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:28
    inPanicMode = true;
     d84:	f0 92 dd 00 	sts	0x00DD, r15	; 0x8000dd <inPanicMode>
USI_TWI_Slave_Disable():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:89
}

// Disable USI for TWI Slave mode.
void USI_TWI_Slave_Disable()
{
  DDR_USI_CL &= ~(1 << PORT_USI_SCL);  // Set SCL as input
     d88:	ba 98       	cbi	0x17, 2	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:90
  DDR_USI &= ~(1 << PORT_USI_SDA);  // Set SDA as input
     d8a:	b8 98       	cbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:91
  USICR = 0x00; // Disable USI
     d8c:	1d b8       	out	0x0d, r1	; 13
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:92
  USISR = 0xF0; // Clear all flags and reset overflow counter
     d8e:	ee b8       	out	0x0e, r14	; 14
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:31
    //Try resetting the i2c bus
    Wire.end();
    init_i2c();
     d90:	a9 da       	rcall	.-2734   	; 0x2e4 <init_i2c()>
/media/D/Data/Powerwall/cellModule/z_main.ino:33

    error_counter++;
     d92:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <error_counter>
     d96:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <error_counter+0x1>
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <error_counter+0x1>
     da0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <error_counter>
/media/D/Data/Powerwall/cellModule/z_main.ino:36
  }

  if (last_i2c_request > 0 && inPanicMode == true) {//return from panic mode
     da4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <last_i2c_request>
     da8:	88 23       	and	r24, r24
     daa:	41 f0       	breq	.+16     	; 0xdbc <main+0x1e0>
     dac:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <inPanicMode>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	21 f4       	brne	.+8      	; 0xdbc <main+0x1e0>
/media/D/Data/Powerwall/cellModule/z_main.ino:37
    green_pattern = GREEN_LED_PATTERN_STANDARD;
     db4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:38
    inPanicMode = false;
     db8:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <inPanicMode>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:17
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
  } else {
    HandlePanicMode();//reset i2c bus if no communication goin on for some time
  }

  if(inPanicMode)
     dbc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <inPanicMode>
     dc0:	81 11       	cpse	r24, r1
/media/D/Data/Powerwall/cellModule/z_main.ino:18
    bypass_off();
     dc2:	eb da       	rcall	.-2602   	; 0x39a <bypass_off()>
/media/D/Data/Powerwall/cellModule/z_main.ino:21

  //Don't make this very large or watchdog will reset
  delay(250);
     dc4:	6a ef       	ldi	r22, 0xFA	; 250
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	30 da       	rcall	.-2976   	; 0x22e <delay>
     dce:	be cf       	rjmp	.-132    	; 0xd4c <main+0x170>
/media/D/Data/Powerwall/cellModule/z_main.ino:12
    last_i2c_request--;
  }

  //If we are on the default SLAVE address signalize it
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
     dd0:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
     dd4:	f3 cf       	rjmp	.-26     	; 0xdbc <main+0x1e0>

00000dd6 <eeprom_read_byte>:
eeprom_read_byte():
     dd6:	e1 99       	sbic	0x1c, 1	; 28
     dd8:	fe cf       	rjmp	.-4      	; 0xdd6 <eeprom_read_byte>
     dda:	9f bb       	out	0x1f, r25	; 31
     ddc:	8e bb       	out	0x1e, r24	; 30
     dde:	e0 9a       	sbi	0x1c, 0	; 28
     de0:	99 27       	eor	r25, r25
     de2:	8d b3       	in	r24, 0x1d	; 29
     de4:	08 95       	ret

00000de6 <eeprom_write_byte>:
eeprom_write_byte():
     de6:	26 2f       	mov	r18, r22

00000de8 <eeprom_write_r18>:
     de8:	e1 99       	sbic	0x1c, 1	; 28
     dea:	fe cf       	rjmp	.-4      	; 0xde8 <eeprom_write_r18>
     dec:	1c ba       	out	0x1c, r1	; 28
     dee:	9f bb       	out	0x1f, r25	; 31
     df0:	8e bb       	out	0x1e, r24	; 30
     df2:	2d bb       	out	0x1d, r18	; 29
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	e2 9a       	sbi	0x1c, 2	; 28
     dfa:	e1 9a       	sbi	0x1c, 1	; 28
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	08 95       	ret

00000e02 <__cmpsf2>:
__cmpsf2():
     e02:	6c d0       	rcall	.+216    	; 0xedc <__fp_cmp>
     e04:	08 f4       	brcc	.+2      	; 0xe08 <__cmpsf2+0x6>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	08 95       	ret

00000e0a <__fixunssfsi>:
__fixunssfsi():
     e0a:	94 d0       	rcall	.+296    	; 0xf34 <__fp_splitA>
     e0c:	88 f0       	brcs	.+34     	; 0xe30 <__fixunssfsi+0x26>
     e0e:	9f 57       	subi	r25, 0x7F	; 127
     e10:	90 f0       	brcs	.+36     	; 0xe36 <__fixunssfsi+0x2c>
     e12:	b9 2f       	mov	r27, r25
     e14:	99 27       	eor	r25, r25
     e16:	b7 51       	subi	r27, 0x17	; 23
     e18:	a0 f0       	brcs	.+40     	; 0xe42 <__fixunssfsi+0x38>
     e1a:	d1 f0       	breq	.+52     	; 0xe50 <__fixunssfsi+0x46>
     e1c:	66 0f       	add	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	1a f0       	brmi	.+6      	; 0xe2c <__fixunssfsi+0x22>
     e26:	ba 95       	dec	r27
     e28:	c9 f7       	brne	.-14     	; 0xe1c <__fixunssfsi+0x12>
     e2a:	12 c0       	rjmp	.+36     	; 0xe50 <__fixunssfsi+0x46>
     e2c:	b1 30       	cpi	r27, 0x01	; 1
     e2e:	81 f0       	breq	.+32     	; 0xe50 <__fixunssfsi+0x46>
     e30:	9b d0       	rcall	.+310    	; 0xf68 <__fp_zero>
     e32:	b1 e0       	ldi	r27, 0x01	; 1
     e34:	08 95       	ret
     e36:	98 c0       	rjmp	.+304    	; 0xf68 <__fp_zero>
     e38:	67 2f       	mov	r22, r23
     e3a:	78 2f       	mov	r23, r24
     e3c:	88 27       	eor	r24, r24
     e3e:	b8 5f       	subi	r27, 0xF8	; 248
     e40:	39 f0       	breq	.+14     	; 0xe50 <__fixunssfsi+0x46>
     e42:	b9 3f       	cpi	r27, 0xF9	; 249
     e44:	cc f3       	brlt	.-14     	; 0xe38 <__fixunssfsi+0x2e>
     e46:	86 95       	lsr	r24
     e48:	77 95       	ror	r23
     e4a:	67 95       	ror	r22
     e4c:	b3 95       	inc	r27
     e4e:	d9 f7       	brne	.-10     	; 0xe46 <__fixunssfsi+0x3c>
     e50:	3e f4       	brtc	.+14     	; 0xe60 <__fixunssfsi+0x56>
     e52:	90 95       	com	r25
     e54:	80 95       	com	r24
     e56:	70 95       	com	r23
     e58:	61 95       	neg	r22
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	08 95       	ret

00000e62 <__floatunsisf>:
__floatunsisf():
     e62:	e8 94       	clt
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <__floatsisf+0x12>

00000e66 <__floatsisf>:
     e66:	97 fb       	bst	r25, 7
     e68:	3e f4       	brtc	.+14     	; 0xe78 <__floatsisf+0x12>
     e6a:	90 95       	com	r25
     e6c:	80 95       	com	r24
     e6e:	70 95       	com	r23
     e70:	61 95       	neg	r22
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	99 23       	and	r25, r25
     e7a:	a9 f0       	breq	.+42     	; 0xea6 <__floatsisf+0x40>
     e7c:	f9 2f       	mov	r31, r25
     e7e:	96 e9       	ldi	r25, 0x96	; 150
     e80:	bb 27       	eor	r27, r27
     e82:	93 95       	inc	r25
     e84:	f6 95       	lsr	r31
     e86:	87 95       	ror	r24
     e88:	77 95       	ror	r23
     e8a:	67 95       	ror	r22
     e8c:	b7 95       	ror	r27
     e8e:	f1 11       	cpse	r31, r1
     e90:	f8 cf       	rjmp	.-16     	; 0xe82 <__floatsisf+0x1c>
     e92:	fa f4       	brpl	.+62     	; 0xed2 <__floatsisf+0x6c>
     e94:	bb 0f       	add	r27, r27
     e96:	11 f4       	brne	.+4      	; 0xe9c <__floatsisf+0x36>
     e98:	60 ff       	sbrs	r22, 0
     e9a:	1b c0       	rjmp	.+54     	; 0xed2 <__floatsisf+0x6c>
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	16 c0       	rjmp	.+44     	; 0xed2 <__floatsisf+0x6c>
     ea6:	88 23       	and	r24, r24
     ea8:	11 f0       	breq	.+4      	; 0xeae <__floatsisf+0x48>
     eaa:	96 e9       	ldi	r25, 0x96	; 150
     eac:	11 c0       	rjmp	.+34     	; 0xed0 <__floatsisf+0x6a>
     eae:	77 23       	and	r23, r23
     eb0:	21 f0       	breq	.+8      	; 0xeba <__floatsisf+0x54>
     eb2:	9e e8       	ldi	r25, 0x8E	; 142
     eb4:	87 2f       	mov	r24, r23
     eb6:	76 2f       	mov	r23, r22
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <__floatsisf+0x5e>
     eba:	66 23       	and	r22, r22
     ebc:	71 f0       	breq	.+28     	; 0xeda <__floatsisf+0x74>
     ebe:	96 e8       	ldi	r25, 0x86	; 134
     ec0:	86 2f       	mov	r24, r22
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	2a f0       	brmi	.+10     	; 0xed2 <__floatsisf+0x6c>
     ec8:	9a 95       	dec	r25
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	da f7       	brpl	.-10     	; 0xec8 <__floatsisf+0x62>
     ed2:	88 0f       	add	r24, r24
     ed4:	96 95       	lsr	r25
     ed6:	87 95       	ror	r24
     ed8:	97 f9       	bld	r25, 7
     eda:	08 95       	ret

00000edc <__fp_cmp>:
__fp_cmp():
     edc:	99 0f       	add	r25, r25
     ede:	00 08       	sbc	r0, r0
     ee0:	55 0f       	add	r21, r21
     ee2:	aa 0b       	sbc	r26, r26
     ee4:	e0 e8       	ldi	r30, 0x80	; 128
     ee6:	fe ef       	ldi	r31, 0xFE	; 254
     ee8:	16 16       	cp	r1, r22
     eea:	17 06       	cpc	r1, r23
     eec:	e8 07       	cpc	r30, r24
     eee:	f9 07       	cpc	r31, r25
     ef0:	c0 f0       	brcs	.+48     	; 0xf22 <__fp_cmp+0x46>
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	e4 07       	cpc	r30, r20
     ef8:	f5 07       	cpc	r31, r21
     efa:	98 f0       	brcs	.+38     	; 0xf22 <__fp_cmp+0x46>
     efc:	62 1b       	sub	r22, r18
     efe:	73 0b       	sbc	r23, r19
     f00:	84 0b       	sbc	r24, r20
     f02:	95 0b       	sbc	r25, r21
     f04:	39 f4       	brne	.+14     	; 0xf14 <__fp_cmp+0x38>
     f06:	0a 26       	eor	r0, r26
     f08:	61 f0       	breq	.+24     	; 0xf22 <__fp_cmp+0x46>
     f0a:	23 2b       	or	r18, r19
     f0c:	24 2b       	or	r18, r20
     f0e:	25 2b       	or	r18, r21
     f10:	21 f4       	brne	.+8      	; 0xf1a <__fp_cmp+0x3e>
     f12:	08 95       	ret
     f14:	0a 26       	eor	r0, r26
     f16:	09 f4       	brne	.+2      	; 0xf1a <__fp_cmp+0x3e>
     f18:	a1 40       	sbci	r26, 0x01	; 1
     f1a:	a6 95       	lsr	r26
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	81 1d       	adc	r24, r1
     f20:	81 1d       	adc	r24, r1
     f22:	08 95       	ret

00000f24 <__fp_split3>:
__fp_split3():
     f24:	57 fd       	sbrc	r21, 7
     f26:	90 58       	subi	r25, 0x80	; 128
     f28:	44 0f       	add	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	59 f0       	breq	.+22     	; 0xf44 <__fp_splitA+0x10>
     f2e:	5f 3f       	cpi	r21, 0xFF	; 255
     f30:	71 f0       	breq	.+28     	; 0xf4e <__fp_splitA+0x1a>
     f32:	47 95       	ror	r20

00000f34 <__fp_splitA>:
     f34:	88 0f       	add	r24, r24
     f36:	97 fb       	bst	r25, 7
     f38:	99 1f       	adc	r25, r25
     f3a:	61 f0       	breq	.+24     	; 0xf54 <__fp_splitA+0x20>
     f3c:	9f 3f       	cpi	r25, 0xFF	; 255
     f3e:	79 f0       	breq	.+30     	; 0xf5e <__fp_splitA+0x2a>
     f40:	87 95       	ror	r24
     f42:	08 95       	ret
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	f2 cf       	rjmp	.-28     	; 0xf32 <__fp_split3+0xe>
     f4e:	46 95       	lsr	r20
     f50:	f1 df       	rcall	.-30     	; 0xf34 <__fp_splitA>
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <__fp_splitA+0x30>
     f54:	16 16       	cp	r1, r22
     f56:	17 06       	cpc	r1, r23
     f58:	18 06       	cpc	r1, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	f1 cf       	rjmp	.-30     	; 0xf40 <__fp_splitA+0xc>
     f5e:	86 95       	lsr	r24
     f60:	71 05       	cpc	r23, r1
     f62:	61 05       	cpc	r22, r1
     f64:	08 94       	sec
     f66:	08 95       	ret

00000f68 <__fp_zero>:
__fp_zero():
     f68:	e8 94       	clt

00000f6a <__fp_szero>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	66 27       	eor	r22, r22
     f6e:	77 27       	eor	r23, r23
     f70:	cb 01       	movw	r24, r22
     f72:	97 f9       	bld	r25, 7
     f74:	08 95       	ret

00000f76 <__mulsf3>:
__mulsf3():
     f76:	0a d0       	rcall	.+20     	; 0xf8c <__mulsf3x>
     f78:	80 c0       	rjmp	.+256    	; 0x107a <__fp_round>
     f7a:	71 d0       	rcall	.+226    	; 0x105e <__fp_pscA>
     f7c:	28 f0       	brcs	.+10     	; 0xf88 <__mulsf3+0x12>
     f7e:	76 d0       	rcall	.+236    	; 0x106c <__fp_pscB>
     f80:	18 f0       	brcs	.+6      	; 0xf88 <__mulsf3+0x12>
     f82:	95 23       	and	r25, r21
     f84:	09 f0       	breq	.+2      	; 0xf88 <__mulsf3+0x12>
     f86:	62 c0       	rjmp	.+196    	; 0x104c <__fp_inf>
     f88:	67 c0       	rjmp	.+206    	; 0x1058 <__fp_nan>
     f8a:	ef cf       	rjmp	.-34     	; 0xf6a <__fp_szero>

00000f8c <__mulsf3x>:
__mulsf3x():
     f8c:	cb df       	rcall	.-106    	; 0xf24 <__fp_split3>
     f8e:	a8 f3       	brcs	.-22     	; 0xf7a <__mulsf3+0x4>

00000f90 <__mulsf3_pse>:
     f90:	99 23       	and	r25, r25
     f92:	d9 f3       	breq	.-10     	; 0xf8a <__mulsf3+0x14>
     f94:	55 23       	and	r21, r21
     f96:	c9 f3       	breq	.-14     	; 0xf8a <__mulsf3+0x14>
     f98:	95 0f       	add	r25, r21
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	55 1f       	adc	r21, r21
     f9e:	aa 27       	eor	r26, r26
     fa0:	ee 27       	eor	r30, r30
     fa2:	ff 27       	eor	r31, r31
     fa4:	bb 27       	eor	r27, r27
     fa6:	00 24       	eor	r0, r0
     fa8:	08 94       	sec
     faa:	67 95       	ror	r22
     fac:	20 f4       	brcc	.+8      	; 0xfb6 <__mulsf3_pse+0x26>
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	b4 1f       	adc	r27, r20
     fb4:	0a 1e       	adc	r0, r26
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	44 1f       	adc	r20, r20
     fbc:	aa 1f       	adc	r26, r26
     fbe:	66 95       	lsr	r22
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__mulsf3_pse+0x1c>
     fc2:	77 95       	ror	r23
     fc4:	30 f4       	brcc	.+12     	; 0xfd2 <__mulsf3_pse+0x42>
     fc6:	f3 0f       	add	r31, r19
     fc8:	b4 1f       	adc	r27, r20
     fca:	0a 1e       	adc	r0, r26
     fcc:	12 1e       	adc	r1, r18
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <__mulsf3_pse+0x42>
     fd0:	63 95       	inc	r22
     fd2:	33 0f       	add	r19, r19
     fd4:	44 1f       	adc	r20, r20
     fd6:	aa 1f       	adc	r26, r26
     fd8:	22 1f       	adc	r18, r18
     fda:	76 95       	lsr	r23
     fdc:	99 f7       	brne	.-26     	; 0xfc4 <__mulsf3_pse+0x34>
     fde:	87 95       	ror	r24
     fe0:	20 f4       	brcc	.+8      	; 0xfea <__mulsf3_pse+0x5a>
     fe2:	b4 0f       	add	r27, r20
     fe4:	0a 1e       	adc	r0, r26
     fe6:	12 1e       	adc	r1, r18
     fe8:	63 1f       	adc	r22, r19
     fea:	44 0f       	add	r20, r20
     fec:	aa 1f       	adc	r26, r26
     fee:	22 1f       	adc	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	86 95       	lsr	r24
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__mulsf3_pse+0x50>
     ff6:	86 2f       	mov	r24, r22
     ff8:	71 2d       	mov	r23, r1
     ffa:	60 2d       	mov	r22, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	9f 57       	subi	r25, 0x7F	; 127
    1000:	50 40       	sbci	r21, 0x00	; 0
    1002:	8a f0       	brmi	.+34     	; 0x1026 <__mulsf3_pse+0x96>
    1004:	e1 f0       	breq	.+56     	; 0x103e <__mulsf3_pse+0xae>
    1006:	88 23       	and	r24, r24
    1008:	4a f0       	brmi	.+18     	; 0x101c <__mulsf3_pse+0x8c>
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	bb 1f       	adc	r27, r27
    1010:	66 1f       	adc	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	91 50       	subi	r25, 0x01	; 1
    1018:	50 40       	sbci	r21, 0x00	; 0
    101a:	a9 f7       	brne	.-22     	; 0x1006 <__mulsf3_pse+0x76>
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	51 05       	cpc	r21, r1
    1020:	70 f0       	brcs	.+28     	; 0x103e <__mulsf3_pse+0xae>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <__fp_inf>
    1024:	a2 cf       	rjmp	.-188    	; 0xf6a <__fp_szero>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	ec f3       	brlt	.-6      	; 0x1024 <__mulsf3_pse+0x94>
    102a:	98 3e       	cpi	r25, 0xE8	; 232
    102c:	dc f3       	brlt	.-10     	; 0x1024 <__mulsf3_pse+0x94>
    102e:	86 95       	lsr	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	f7 95       	ror	r31
    1038:	e7 95       	ror	r30
    103a:	9f 5f       	subi	r25, 0xFF	; 255
    103c:	c1 f7       	brne	.-16     	; 0x102e <__mulsf3_pse+0x9e>
    103e:	fe 2b       	or	r31, r30
    1040:	88 0f       	add	r24, r24
    1042:	91 1d       	adc	r25, r1
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__fp_inf>:
    104c:	97 f9       	bld	r25, 7
    104e:	9f 67       	ori	r25, 0x7F	; 127
    1050:	80 e8       	ldi	r24, 0x80	; 128
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	08 95       	ret

00001058 <__fp_nan>:
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	80 ec       	ldi	r24, 0xC0	; 192
    105c:	08 95       	ret

0000105e <__fp_pscA>:
__fp_pscA():
    105e:	00 24       	eor	r0, r0
    1060:	0a 94       	dec	r0
    1062:	16 16       	cp	r1, r22
    1064:	17 06       	cpc	r1, r23
    1066:	18 06       	cpc	r1, r24
    1068:	09 06       	cpc	r0, r25
    106a:	08 95       	ret

0000106c <__fp_pscB>:
__fp_pscB():
    106c:	00 24       	eor	r0, r0
    106e:	0a 94       	dec	r0
    1070:	12 16       	cp	r1, r18
    1072:	13 06       	cpc	r1, r19
    1074:	14 06       	cpc	r1, r20
    1076:	05 06       	cpc	r0, r21
    1078:	08 95       	ret

0000107a <__fp_round>:
__fp_round():
    107a:	09 2e       	mov	r0, r25
    107c:	03 94       	inc	r0
    107e:	00 0c       	add	r0, r0
    1080:	11 f4       	brne	.+4      	; 0x1086 <__fp_round+0xc>
    1082:	88 23       	and	r24, r24
    1084:	52 f0       	brmi	.+20     	; 0x109a <__fp_round+0x20>
    1086:	bb 0f       	add	r27, r27
    1088:	40 f4       	brcc	.+16     	; 0x109a <__fp_round+0x20>
    108a:	bf 2b       	or	r27, r31
    108c:	11 f4       	brne	.+4      	; 0x1092 <__fp_round+0x18>
    108e:	60 ff       	sbrs	r22, 0
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__fp_round+0x20>
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	08 95       	ret

0000109c <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    109c:	f8 94       	cli

0000109e <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    109e:	ff cf       	rjmp	.-2      	; 0x109e <__stop_program>
