
/tmp/arduino_build_276436/cellModule.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	d6 c4       	rjmp	.+2476   	; 0x9b4 <__vector_3>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	b7 c3       	rjmp	.+1902   	; 0x77a <__vector_5>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	69 c5       	rjmp	.+2770   	; 0xae4 <__vector_8>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	af c4       	rjmp	.+2398   	; 0x97a <__vector_13>
      1c:	f8 c3       	rjmp	.+2032   	; 0x80e <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
      2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
      30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
      36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf e5       	ldi	r28, 0x5F	; 95
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      48:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      4e:	e8 e6       	ldi	r30, 0x68	; 104
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      50:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      54:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      56:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      58:	a4 38       	cpi	r26, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      5a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      5e:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      60:	a4 e8       	ldi	r26, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      62:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      68:	a7 3f       	cpi	r26, 0xF7	; 247
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      6a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
      6e:	92 d5       	rcall	.+2852   	; 0xb94 <main>
      70:	79 c8       	rjmp	.-3854   	; 0xfffff164 <__eeprom_end+0xff7ef164>

00000072 <__bad_interrupt>:
__vector_1():
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>:
_Z14calculateCRC32PKhj.constprop.8():
/media/D/Data/Powerwall/cellModule/b_functions.ino:12
inline void ledOFF() {
  DDRB |= (1 << DDB1);
  PORTB &= ~(1 << PB1);
}

uint32_t calculateCRC32(const uint8_t *data, size_t length)
      74:	4f 92       	push	r4
      76:	5f 92       	push	r5
      78:	6f 92       	push	r6
      7a:	7f 92       	push	r7
      7c:	8f 92       	push	r8
      7e:	9f 92       	push	r9
      80:	af 92       	push	r10
      82:	bf 92       	push	r11
      84:	cf 92       	push	r12
      86:	df 92       	push	r13
      88:	ef 92       	push	r14
      8a:	ff 92       	push	r15
      8c:	fc 01       	movw	r30, r24
      8e:	71 96       	adiw	r30, 0x11	; 17
/media/D/Data/Powerwall/cellModule/b_functions.ino:14
{
  uint32_t crc = 0xffffffff;
      90:	cc 24       	eor	r12, r12
      92:	ca 94       	dec	r12
      94:	dc 2c       	mov	r13, r12
      96:	76 01       	movw	r14, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:15
  while (length--) {
      98:	8e 17       	cp	r24, r30
      9a:	9f 07       	cpc	r25, r31
      9c:	e1 f1       	breq	.+120    	; 0x116 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0xa2>
/media/D/Data/Powerwall/cellModule/b_functions.ino:16
    uint8_t c = *data++;
      9e:	dc 01       	movw	r26, r24
      a0:	4d 90       	ld	r4, X+
      a2:	cd 01       	movw	r24, r26
      a4:	28 e0       	ldi	r18, 0x08	; 8
      a6:	30 e0       	ldi	r19, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      a8:	40 e8       	ldi	r20, 0x80	; 128
      aa:	84 2e       	mov	r8, r20
      ac:	91 2c       	mov	r9, r1
      ae:	a1 2c       	mov	r10, r1
      b0:	b1 2c       	mov	r11, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:19
      bool bit = crc & 0x80000000;
      if (c & i) {
      b2:	51 2c       	mov	r5, r1
      b4:	71 2c       	mov	r7, r1
      b6:	61 2c       	mov	r6, r1
      b8:	b3 01       	movw	r22, r6
      ba:	a2 01       	movw	r20, r4
      bc:	48 21       	and	r20, r8
      be:	59 21       	and	r21, r9
      c0:	6a 21       	and	r22, r10
      c2:	7b 21       	and	r23, r11
      c4:	45 2b       	or	r20, r21
      c6:	46 2b       	or	r20, r22
      c8:	47 2b       	or	r20, r23
      ca:	f1 f4       	brne	.+60     	; 0x108 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x94>
/media/D/Data/Powerwall/cellModule/b_functions.ino:18
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      bool bit = crc & 0x80000000;
      cc:	b7 01       	movw	r22, r14
      ce:	a6 01       	movw	r20, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      if (c & i) {
        bit = !bit;
      d0:	44 27       	eor	r20, r20
      d2:	77 fd       	sbrc	r23, 7
      d4:	43 95       	inc	r20
      d6:	55 27       	eor	r21, r21
      d8:	66 27       	eor	r22, r22
      da:	77 27       	eor	r23, r23
/media/D/Data/Powerwall/cellModule/b_functions.ino:22
      }
      crc <<= 1;
      dc:	cc 0c       	add	r12, r12
      de:	dd 1c       	adc	r13, r13
      e0:	ee 1c       	adc	r14, r14
      e2:	ff 1c       	adc	r15, r15
/media/D/Data/Powerwall/cellModule/b_functions.ino:23
      if (bit) {
      e4:	44 23       	and	r20, r20
      e6:	41 f0       	breq	.+16     	; 0xf8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x84>
/media/D/Data/Powerwall/cellModule/b_functions.ino:24
        crc ^= 0x04c11db7;
      e8:	b7 eb       	ldi	r27, 0xB7	; 183
      ea:	cb 26       	eor	r12, r27
      ec:	bd e1       	ldi	r27, 0x1D	; 29
      ee:	db 26       	eor	r13, r27
      f0:	b1 ec       	ldi	r27, 0xC1	; 193
      f2:	eb 26       	eor	r14, r27
      f4:	b4 e0       	ldi	r27, 0x04	; 4
      f6:	fb 26       	eor	r15, r27
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
uint32_t calculateCRC32(const uint8_t *data, size_t length)
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      f8:	b6 94       	lsr	r11
      fa:	a7 94       	ror	r10
      fc:	97 94       	ror	r9
      fe:	87 94       	ror	r8
     100:	21 50       	subi	r18, 0x01	; 1
     102:	31 09       	sbc	r19, r1
     104:	c9 f6       	brne	.-78     	; 0xb8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x44>
     106:	c8 cf       	rjmp	.-112    	; 0x98 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x24>
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      bool bit = crc & 0x80000000;
      if (c & i) {
        bit = !bit;
     108:	b7 01       	movw	r22, r14
     10a:	a6 01       	movw	r20, r12
     10c:	40 95       	com	r20
     10e:	50 95       	com	r21
     110:	60 95       	com	r22
     112:	70 95       	com	r23
     114:	dd cf       	rjmp	.-70     	; 0xd0 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x5c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:29
        crc ^= 0x04c11db7;
      }
    }
  }
  return crc;
}
     116:	c7 01       	movw	r24, r14
     118:	b6 01       	movw	r22, r12
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	9f 90       	pop	r9
     128:	8f 90       	pop	r8
     12a:	7f 90       	pop	r7
     12c:	6f 90       	pop	r6
     12e:	5f 90       	pop	r5
     130:	4f 90       	pop	r4
     132:	08 95       	ret

00000134 <digitalWrite.constprop.1>:
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     134:	ea e3       	ldi	r30, 0x3A	; 58
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     13a:	e4 e3       	ldi	r30, 0x34	; 52
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     140:	ee e2       	ldi	r30, 0x2E	; 46
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	e4 91       	lpm	r30, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     146:	ee 23       	and	r30, r30
     148:	c1 f0       	breq	.+48     	; 0x17a <digitalWrite.constprop.1+0x46>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     14a:	22 23       	and	r18, r18
     14c:	29 f0       	breq	.+10     	; 0x158 <digitalWrite.constprop.1+0x24>
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     14e:	21 30       	cpi	r18, 0x01	; 1
     150:	a9 f4       	brne	.+42     	; 0x17c <digitalWrite.constprop.1+0x48>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     152:	2a b5       	in	r18, 0x2a	; 42
     154:	2f 77       	andi	r18, 0x7F	; 127
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     156:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ec 5d       	subi	r30, 0xDC	; 220
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	a5 91       	lpm	r26, Z+
     164:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:151

  if (val == LOW) {
     166:	81 11       	cpse	r24, r1
     168:	1a c0       	rjmp	.+52     	; 0x19e <digitalWrite.constprop.1+0x6a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:152
    uint8_t oldSREG = SREG;
     16a:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:153
    cli();
     16c:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:154
    *out &= ~bit;
     16e:	2c 91       	ld	r18, X
     170:	e9 2f       	mov	r30, r25
     172:	e0 95       	com	r30
     174:	e2 23       	and	r30, r18
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     176:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
     178:	8f bf       	out	0x3f, r24	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:162
  }
}
     17a:	08 95       	ret
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     17c:	22 30       	cpi	r18, 0x02	; 2
     17e:	19 f4       	brne	.+6      	; 0x186 <digitalWrite.constprop.1+0x52>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     180:	2a b5       	in	r18, 0x2a	; 42
     182:	2f 7d       	andi	r18, 0xDF	; 223
     184:	e8 cf       	rjmp	.-48     	; 0x156 <digitalWrite.constprop.1+0x22>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
     186:	23 30       	cpi	r18, 0x03	; 3
     188:	21 f4       	brne	.+8      	; 0x192 <digitalWrite.constprop.1+0x5e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
     18a:	20 b7       	in	r18, 0x30	; 48
     18c:	2f 7d       	andi	r18, 0xDF	; 223
     18e:	20 bf       	out	0x30, r18	; 48
     190:	e3 cf       	rjmp	.-58     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
     192:	24 30       	cpi	r18, 0x04	; 4
     194:	09 f7       	brne	.-62     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
     196:	2c b5       	in	r18, 0x2c	; 44
     198:	2f 7d       	andi	r18, 0xDF	; 223
     19a:	2c bd       	out	0x2c, r18	; 44
     19c:	dd cf       	rjmp	.-70     	; 0x158 <digitalWrite.constprop.1+0x24>
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:157
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     19e:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:158
    cli();
     1a0:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    *out |= bit;
     1a2:	ec 91       	ld	r30, X
     1a4:	e9 2b       	or	r30, r25
     1a6:	e7 cf       	rjmp	.-50     	; 0x176 <digitalWrite.constprop.1+0x42>

000001a8 <micros>:
micros():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     1a8:	3f b7       	in	r19, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:183

    cli();
     1aa:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:184
    m = millis_timer_overflow_count;
     1ac:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis_timer_overflow_count>
     1b0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis_timer_overflow_count+0x1>
     1b4:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis_timer_overflow_count+0x2>
     1b8:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     1bc:	22 b7       	in	r18, 0x32	; 50
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:201

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     1be:	08 b6       	in	r0, 0x38	; 56
     1c0:	01 fe       	sbrs	r0, 1
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <micros+0x26>
     1c4:	2f 3f       	cpi	r18, 0xFF	; 255
     1c6:	19 f0       	breq	.+6      	; 0x1ce <micros+0x26>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:202
      m++;
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	a1 1d       	adc	r26, r1
     1cc:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     1ce:	3f bf       	out	0x3f, r19	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     1d0:	ba 2f       	mov	r27, r26
     1d2:	a9 2f       	mov	r26, r25
     1d4:	98 2f       	mov	r25, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	bc 01       	movw	r22, r24
     1da:	cd 01       	movw	r24, r26
     1dc:	62 0f       	add	r22, r18
     1de:	71 1d       	adc	r23, r1
     1e0:	81 1d       	adc	r24, r1
     1e2:	91 1d       	adc	r25, r1
     1e4:	43 e0       	ldi	r20, 0x03	; 3
     1e6:	66 0f       	add	r22, r22
     1e8:	77 1f       	adc	r23, r23
     1ea:	88 1f       	adc	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	4a 95       	dec	r20
     1f0:	d1 f7       	brne	.-12     	; 0x1e6 <micros+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     1f2:	08 95       	ret

000001f4 <usiTwiReceiveByte>:
usiTwiReceiveByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:443
)
{
  uint8_t rtn_byte;

  // wait for Rx data
  while ( !rxCount );
     1f4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
     1f8:	88 23       	and	r24, r24
     1fa:	e1 f3       	breq	.-8      	; 0x1f4 <usiTwiReceiveByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:445

  rtn_byte = rxBuf [ rxTail ];
     1fc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <rxTail>
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	e6 54       	subi	r30, 0x46	; 70
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	80 81       	ld	r24, Z
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:447
  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
     208:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <rxTail>
     20c:	9f 5f       	subi	r25, 0xFF	; 255
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:448
  rxCount--;
     214:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <rxCount>
     218:	91 50       	subi	r25, 0x01	; 1
     21a:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:453

  // return data from the buffer.
  return rtn_byte;

} // end usiTwiReceiveByte
     21e:	08 95       	ret

00000220 <usiTwiTransmitByte>:
usiTwiTransmitByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:420
{

  uint8_t tmphead;

  // wait for free space in buffer
  while ( txCount == TWI_TX_BUFFER_SIZE) ;
     220:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <txCount>
     224:	90 31       	cpi	r25, 0x10	; 16
     226:	e1 f3       	breq	.-8      	; 0x220 <usiTwiTransmitByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:423

  // store data in buffer
  txBuf[ txHead ] = data;
     228:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <txHead>
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	e5 53       	subi	r30, 0x35	; 53
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:424
  txHead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
     234:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <txHead>
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	8f 70       	andi	r24, 0x0F	; 15
     23c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:425
  txCount++;
     240:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txCount>
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:427

} // end usiTwiTransmitByte
     24a:	08 95       	ret

0000024c <init_i2c()>:
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:11
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
}
void init_i2c() {
  TinyWireS.begin(currentConfig.SLAVE_ADDR);
     24c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
flushTwiBuffers():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:333
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
     250:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:334
  rxHead = 0;
     254:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:335
  rxCount = 0;
     258:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:336
  txTail = 0;
     25c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:337
  txHead = 0;
     260:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:338
  txCount = 0;
     264:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txCount>
usiTwiSlaveInit():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:361
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
     268:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <slaveAddress>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:369
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
     26c:	87 b3       	in	r24, 0x17	; 23
     26e:	85 60       	ori	r24, 0x05	; 5
     270:	87 bb       	out	0x17, r24	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:372

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
     272:	c2 9a       	sbi	0x18, 2	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:375

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
     274:	c0 9a       	sbi	0x18, 0	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:378

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
     276:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:380

  USICR =
     278:	88 ea       	ldi	r24, 0xA8	; 168
     27a:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:395
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
     27c:	80 ef       	ldi	r24, 0xF0	; 240
     27e:	8e b9       	out	0x0e, r24	; 14
onReceive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:53
}

// sets function called on slave write
void USI_TWI_S::onReceive( void (*function)(uint8_t) )
{
  usi_onReceiverPtr = function;
     280:	84 ea       	ldi	r24, 0xA4	; 164
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <usi_onReceiverPtr+0x1>
     288:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <usi_onReceiverPtr>
onRequest():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:59
}

// sets function called on slave read
void USI_TWI_S::onRequest( void (*function)(void) )
{
  usi_onRequestPtr = function;
     28c:	8a eb       	ldi	r24, 0xBA	; 186
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <usi_onRequestPtr+0x1>
     294:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <usi_onRequestPtr>
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:14
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}
     298:	08 95       	ret

0000029a <getVoltageMeasurement()>:
_Z21getVoltageMeasurementv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	20 e0       	ldi	r18, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:120
}


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	dc 01       	movw	r26, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:122
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
    sum += voltageBuff[k];
     2a4:	f9 01       	movw	r30, r18
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	e3 57       	subi	r30, 0x73	; 115
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	40 81       	ld	r20, Z
     2b0:	51 81       	ldd	r21, Z+1	; 0x01
     2b2:	84 0f       	add	r24, r20
     2b4:	95 1f       	adc	r25, r21
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	20 31       	cpi	r18, 0x10	; 16
     2c0:	31 05       	cpc	r19, r1
     2c2:	81 f7       	brne	.-32     	; 0x2a4 <getVoltageMeasurement()+0xa>
/media/D/Data/Powerwall/cellModule/b_functions.ino:127
    sum += voltageBuff[k];
  }
  //Shift the bits to match OVERSAMPLE_LOOP size (buffer size of 8=3 shifts, 16=4 shifts)
  //Assume perfect reference of 2560mV for reference - we will correct for this with voltageCalibration

  uint16_t raw = (uint16_t)(sum / OVERSAMPLE_LOOP);
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	b6 95       	lsr	r27
     2c8:	a7 95       	ror	r26
     2ca:	97 95       	ror	r25
     2cc:	87 95       	ror	r24
     2ce:	2a 95       	dec	r18
     2d0:	d1 f7       	brne	.-12     	; 0x2c6 <getVoltageMeasurement()+0x2c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:129

  return (uint16_t)((float)raw * currentConfig.voltageCalibration + currentConfig.voltageCalibration2);
     2d2:	bc 01       	movw	r22, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	28 d6       	rcall	.+3152   	; 0xf2a <__floatunsisf>
     2da:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
     2de:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
     2e2:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
     2e6:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
     2ea:	d1 d6       	rcall	.+3490   	; 0x108e <__mulsf3>
     2ec:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
     2f0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
     2f4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
     2f8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
     2fc:	82 d5       	rcall	.+2820   	; 0xe02 <__addsf3>
     2fe:	e9 d5       	rcall	.+3026   	; 0xed2 <__fixunssfsi>
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	12 d6       	rcall	.+3108   	; 0xf2a <__floatunsisf>
/media/D/Data/Powerwall/cellModule/b_functions.ino:130
}
     306:	08 95       	ret

00000308 <readFloat()>:
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:97
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}

float readFloat() {
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
     30c:	73 df       	rcall	.-282    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:98
  float_to_bytes.b[0] = TinyWireS.receive();
     30e:	c4 e8       	ldi	r28, 0x84	; 132
     310:	d0 e0       	ldi	r29, 0x00	; 0
     312:	88 83       	st	Y, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     314:	6f df       	rcall	.-290    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:99
  float_to_bytes.b[1] = TinyWireS.receive();
     316:	89 83       	std	Y+1, r24	; 0x01
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     318:	6d df       	rcall	.-294    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:100
  float_to_bytes.b[2] = TinyWireS.receive();
     31a:	8a 83       	std	Y+2, r24	; 0x02
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     31c:	6b df       	rcall	.-298    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:101
  float_to_bytes.b[3] = TinyWireS.receive();
     31e:	8b 83       	std	Y+3, r24	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:103

  return float_to_bytes.val;
     320:	68 81       	ld	r22, Y
     322:	79 81       	ldd	r23, Y+1	; 0x01
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	9b 81       	ldd	r25, Y+3	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:104
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <sendFloat(float)>:
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:88

void sendByte(uint8_t number) {
  TinyWireS.send(number);
}

void sendFloat(float number) {
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	17 2f       	mov	r17, r23
     336:	d8 2f       	mov	r29, r24
     338:	c9 2f       	mov	r28, r25
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
  float_to_bytes.val = number;
     33a:	86 2f       	mov	r24, r22
     33c:	97 2f       	mov	r25, r23
     33e:	ad 2f       	mov	r26, r29
     340:	bc 2f       	mov	r27, r28
     342:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
     346:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
     34a:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <__data_end+0x2>
     34e:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <__data_end+0x3>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
void USI_TWI_S::begin(uint8_t slaveAddr){ // initialize I2C lib
  usiTwiSlaveInit(slaveAddr); 
}

void USI_TWI_S::send(uint8_t data){  // send it back to master
  usiTwiTransmitByte(data);
     352:	66 df       	rcall	.-308    	; 0x220 <usiTwiTransmitByte>
     354:	81 2f       	mov	r24, r17
     356:	64 df       	rcall	.-312    	; 0x220 <usiTwiTransmitByte>
     358:	8d 2f       	mov	r24, r29
     35a:	62 df       	rcall	.-316    	; 0x220 <usiTwiTransmitByte>
     35c:	8c 2f       	mov	r24, r28
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:95

  TinyWireS.send(float_to_bytes.b[0]);
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     364:	5d cf       	rjmp	.-326    	; 0x220 <usiTwiTransmitByte>

00000366 <sendUnsignedInt(unsigned int)>:
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:79
  //Infinity
  while (1) {}
}


void sendUnsignedInt(uint16_t number) {
     366:	cf 93       	push	r28
     368:	c8 2f       	mov	r28, r24
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     36a:	89 2f       	mov	r24, r25
     36c:	59 df       	rcall	.-334    	; 0x220 <usiTwiTransmitByte>
     36e:	8c 2f       	mov	r24, r28
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:82
  TinyWireS.send((byte)((number >> 8) & 0xFF));
  TinyWireS.send((byte)(number & 0xFF));
}
     370:	cf 91       	pop	r28
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     372:	56 cf       	rjmp	.-340    	; 0x220 <usiTwiTransmitByte>

00000374 <requestEvent()>:
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:4
//cellModule -> cellController
// function that executes whenever data is requested by master (this answers requestFrom command)
void requestEvent() {
  switch (cmdByte) {
     374:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <cmdByte>
     378:	ea 50       	subi	r30, 0x0A	; 10
     37a:	eb 30       	cpi	r30, 0x0B	; 11
     37c:	30 f5       	brcc	.+76     	; 0x3ca <requestEvent()+0x56>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ed 53       	subi	r30, 0x3D	; 61
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	09 94       	ijmp
     386:	0a c0       	rjmp	.+20     	; 0x39c <requestEvent()+0x28>
     388:	34 c0       	rjmp	.+104    	; 0x3f2 <requestEvent()+0x7e>
     38a:	4f c0       	rjmp	.+158    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     38c:	61 c0       	rjmp	.+194    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     38e:	23 c0       	rjmp	.+70     	; 0x3d6 <requestEvent()+0x62>
     390:	27 c0       	rjmp	.+78     	; 0x3e0 <requestEvent()+0x6c>
     392:	2b c0       	rjmp	.+86     	; 0x3ea <requestEvent()+0x76>
     394:	0a c0       	rjmp	.+20     	; 0x3aa <requestEvent()+0x36>
     396:	6e c0       	rjmp	.+220    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     398:	52 c0       	rjmp	.+164    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     39a:	63 c0       	rjmp	.+198    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
/media/D/Data/Powerwall/cellModule/c_comm.ino:6
    case READOUT_voltage:
      ledFlash = true;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <ledFlash>
/media/D/Data/Powerwall/cellModule/c_comm.ino:7
      if (bypassEnabled) {
     3a2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <bypassEnabled>
     3a6:	88 23       	and	r24, r24
     3a8:	29 f0       	breq	.+10     	; 0x3b4 <requestEvent()+0x40>
/media/D/Data/Powerwall/cellModule/c_comm.ino:16
        sendUnsignedInt(voltageMeasurement);
      }

      break;
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
     3aa:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <voltageMeasurement_bypass>
     3ae:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <requestEvent()+0x54>
/media/D/Data/Powerwall/cellModule/c_comm.ino:10
    case READOUT_voltage:
      ledFlash = true;
      if (bypassEnabled) {
        sendUnsignedInt(voltageMeasurement_bypass);
      } else {
        voltageMeasurement = getVoltageMeasurement();
     3b4:	72 df       	rcall	.-284    	; 0x29a <getVoltageMeasurement()>
     3b6:	8d d5       	rcall	.+2842   	; 0xed2 <__fixunssfsi>
     3b8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <voltageMeasurement+0x1>
     3bc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <voltageMeasurement>
/media/D/Data/Powerwall/cellModule/c_comm.ino:11
        sendUnsignedInt(voltageMeasurement);
     3c0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <voltageMeasurement>
     3c4:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <voltageMeasurement+0x1>
     3c8:	ce df       	rcall	.-100    	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:58
      //Dont do anything - timeout
      break;
  }

  //Clear cmdByte
  cmdByte = 0;
     3ca:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:61

  //if this times out, master has stopped communicating with module
  i2cTmr = 80;//150
     3ce:	80 e5       	ldi	r24, 0x50	; 80
     3d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/c_comm.ino:62
}
     3d4:	08 95       	ret
/media/D/Data/Powerwall/cellModule/c_comm.ino:20
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
      break;
      
    case READOUT_raw_voltage:
      sendUnsignedInt(last_raw_adc);
     3d6:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <last_raw_adc>
     3da:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <last_raw_adc+0x1>
     3de:	f4 cf       	rjmp	.-24     	; 0x3c8 <requestEvent()+0x54>
/media/D/Data/Powerwall/cellModule/c_comm.ino:24
      break;

    case READOUT_error_counter:
      sendUnsignedInt(error_counter);
     3e0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <error_counter>
     3e4:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <error_counter+0x1>
     3e8:	ef cf       	rjmp	.-34     	; 0x3c8 <requestEvent()+0x54>
/media/D/Data/Powerwall/cellModule/c_comm.ino:28
      break;

    case READOUT_bypass_state:
      sendByte(bypassEnabled);
     3ea:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <bypassEnabled>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     3ee:	18 df       	rcall	.-464    	; 0x220 <usiTwiTransmitByte>
     3f0:	ec cf       	rjmp	.-40     	; 0x3ca <requestEvent()+0x56>
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:32
      break;

    case READOUT_temperature:
      sendUnsignedInt((uint16_t)((float)tempSensorValue * currentConfig.tempSensorCalibration + currentConfig.tempSensorCalibration2));
     3f2:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <tempSensorValue>
     3f6:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <tempSensorValue+0x1>
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	95 d5       	rcall	.+2858   	; 0xf2a <__floatunsisf>
     400:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <currentConfig+0x9>
     404:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <currentConfig+0xa>
     408:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <currentConfig+0xb>
     40c:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <currentConfig+0xc>
     410:	3e d6       	rcall	.+3196   	; 0x108e <__mulsf3>
     412:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <currentConfig+0xd>
     416:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentConfig+0xe>
     41a:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentConfig+0xf>
     41e:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentConfig+0x10>
     422:	ef d4       	rcall	.+2526   	; 0xe02 <__addsf3>
     424:	56 d5       	rcall	.+2732   	; 0xed2 <__fixunssfsi>
     426:	cb 01       	movw	r24, r22
     428:	cf cf       	rjmp	.-98     	; 0x3c8 <requestEvent()+0x54>
/media/D/Data/Powerwall/cellModule/c_comm.ino:36
      break;

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
     42a:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <currentConfig+0x1>
     42e:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <currentConfig+0x2>
     432:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <currentConfig+0x3>
     436:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:45
      break;
    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
      break;
    case READOUT_temperature_calibration2:
      sendFloat(currentConfig.tempSensorCalibration2);
     43a:	79 df       	rcall	.-270    	; 0x32e <sendFloat(float)>
     43c:	c6 cf       	rjmp	.-116    	; 0x3ca <requestEvent()+0x56>
/media/D/Data/Powerwall/cellModule/c_comm.ino:39

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
      break;
    case READOUT_voltage_calibration2:
      sendFloat(currentConfig.voltageCalibration2);
     43e:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentConfig+0x5>
     442:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <currentConfig+0x6>
     446:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <currentConfig+0x7>
     44a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <currentConfig+0x8>
     44e:	f5 cf       	rjmp	.-22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:42
      break;
    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
     450:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <currentConfig+0x9>
     454:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <currentConfig+0xa>
     458:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <currentConfig+0xb>
     45c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <currentConfig+0xc>
     460:	ec cf       	rjmp	.-40     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:45
      break;
    case READOUT_temperature_calibration2:
      sendFloat(currentConfig.tempSensorCalibration2);
     462:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <currentConfig+0xd>
     466:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <currentConfig+0xe>
     46a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <currentConfig+0xf>
     46e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <currentConfig+0x10>
     472:	e3 cf       	rjmp	.-58     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:48
      break;
    case READOUT_burningCounter:
      sendUnsignedInt(iBurningCounter);
     474:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <iBurningCounter>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	75 df       	rcall	.-278    	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:49
      iBurningCounter = 0;//resest after it is read
     47c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <iBurningCounter>
     480:	a4 cf       	rjmp	.-184    	; 0x3ca <requestEvent()+0x56>

00000482 <ledOFF()>:
_Z6ledOFFv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:8
  DDRB |= (1 << DDB1);
  PORTB |=  (1 << PB1);
}

inline void ledOFF() {
  DDRB |= (1 << DDB1);
     482:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:9
  PORTB &= ~(1 << PB1);
     484:	c1 98       	cbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:10
}
     486:	08 95       	ret

00000488 <ledON()>:
_Z5ledONv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:3

inline void ledON() {
  DDRB |= (1 << DDB1);
     488:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:4
  PORTB |=  (1 << PB1);
     48a:	c1 9a       	sbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:5
}
     48c:	08 95       	ret

0000048e <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24
     49a:	f6 2e       	mov	r15, r22
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     49c:	08 81       	ld	r16, Y
     49e:	19 81       	ldd	r17, Y+1	; 0x01
     4a0:	c8 01       	movw	r24, r16
     4a2:	98 d4       	rcall	.+2352   	; 0xdd4 <eeprom_read_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4a4:	f8 16       	cp	r15, r24
     4a6:	19 f0       	breq	.+6      	; 0x4ae <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     4a8:	6f 2d       	mov	r22, r15
     4aa:	c8 01       	movw	r24, r16
     4ac:	9b d4       	rcall	.+2358   	; 0xde4 <eeprom_write_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4ae:	ce 01       	movw	r24, r28
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	08 95       	ret

000004bc <WriteConfigToEEPROM()>:
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:31
    }
  }
  return crc;
}

void WriteConfigToEEPROM() {
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <WriteConfigToEEPROM()+0xe>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <WriteConfigToEEPROM()+0x10>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <WriteConfigToEEPROM()+0x12>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	82 e6       	ldi	r24, 0x62	; 98
     4d4:	e8 2e       	mov	r14, r24
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	f8 2e       	mov	r15, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     4da:	04 e1       	ldi	r16, 0x14	; 20
     4dc:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     4de:	1a 83       	std	Y+2, r17	; 0x02
     4e0:	09 83       	std	Y+1, r16	; 0x01
     4e2:	f7 01       	movw	r30, r14
     4e4:	61 91       	ld	r22, Z+
     4e6:	7f 01       	movw	r14, r30
     4e8:	ce 01       	movw	r24, r28
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	d0 df       	rcall	.-96     	; 0x48e <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     4ee:	0f 5f       	subi	r16, 0xFF	; 255
     4f0:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     4f2:	05 32       	cpi	r16, 0x25	; 37
     4f4:	11 05       	cpc	r17, r1
     4f6:	99 f7       	brne	.-26     	; 0x4de <WriteConfigToEEPROM()+0x22>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:33
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
     4f8:	82 e6       	ldi	r24, 0x62	; 98
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	bb dd       	rcall	.-1162   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
     4fe:	69 83       	std	Y+1, r22	; 0x01
     500:	7a 83       	std	Y+2, r23	; 0x02
     502:	8b 83       	std	Y+3, r24	; 0x03
     504:	9c 83       	std	Y+4, r25	; 0x04
     506:	8e 01       	movw	r16, r28
     508:	0f 5f       	subi	r16, 0xFF	; 255
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	f1 2c       	mov	r15, r1
     50e:	e1 2c       	mov	r14, r1
_ZN11EEPROMClass3putImEERKT_iS3_.isra.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     510:	fe 82       	std	Y+6, r15	; 0x06
     512:	ed 82       	std	Y+5, r14	; 0x05
     514:	f8 01       	movw	r30, r16
     516:	61 91       	ld	r22, Z+
     518:	8f 01       	movw	r16, r30
     51a:	ce 01       	movw	r24, r28
     51c:	05 96       	adiw	r24, 0x05	; 5
     51e:	b7 df       	rcall	.-146    	; 0x48e <EERef::update(unsigned char)>
     520:	ff ef       	ldi	r31, 0xFF	; 255
     522:	ef 1a       	sub	r14, r31
     524:	ff 0a       	sbc	r15, r31
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	e8 16       	cp	r14, r24
     52a:	f1 04       	cpc	r15, r1
     52c:	89 f7       	brne	.-30     	; 0x510 <WriteConfigToEEPROM()+0x54>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:34
}
     52e:	26 96       	adiw	r28, 0x06	; 6
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	08 95       	ret

00000548 <receiveEvent(unsigned char)>:
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:72
 * The I2C data received handler
 *
 * This needs to complete before the next incoming transaction (start, data, restart/stop) on the bus does
 * so be quick, set flags for long running tasks to be called from the mainloop instead of running them directly
 */
void receiveEvent(uint8_t bytesCnt) {
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <receiveEvent(unsigned char)+0x10>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
/media/D/Data/Powerwall/cellModule/c_comm.ino:73
  if (bytesCnt <= 0) return;
     55c:	88 23       	and	r24, r24
     55e:	09 f4       	brne	.+2      	; 0x562 <receiveEvent(unsigned char)+0x1a>
     560:	38 c0       	rjmp	.+112    	; 0x5d2 <receiveEvent(unsigned char)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:77

  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;
     562:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <cmdByte>
     566:	99 23       	and	r25, r25
     568:	51 f0       	breq	.+20     	; 0x57e <receiveEvent(unsigned char)+0x36>
     56a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <error_counter>
     56e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <error_counter+0x1>
     572:	2f 5f       	subi	r18, 0xFF	; 255
     574:	3f 4f       	sbci	r19, 0xFF	; 255
     576:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <error_counter+0x1>
     57a:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <error_counter>
     57e:	18 2f       	mov	r17, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
     580:	39 de       	rcall	.-910    	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:79

  cmdByte = TinyWireS.receive();
     582:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:83
  bytesCnt--;

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {
     586:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <cmdByte>
     58a:	86 ff       	sbrs	r24, 6
     58c:	22 c0       	rjmp	.+68     	; 0x5d2 <receiveEvent(unsigned char)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:80
  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;

  cmdByte = TinyWireS.receive();
  bytesCnt--;
     58e:	11 50       	subi	r17, 0x01	; 1
/media/D/Data/Powerwall/cellModule/c_comm.ino:85

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {

    bitClear(cmdByte, COMMAND_BIT);
     590:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <cmdByte>
     594:	9f 7b       	andi	r25, 0xBF	; 191
     596:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:87

    switch (cmdByte) {
     59a:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <cmdByte>
     59e:	e1 50       	subi	r30, 0x01	; 1
     5a0:	ec 30       	cpi	r30, 0x0C	; 12
     5a2:	a8 f4       	brcc	.+42     	; 0x5ce <receiveEvent(unsigned char)+0x86>
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ea 52       	subi	r30, 0x2A	; 42
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253
     5aa:	09 94       	ijmp
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <receiveEvent(unsigned char)+0x7c>
     5ae:	0f c0       	rjmp	.+30     	; 0x5ce <receiveEvent(unsigned char)+0x86>
     5b0:	1a c0       	rjmp	.+52     	; 0x5e6 <receiveEvent(unsigned char)+0x9e>
     5b2:	cd c0       	rjmp	.+410    	; 0x74e <receiveEvent(unsigned char)+0x206>
     5b4:	c9 c0       	rjmp	.+402    	; 0x748 <receiveEvent(unsigned char)+0x200>
     5b6:	26 c0       	rjmp	.+76     	; 0x604 <receiveEvent(unsigned char)+0xbc>
     5b8:	59 c0       	rjmp	.+178    	; 0x66c <receiveEvent(unsigned char)+0x124>
     5ba:	8e c0       	rjmp	.+284    	; 0x6d8 <receiveEvent(unsigned char)+0x190>
     5bc:	08 c0       	rjmp	.+16     	; 0x5ce <receiveEvent(unsigned char)+0x86>
     5be:	3c c0       	rjmp	.+120    	; 0x638 <receiveEvent(unsigned char)+0xf0>
     5c0:	70 c0       	rjmp	.+224    	; 0x6a2 <receiveEvent(unsigned char)+0x15a>
     5c2:	d7 c0       	rjmp	.+430    	; 0x772 <receiveEvent(unsigned char)+0x22a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:89
      case COMMAND_green_led_pattern:
        if (bytesCnt == 1) {
     5c4:	11 30       	cpi	r17, 0x01	; 1
     5c6:	19 f4       	brne	.+6      	; 0x5ce <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     5c8:	15 de       	rcall	.-982    	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:90
          green_pattern = TinyWireS.receive();
     5ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:181
        disable_i2c();
        init_i2c();
       break;
    }

    cmdByte = 0;
     5ce:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:194
        ledFlash = true;
        break;
    }*/
  }

}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	08 95       	ret
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     5e6:	1a 82       	std	Y+2, r1	; 0x02
     5e8:	19 82       	std	Y+1, r1	; 0x01
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	4e df       	rcall	.-356    	; 0x48e <EERef::update(unsigned char)>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9a 83       	std	Y+2, r25	; 0x02
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	46 df       	rcall	.-372    	; 0x48e <EERef::update(unsigned char)>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:171
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
            currentConfig.SLAVE_ADDR = newAddress;
            WriteConfigToEEPROM();
            Reboot();
     602:	c2 d2       	rcall	.+1412   	; 0xb88 <Reboot()>
/media/D/Data/Powerwall/cellModule/c_comm.ino:104
        factory_default();
        Reboot();
        break;

      case COMMAND_set_voltage_calibration:
        if (bytesCnt == sizeof(float)) {
     604:	14 30       	cpi	r17, 0x04	; 4
     606:	19 f7       	brne	.-58     	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:105
          float newValue = readFloat();
     608:	7f de       	rcall	.-770    	; 0x308 <readFloat()>
     60a:	6b 01       	movw	r12, r22
     60c:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:107
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration) {
     60e:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
     612:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
     616:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
     61a:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
     61e:	55 d4       	rcall	.+2218   	; 0xeca <__cmpsf2>
     620:	88 23       	and	r24, r24
     622:	a9 f2       	breq	.-86     	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:108
            currentConfig.voltageCalibration = newValue;
     624:	c0 92 63 00 	sts	0x0063, r12	; 0x800063 <currentConfig+0x1>
     628:	d0 92 64 00 	sts	0x0064, r13	; 0x800064 <currentConfig+0x2>
     62c:	e0 92 65 00 	sts	0x0065, r14	; 0x800065 <currentConfig+0x3>
     630:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:140
        if (bytesCnt == sizeof(float)) {
          float newValue = readFloat();
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration2) {
            currentConfig.tempSensorCalibration2 = newValue;
            WriteConfigToEEPROM();
     634:	43 df       	rcall	.-378    	; 0x4bc <WriteConfigToEEPROM()>
     636:	cb cf       	rjmp	.-106    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:114
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_voltage_calibration2:
        if (bytesCnt == sizeof(float)) {
     638:	14 30       	cpi	r17, 0x04	; 4
     63a:	49 f6       	brne	.-110    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:115
          float newValue = readFloat();
     63c:	65 de       	rcall	.-822    	; 0x308 <readFloat()>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:117
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration2) {
     642:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
     646:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
     64a:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
     64e:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
     652:	3b d4       	rcall	.+2166   	; 0xeca <__cmpsf2>
     654:	88 23       	and	r24, r24
     656:	09 f4       	brne	.+2      	; 0x65a <receiveEvent(unsigned char)+0x112>
     658:	ba cf       	rjmp	.-140    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:118
            currentConfig.voltageCalibration2 = newValue;
     65a:	c0 92 67 00 	sts	0x0067, r12	; 0x800067 <currentConfig+0x5>
     65e:	d0 92 68 00 	sts	0x0068, r13	; 0x800068 <currentConfig+0x6>
     662:	e0 92 69 00 	sts	0x0069, r14	; 0x800069 <currentConfig+0x7>
     666:	f0 92 6a 00 	sts	0x006A, r15	; 0x80006a <currentConfig+0x8>
     66a:	e4 cf       	rjmp	.-56     	; 0x634 <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:125
          }
        }
        break;

      case COMMAND_set_temperature_calibration:
        if (bytesCnt == sizeof(float)) {
     66c:	14 30       	cpi	r17, 0x04	; 4
     66e:	09 f0       	breq	.+2      	; 0x672 <receiveEvent(unsigned char)+0x12a>
     670:	ae cf       	rjmp	.-164    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:126
          float newValue = readFloat();
     672:	4a de       	rcall	.-876    	; 0x308 <readFloat()>
     674:	6b 01       	movw	r12, r22
     676:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:128
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
     678:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <currentConfig+0x9>
     67c:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <currentConfig+0xa>
     680:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <currentConfig+0xb>
     684:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <currentConfig+0xc>
     688:	20 d4       	rcall	.+2112   	; 0xeca <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	09 f4       	brne	.+2      	; 0x690 <receiveEvent(unsigned char)+0x148>
     68e:	9f cf       	rjmp	.-194    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:129
            currentConfig.tempSensorCalibration = newValue;
     690:	c0 92 6b 00 	sts	0x006B, r12	; 0x80006b <currentConfig+0x9>
     694:	d0 92 6c 00 	sts	0x006C, r13	; 0x80006c <currentConfig+0xa>
     698:	e0 92 6d 00 	sts	0x006D, r14	; 0x80006d <currentConfig+0xb>
     69c:	f0 92 6e 00 	sts	0x006E, r15	; 0x80006e <currentConfig+0xc>
     6a0:	c9 cf       	rjmp	.-110    	; 0x634 <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:135
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_temperature_calibration2:
        if (bytesCnt == sizeof(float)) {
     6a2:	14 30       	cpi	r17, 0x04	; 4
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <receiveEvent(unsigned char)+0x160>
     6a6:	93 cf       	rjmp	.-218    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:136
          float newValue = readFloat();
     6a8:	2f de       	rcall	.-930    	; 0x308 <readFloat()>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:138
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration2) {
     6ae:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <currentConfig+0xd>
     6b2:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentConfig+0xe>
     6b6:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentConfig+0xf>
     6ba:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentConfig+0x10>
     6be:	05 d4       	rcall	.+2058   	; 0xeca <__cmpsf2>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <receiveEvent(unsigned char)+0x17e>
     6c4:	84 cf       	rjmp	.-248    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:139
            currentConfig.tempSensorCalibration2 = newValue;
     6c6:	c0 92 6f 00 	sts	0x006F, r12	; 0x80006f <currentConfig+0xd>
     6ca:	d0 92 70 00 	sts	0x0070, r13	; 0x800070 <currentConfig+0xe>
     6ce:	e0 92 71 00 	sts	0x0071, r14	; 0x800071 <currentConfig+0xf>
     6d2:	f0 92 72 00 	sts	0x0072, r15	; 0x800072 <currentConfig+0x10>
     6d6:	ae cf       	rjmp	.-164    	; 0x634 <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:145
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_bypass_voltage:
        if (bytesCnt == sizeof(uint16_t)) {
     6d8:	12 30       	cpi	r17, 0x02	; 2
     6da:	09 f0       	breq	.+2      	; 0x6de <receiveEvent(unsigned char)+0x196>
     6dc:	78 cf       	rjmp	.-272    	; 0x5ce <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     6de:	8a dd       	rcall	.-1260   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:106
  float_to_bytes.b[3] = TinyWireS.receive();

  return float_to_bytes.val;
}
uint16_t readUINT16() {
  uint16_t_to_bytes.b[0] = TinyWireS.receive();
     6e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <uint16_t_to_bytes>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     6e4:	87 dd       	rcall	.-1266   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:107
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
     6e6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <uint16_t_to_bytes+0x1>
/media/D/Data/Powerwall/cellModule/b_functions.ino:108
  return uint16_t_to_bytes.val;
     6ea:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <uint16_t_to_bytes>
     6ee:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <uint16_t_to_bytes+0x1>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:148
          uint16_t newValue = readUINT16();
          //Only accept if its a realistic value and the value is LESS than the last voltage reading
          if (newValue >= MIN_BYPASS_VOLTAGE && newValue <= MAX_BYPASS_VOLTAGE && newValue < voltageMeasurement) {
     6f2:	9c 01       	movw	r18, r24
     6f4:	2c 52       	subi	r18, 0x2C	; 44
     6f6:	31 40       	sbci	r19, 0x01	; 1
     6f8:	29 37       	cpi	r18, 0x79	; 121
     6fa:	31 05       	cpc	r19, r1
     6fc:	e8 f4       	brcc	.+58     	; 0x738 <receiveEvent(unsigned char)+0x1f0>
     6fe:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <voltageMeasurement>
     702:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <voltageMeasurement+0x1>
     706:	82 17       	cp	r24, r18
     708:	93 07       	cpc	r25, r19
     70a:	b0 f4       	brcc	.+44     	; 0x738 <receiveEvent(unsigned char)+0x1f0>
/media/D/Data/Powerwall/cellModule/c_comm.ino:149
            targetBypassVoltage = newValue;
     70c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <targetBypassVoltage+0x1>
     710:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/c_comm.ino:150
            voltageMeasurement_bypass = voltageMeasurement;//init bypass voltage
     714:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <voltageMeasurement>
     718:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <voltageMeasurement+0x1>
     71c:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     720:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/c_comm.ino:151
            bypassCnt = BYPASS_COUNTER_MAX;
     724:	80 ef       	ldi	r24, 0xF0	; 240
     726:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:152
            green_pattern = GREEN_LED_PATTERN_BYPASS;
     72a:	8c e6       	ldi	r24, 0x6C	; 108
     72c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:153
            bypassEnabled = true;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <bypassEnabled>
     736:	4b cf       	rjmp	.-362    	; 0x5ce <receiveEvent(unsigned char)+0x86>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
}

void bypass_off() {
  targetBypassVoltage = 0;
     738:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <targetBypassVoltage+0x1>
     73c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     740:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     744:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <bypassEnabled>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:157
          } else {
            //Disable
            bypass_off();
            green_pattern = GREEN_LED_PATTERN_STANDARD;
     748:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     74c:	40 cf       	rjmp	.-384    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:165
        break;


      case COMMAND_set_slave_address:
        //Set i2c slave address and write to EEPROM, then reboot
        if (bytesCnt == 1 ) {
     74e:	11 30       	cpi	r17, 0x01	; 1
     750:	09 f0       	breq	.+2      	; 0x754 <receiveEvent(unsigned char)+0x20c>
     752:	3d cf       	rjmp	.-390    	; 0x5ce <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     754:	4f dd       	rcall	.-1378   	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:168
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
     756:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <currentConfig>
     75a:	98 17       	cp	r25, r24
     75c:	09 f4       	brne	.+2      	; 0x760 <receiveEvent(unsigned char)+0x218>
     75e:	37 cf       	rjmp	.-402    	; 0x5ce <receiveEvent(unsigned char)+0x86>
     760:	98 ee       	ldi	r25, 0xE8	; 232
     762:	98 0f       	add	r25, r24
     764:	9d 30       	cpi	r25, 0x0D	; 13
     766:	08 f0       	brcs	.+2      	; 0x76a <receiveEvent(unsigned char)+0x222>
     768:	32 cf       	rjmp	.-412    	; 0x5ce <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:169
            currentConfig.SLAVE_ADDR = newAddress;
     76a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/c_comm.ino:170
            WriteConfigToEEPROM();
     76e:	a6 de       	rcall	.-692    	; 0x4bc <WriteConfigToEEPROM()>
     770:	48 cf       	rjmp	.-368    	; 0x602 <receiveEvent(unsigned char)+0xba>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17

void disable_i2c(){
  USICR = 0; //control register
     772:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
     774:	1e b8       	out	0x0e, r1	; 14
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:177
          }
        }
        break;
      case COMMAND_resetI2c://controller requests this module to reset i2c
        disable_i2c();
        init_i2c();
     776:	6a dd       	rcall	.-1324   	; 0x24c <init_i2c()>
     778:	2a cf       	rjmp	.-428    	; 0x5ce <receiveEvent(unsigned char)+0x86>

0000077a <__vector_5>:
__vector_5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     790:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <millis_timer_millis>
     794:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <millis_timer_millis+0x1>
     798:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <millis_timer_millis+0x2>
     79c:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
     7a0:	30 91 e2 00 	lds	r19, 0x00E2	; 0x8000e2 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:145

    f += FRACT_INC;
     7a4:	26 e0       	ldi	r18, 0x06	; 6
     7a6:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:147

    if (f >= FRACT_MAX)
     7a8:	2d 37       	cpi	r18, 0x7D	; 125
     7aa:	68 f1       	brcs	.+90     	; 0x806 <__vector_5+0x8c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:149
    {
      f -= FRACT_MAX;
     7ac:	29 e8       	ldi	r18, 0x89	; 137
     7ae:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
     7b0:	03 96       	adiw	r24, 0x03	; 3
     7b2:	a1 1d       	adc	r26, r1
     7b4:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     7b6:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:159
    millis_timer_millis = m;
     7ba:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <millis_timer_millis>
     7be:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <millis_timer_millis+0x1>
     7c2:	a0 93 e5 00 	sts	0x00E5, r26	; 0x8000e5 <millis_timer_millis+0x2>
     7c6:	b0 93 e6 00 	sts	0x00E6, r27	; 0x8000e6 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:160
    millis_timer_overflow_count++;
     7ca:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis_timer_overflow_count>
     7ce:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis_timer_overflow_count+0x1>
     7d2:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis_timer_overflow_count+0x2>
     7d6:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis_timer_overflow_count+0x3>
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	a1 1d       	adc	r26, r1
     7de:	b1 1d       	adc	r27, r1
     7e0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <millis_timer_overflow_count>
     7e4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <millis_timer_overflow_count+0x1>
     7e8:	a0 93 e9 00 	sts	0x00E9, r26	; 0x8000e9 <millis_timer_overflow_count+0x2>
     7ec:	b0 93 ea 00 	sts	0x00EA, r27	; 0x8000ea <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:162

  }
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	3f 91       	pop	r19
     7fa:	2f 91       	pop	r18
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     806:	02 96       	adiw	r24, 0x02	; 2
     808:	a1 1d       	adc	r26, r1
     80a:	b1 1d       	adc	r27, r1
     80c:	d4 cf       	rjmp	.-88     	; 0x7b6 <__vector_5+0x3c>

0000080e <__vector_14>:
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:564
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	11 24       	eor	r1, r1
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566

  switch ( overflowState )
     830:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <overflowState>
     834:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <overflowState+0x1>
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	91 05       	cpc	r25, r1
     83c:	09 f4       	brne	.+2      	; 0x840 <__vector_14+0x32>
     83e:	8b c0       	rjmp	.+278    	; 0x956 <__vector_14+0x148>
     840:	b0 f4       	brcc	.+44     	; 0x86e <__vector_14+0x60>
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	a9 f1       	breq	.+106    	; 0x8b0 <__vector_14+0xa2>
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	09 f4       	brne	.+2      	; 0x84c <__vector_14+0x3e>
     84a:	60 c0       	rjmp	.+192    	; 0x90c <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:659
      SET_USI_TO_SEND_ACK( );
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	91 05       	cpc	r25, r1
     872:	09 f4       	brne	.+2      	; 0x876 <__vector_14+0x68>
     874:	7a c0       	rjmp	.+244    	; 0x96a <__vector_14+0x15c>
     876:	08 f4       	brcc	.+2      	; 0x87a <__vector_14+0x6c>
     878:	43 c0       	rjmp	.+134    	; 0x900 <__vector_14+0xf2>
     87a:	05 97       	sbiw	r24, 0x05	; 5
     87c:	39 f7       	brne	.-50     	; 0x84c <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:643
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // check buffer size
      if ( rxCount < TWI_RX_BUFFER_SIZE )
     87e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
     882:	80 31       	cpi	r24, 0x10	; 16
     884:	90 f4       	brcc	.+36     	; 0x8aa <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:645
      {
        rxBuf[ rxHead ] = USIDR;
     886:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <rxHead>
     88a:	8f b1       	in	r24, 0x0f	; 15
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	e6 54       	subi	r30, 0x46	; 70
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:646
        rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
     894:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <rxHead>
     898:	8f 5f       	subi	r24, 0xFF	; 255
     89a:	8f 70       	andi	r24, 0x0F	; 15
     89c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:647
        rxCount++;
     8a0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
     8aa:	84 e0       	ldi	r24, 0x04	; 4
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	21 c0       	rjmp	.+66     	; 0x8f2 <__vector_14+0xe4>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:572
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
     8b0:	8f b1       	in	r24, 0x0f	; 15
     8b2:	88 23       	and	r24, r24
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <__vector_14+0xb4>
     8b6:	8f b1       	in	r24, 0x0f	; 15
     8b8:	86 95       	lsr	r24
     8ba:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <slaveAddress>
     8be:	89 13       	cpse	r24, r25
     8c0:	22 c0       	rjmp	.+68     	; 0x906 <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:574
      {
        if ( USIDR & 0x01 )
     8c2:	78 9b       	sbis	0x0f, 0	; 15
     8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
        {
          USI_REQUEST_CALLBACK();
     8c6:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <usi_onReceiverPtr>
     8ca:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <usi_onReceiverPtr+0x1>
     8ce:	30 97       	sbiw	r30, 0x00	; 0
     8d0:	39 f0       	breq	.+14     	; 0x8e0 <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     8d2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
     8d6:	88 23       	and	r24, r24
     8d8:	19 f0       	breq	.+6      	; 0x8e0 <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     8da:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
     8de:	09 95       	icall
     8e0:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <usi_onRequestPtr>
     8e4:	f0 91 de 00 	lds	r31, 0x00DE	; 0x8000de <usi_onRequestPtr+0x1>
     8e8:	30 97       	sbiw	r30, 0x00	; 0
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__vector_14+0xe0>
     8ec:	09 95       	icall
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:577
          overflowState = USI_SLAVE_SEND_DATA;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
     8f2:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     8f6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
      SET_USI_TO_SEND_ACK( );
     8fa:	1f b8       	out	0x0f, r1	; 15
     8fc:	b8 9a       	sbi	0x17, 0	; 23
     8fe:	33 c0       	rjmp	.+102    	; 0x966 <__vector_14+0x158>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:594
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
     900:	8f b1       	in	r24, 0x0f	; 15
     902:	88 23       	and	r24, r24
     904:	19 f0       	breq	.+6      	; 0x90c <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:617
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
     906:	88 ea       	ldi	r24, 0xA8	; 168
     908:	8d b9       	out	0x0d, r24	; 13
     90a:	1d c0       	rjmp	.+58     	; 0x946 <__vector_14+0x138>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:607

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txCount )
     90c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txCount>
     910:	88 23       	and	r24, r24
     912:	e1 f0       	breq	.+56     	; 0x94c <__vector_14+0x13e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:609
      {
        USIDR = txBuf[ txTail ];
     914:	e0 91 db 00 	lds	r30, 0x00DB	; 0x8000db <txTail>
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	e5 53       	subi	r30, 0x35	; 53
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	80 81       	ld	r24, Z
     920:	8f b9       	out	0x0f, r24	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:610
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
     922:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <txTail>
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	8f 70       	andi	r24, 0x0F	; 15
     92a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:611
        txCount--;
     92e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txCount>
     932:	81 50       	subi	r24, 0x01	; 1
     934:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:620
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     940:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:621
      SET_USI_TO_SEND_DATA( );
     944:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
      SET_USI_TO_READ_DATA( );
     946:	80 e7       	ldi	r24, 0x70	; 112
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
     948:	8e b9       	out	0x0e, r24	; 14
     94a:	80 cf       	rjmp	.-256    	; 0x84c <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:616
        txCount--;
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
     94c:	b8 98       	cbi	0x17, 0	; 23
     94e:	1f b8       	out	0x0f, r1	; 15
     950:	8e e7       	ldi	r24, 0x7E	; 126
     952:	8e b9       	out	0x0e, r24	; 14
     954:	d8 cf       	rjmp	.-80     	; 0x906 <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:627
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     95e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:628
      SET_USI_TO_READ_ACK( );
     962:	b8 98       	cbi	0x17, 0	; 23
     964:	1f b8       	out	0x0f, r1	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
     966:	8e e7       	ldi	r24, 0x7E	; 126
     968:	ef cf       	rjmp	.-34     	; 0x948 <__vector_14+0x13a>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:634
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     972:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635
      SET_USI_TO_READ_DATA( );
     976:	b8 98       	cbi	0x17, 0	; 23
     978:	e6 cf       	rjmp	.-52     	; 0x946 <__vector_14+0x138>

0000097a <__vector_13>:
__vector_13():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:472
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	8f 93       	push	r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:484
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
     986:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <overflowState+0x1>
     98a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:487

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
     98e:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:494
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
     990:	b2 9b       	sbis	0x16, 2	; 22
     992:	02 c0       	rjmp	.+4      	; 0x998 <__vector_13+0x1e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:496
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
     994:	b0 9b       	sbis	0x16, 0	; 22
     996:	fc cf       	rjmp	.-8      	; 0x990 <__vector_13+0x16>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:502
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
     998:	b0 99       	sbic	0x16, 0	; 22
     99a:	0a c0       	rjmp	.+20     	; 0x9b0 <__vector_13+0x36>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:507
  {

    // a Stop Condition did not occur

    USICR =
     99c:	88 ef       	ldi	r24, 0xF8	; 248
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
     99e:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:540
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
     9a0:	80 ef       	ldi	r24, 0xF0	; 240
     9a2:	8e b9       	out	0x0e, r24	; 14
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:549
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
     9a4:	8f 91       	pop	r24
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
     9b0:	88 ea       	ldi	r24, 0xA8	; 168
     9b2:	f5 cf       	rjmp	.-22     	; 0x99e <__vector_13+0x24>

000009b4 <__vector_3>:
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:42
  }
}


ISR(TIMER1_COMPA_vect) // timer interrupt
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/z_main.ino:44

  if (i2cTmr > 0) {
     9d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     9da:	88 23       	and	r24, r24
     9dc:	29 f0       	breq	.+10     	; 0x9e8 <__vector_3+0x34>
/media/D/Data/Powerwall/cellModule/z_main.ino:46
    //Count down loop for requests to see if i2c bus hangs or controller stops talking
    i2cTmr--;
     9de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/z_main.ino:50
  }
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
     9e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9ec:	81 11       	cpse	r24, r1
     9ee:	60 c0       	rjmp	.+192    	; 0xab0 <__vector_3+0xfc>
/media/D/Data/Powerwall/cellModule/z_main.ino:51
    if (ledFlash)  {
     9f0:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <ledFlash>
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__vector_3+0x46>
     9f8:	59 c0       	rjmp	.+178    	; 0xaac <__vector_3+0xf8>
/media/D/Data/Powerwall/cellModule/z_main.ino:52
      ledON();
     9fa:	46 dd       	rcall	.-1396   	; 0x488 <ledON()>
/media/D/Data/Powerwall/cellModule/z_main.ino:54
    }else ledOFF();
    ledFlash = false;
     9fc:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <ledFlash>
/media/D/Data/Powerwall/cellModule/z_main.ino:66
      ledOFF();
    }
  }
  ///////////////////////////////////////////////////
  
  if (bypassEnabled) {// burning energy in resistor
     a00:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <bypassEnabled>
     a04:	88 23       	and	r24, r24
     a06:	09 f4       	brne	.+2      	; 0xa0a <__vector_3+0x56>
     a08:	6a c0       	rjmp	.+212    	; 0xade <__vector_3+0x12a>
/media/D/Data/Powerwall/cellModule/z_main.ino:67
    if(iBurningCounter<65535)iBurningCounter++;//counting burned Wh, reset by reading
     a0a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <iBurningCounter>
     a0e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <iBurningCounter>
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <iBurningCounter>
/media/D/Data/Powerwall/cellModule/z_main.ino:69
    
    if (bypassCnt == 0 && voltageBufferReady) {
     a18:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a1c:	81 11       	cpse	r24, r1
     a1e:	20 c0       	rjmp	.+64     	; 0xa60 <__vector_3+0xac>
     a20:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <voltageBufferReady>
     a24:	88 23       	and	r24, r24
     a26:	e1 f0       	breq	.+56     	; 0xa60 <__vector_3+0xac>
/media/D/Data/Powerwall/cellModule/z_main.ino:71
      //We are in bypass and just filled in whole buffer with voltage measurements
      voltageMeasurement_bypass = getVoltageMeasurement();
     a28:	38 dc       	rcall	.-1936   	; 0x29a <getVoltageMeasurement()>
     a2a:	53 d2       	rcall	.+1190   	; 0xed2 <__fixunssfsi>
     a2c:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     a30:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/z_main.ino:73

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
     a34:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <targetBypassVoltage>
     a38:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <targetBypassVoltage+0x1>
     a3c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <voltageMeasurement_bypass>
     a40:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	08 f4       	brcc	.+2      	; 0xa4c <__vector_3+0x98>
     a4a:	45 c0       	rjmp	.+138    	; 0xad6 <__vector_3+0x122>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     a4c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <targetBypassVoltage+0x1>
     a50:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     a54:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     a58:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <bypassEnabled>
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:75
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
     a5c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:81
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
      }
    }

    if (bypassCnt > 0)
     a60:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a64:	88 23       	and	r24, r24
     a66:	81 f0       	breq	.+32     	; 0xa88 <__vector_3+0xd4>
/media/D/Data/Powerwall/cellModule/z_main.ino:84
    {
      //We are in ACTIVE BYPASS mode -> BURNING ENERGY in resistor
      bypassCnt--;
     a68:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a6c:	81 50       	subi	r24, 0x01	; 1
     a6e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/z_main.ino:85
      digitalWrite(PB4, HIGH);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	5f db       	rcall	.-2370   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:87

      if (bypassCnt == 0)
     a76:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a7a:	81 11       	cpse	r24, r1
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <__vector_3+0xd4>
/media/D/Data/Powerwall/cellModule/z_main.ino:91
      {
        //We have just finished this timed ACTIVE BYPASS mode, disable resistor
        //and measure resting voltage now before possible re-enable.
        digitalWrite(PB4, LOW);
     a7e:	5a db       	rcall	.-2380   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:94

        //Reset voltage ADC buffer
        voltageBufIdx = 0;//we want whole one cycle
     a80:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/z_main.ino:95
        voltageBufferReady = false;
     a84:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/z_main.ino:104
  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
  }

  //trigger ADC reading
  ADCSRA |= (1 << ADSC);
     a88:	36 9a       	sbi	0x06, 6	; 6
/media/D/Data/Powerwall/cellModule/z_main.ino:105
}
     a8a:	ff 91       	pop	r31
     a8c:	ef 91       	pop	r30
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	7f 91       	pop	r23
     a98:	6f 91       	pop	r22
     a9a:	5f 91       	pop	r21
     a9c:	4f 91       	pop	r20
     a9e:	3f 91       	pop	r19
     aa0:	2f 91       	pop	r18
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti
/media/D/Data/Powerwall/cellModule/z_main.ino:53
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
    if (ledFlash)  {
      ledON();
    }else ledOFF();
     aac:	ea dc       	rcall	.-1580   	; 0x482 <ledOFF()>
     aae:	a6 cf       	rjmp	.-180    	; 0x9fc <__vector_3+0x48>
/media/D/Data/Powerwall/cellModule/z_main.ino:56
    ledFlash = false;
  } else {
    green_pattern = (byte)(green_pattern << 1) | (green_pattern >> 7);//rotate pattern left
     ab0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ab4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ab8:	99 0f       	add	r25, r25
     aba:	88 1f       	adc	r24, r24
     abc:	88 27       	eor	r24, r24
     abe:	88 1f       	adc	r24, r24
     ac0:	89 2b       	or	r24, r25
     ac2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:58

    if (green_pattern & 0x01) {
     ac6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     aca:	80 ff       	sbrs	r24, 0
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <__vector_3+0x11e>
/media/D/Data/Powerwall/cellModule/z_main.ino:59
      ledON();
     ace:	dc dc       	rcall	.-1608   	; 0x488 <ledON()>
     ad0:	97 cf       	rjmp	.-210    	; 0xa00 <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:61
    } else {
      ledOFF();
     ad2:	d7 dc       	rcall	.-1618   	; 0x482 <ledOFF()>
     ad4:	95 cf       	rjmp	.-214    	; 0xa00 <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:77

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
     ad6:	80 ef       	ldi	r24, 0xF0	; 240
     ad8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <bypassCnt>
     adc:	c1 cf       	rjmp	.-126    	; 0xa60 <__vector_3+0xac>
/media/D/Data/Powerwall/cellModule/z_main.ino:100
        voltageBufferReady = false;
      }
    }

  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	29 db       	rcall	.-2478   	; 0x134 <digitalWrite.constprop.1>
     ae2:	d2 cf       	rjmp	.-92     	; 0xa88 <__vector_3+0xd4>

00000ae4 <__vector_8>:
__vector_8():
/media/D/Data/Powerwall/cellModule/d_adc.ino:16
// changed MUX
// skipping this ADC reading
// temperature = ADC; + changing MUX + next reading will be skipped


ISR(ADC_vect) {
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	ef 93       	push	r30
     af6:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/d_adc.ino:21
  
  //uint8_t adcl = ADCL;
  //uint16_t value = ADCH << 8 | adcl;

  uint16_t value = ADCW;
     af8:	84 b1       	in	r24, 0x04	; 4
     afa:	95 b1       	in	r25, 0x05	; 5
/media/D/Data/Powerwall/cellModule/d_adc.ino:24

  //If we skip this ADC reading, quit ISR here
  if (skipNextADC) {
     afc:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <skipNextADC>
     b00:	22 23       	and	r18, r18
     b02:	61 f0       	breq	.+24     	; 0xb1c <__vector_8+0x38>
/media/D/Data/Powerwall/cellModule/d_adc.ino:25
    skipNextADC = false;
     b04:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <skipNextADC>
/media/D/Data/Powerwall/cellModule/d_adc.ino:71
      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
    }
  }

}
     b08:	ff 91       	pop	r31
     b0a:	ef 91       	pop	r30
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	2f 91       	pop	r18
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti
/media/D/Data/Powerwall/cellModule/d_adc.ino:29
  if (skipNextADC) {
    skipNextADC = false;
    return;
  }

  if (tempReadingCnt == TEMP_READING_LOOP_FREQ ) {
     b1c:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <tempReadingCnt>
     b20:	20 31       	cpi	r18, 0x10	; 16
     b22:	61 f4       	brne	.+24     	; 0xb3c <__vector_8+0x58>
/media/D/Data/Powerwall/cellModule/d_adc.ino:34
    //Use A0 (RESET PIN) to act as an analogue input
    //note that we cannot take the pin below 1.4V or the CPU resets
    //so we use the top half between 1.6V and 2.56V (voltage reference)
    //we avoid switching references (VCC vs 2.56V) so the capacitors dont have to keep draining and recharging
    tempReadingCnt = 0;
     b24:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:37

    //We reduce the value by 512 as we have a DC offset we need to remove
    tempSensorValue = value;
     b28:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <tempSensorValue+0x1>
     b2c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <tempSensorValue>
/media/D/Data/Powerwall/cellModule/d_adc.ino:40

    // use ADC3 for input for next reading (voltage)
    ADMUX = B10010011;
     b30:	83 e9       	ldi	r24, 0x93	; 147
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
    tempReadingCnt++;
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     b32:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/d_adc.ino:67

      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <skipNextADC>
     b3a:	e6 cf       	rjmp	.-52     	; 0xb08 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:48
    skipNextADC = true;

  } else {

    //Populate the rolling buffer with values from the ADC
    last_raw_adc = value;
     b3c:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <last_raw_adc+0x1>
     b40:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <last_raw_adc>
/media/D/Data/Powerwall/cellModule/d_adc.ino:49
    voltageBuff[voltageBufIdx] = value;
     b44:	e0 91 eb 00 	lds	r30, 0x00EB	; 0x8000eb <voltageBufIdx>
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	e3 57       	subi	r30, 0x73	; 115
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
/media/D/Data/Powerwall/cellModule/d_adc.ino:51

    voltageBufIdx++;
     b56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <voltageBufIdx>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:53

    if (voltageBufIdx == OVERSAMPLE_LOOP) {
     b60:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <voltageBufIdx>
     b64:	80 31       	cpi	r24, 0x10	; 16
     b66:	29 f4       	brne	.+10     	; 0xb72 <__vector_8+0x8e>
/media/D/Data/Powerwall/cellModule/d_adc.ino:54
      voltageBufIdx = 0;
     b68:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:55
      voltageBufferReady = 1;// indicates valid data, used in main logic
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/d_adc.ino:59
    }


    tempReadingCnt++;
     b72:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempReadingCnt>
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:60
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
     b7c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempReadingCnt>
     b80:	80 31       	cpi	r24, 0x10	; 16
     b82:	11 f6       	brne	.-124    	; 0xb08 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     b84:	80 e9       	ldi	r24, 0x90	; 144
     b86:	d5 cf       	rjmp	.-86     	; 0xb32 <__vector_8+0x4e>

00000b88 <Reboot()>:
_Z6Rebootv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:62
void factory_default() {
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, 0);
}

void Reboot() {
  TCCR1 = 0;
     b88:	10 be       	out	0x30, r1	; 48
/media/D/Data/Powerwall/cellModule/b_functions.ino:63
  TIMSK |= (1 << OCIE1A); //Disable timer1
     b8a:	89 b7       	in	r24, 0x39	; 57
     b8c:	80 64       	ori	r24, 0x40	; 64
     b8e:	89 bf       	out	0x39, r24	; 57
/media/D/Data/Powerwall/cellModule/b_functions.ino:66

  //Now power down loop until the watchdog timer kicks a reset
  ledON();
     b90:	7b dc       	rcall	.-1802   	; 0x488 <ledON()>
     b92:	ff cf       	rjmp	.-2      	; 0xb92 <Reboot()+0xa>

00000b94 <main>:
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	65 97       	sbiw	r28, 0x15	; 21
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	8a bd       	out	0x2a, r24	; 42
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     bac:	83 bf       	out	0x33, r24	; 51
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     bae:	78 94       	sei
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:933

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     bb0:	89 b7       	in	r24, 0x39	; 57
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:594
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	8c bd       	out	0x2c, r24	; 44
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:595
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	8d bd       	out	0x2d, r24	; 45
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:596
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     bbe:	87 ec       	ldi	r24, 0xC7	; 199
     bc0:	80 bf       	out	0x30, r24	; 48
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     bc2:	86 b1       	in	r24, 0x06	; 6
     bc4:	88 77       	andi	r24, 0x78	; 120
     bc6:	86 68       	ori	r24, 0x86	; 134
     bc8:	86 b9       	out	0x06, r24	; 6
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     bca:	37 9a       	sbi	0x06, 7	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:23
}

void setup() {
  //Must be first line of setup()
  MCUSR &= ~(1 << WDRF); // reset status flag
     bcc:	84 b7       	in	r24, 0x34	; 52
     bce:	87 7f       	andi	r24, 0xF7	; 247
     bd0:	84 bf       	out	0x34, r24	; 52
wdt_disable():
/home/zz/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	a8 95       	wdr
     bd8:	81 b5       	in	r24, 0x21	; 33
     bda:	88 61       	ori	r24, 0x18	; 24
     bdc:	81 bd       	out	0x21, r24	; 33
     bde:	11 bc       	out	0x21, r1	; 33
     be0:	0f be       	out	0x3f, r0	; 63
pinMode():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:35
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     be2:	e4 e3       	ldi	r30, 0x34	; 52
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     be8:	ee e2       	ldi	r30, 0x2E	; 46
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	84 91       	lpm	r24, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     bee:	88 23       	and	r24, r24
     bf0:	99 f0       	breq	.+38     	; 0xc18 <main+0x84>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	fc 01       	movw	r30, r24
     bfa:	e2 5e       	subi	r30, 0xE2	; 226
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	a5 91       	lpm	r26, Z+
     c00:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     c02:	fc 01       	movw	r30, r24
     c04:	ec 5d       	subi	r30, 0xDC	; 220
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	85 91       	lpm	r24, Z+
     c0a:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     c0c:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:58
                cli();
     c0e:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:59
    *reg |= bit;
     c10:	ec 91       	ld	r30, X
     c12:	e2 2b       	or	r30, r18
     c14:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
     c16:	8f bf       	out	0x3f, r24	; 63
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:40
    DDRB &= ~(1 << DDB5);
    PORTB &= ~(1 << PB5);
  */

  pinMode(PB4, OUTPUT); //bypass - burning resistor
  digitalWrite(PB4, LOW);
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	8c da       	rcall	.-2792   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/e_setup.ino:42

  ledON();
     c1c:	35 dc       	rcall	.-1942   	; 0x488 <ledON()>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:278
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     c1e:	c4 da       	rcall	.-2680   	; 0x1a8 <micros>
     c20:	8b 01       	movw	r16, r22
     c22:	84 ef       	ldi	r24, 0xF4	; 244
     c24:	c8 2e       	mov	r12, r24
     c26:	dd 24       	eor	r13, r13
     c28:	d3 94       	inc	r13
     c2a:	e1 2c       	mov	r14, r1
     c2c:	f1 2c       	mov	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     c2e:	bc da       	rcall	.-2696   	; 0x1a8 <micros>
     c30:	60 1b       	sub	r22, r16
     c32:	71 0b       	sbc	r23, r17
     c34:	68 3e       	cpi	r22, 0xE8	; 232
     c36:	73 40       	sbci	r23, 0x03	; 3
     c38:	08 f4       	brcc	.+2      	; 0xc3c <main+0xa8>
     c3a:	bb c0       	rjmp	.+374    	; 0xdb2 <main+0x21e>
     c3c:	c1 14       	cp	r12, r1
     c3e:	d1 04       	cpc	r13, r1
     c40:	e1 04       	cpc	r14, r1
     c42:	f1 04       	cpc	r15, r1
     c44:	09 f0       	breq	.+2      	; 0xc48 <main+0xb4>
     c46:	ad c0       	rjmp	.+346    	; 0xda2 <main+0x20e>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:44
  delay(500);
  ledOFF();
     c48:	1c dc       	rcall	.-1992   	; 0x482 <ledOFF()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:46

  green_pattern = GREEN_LED_PATTERN_STANDARD;
     c4a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:37
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
}

bool LoadConfigFromEEPROM() {
  cell_module_config restoredConfig;
     c4e:	81 e1       	ldi	r24, 0x11	; 17
     c50:	e3 e7       	ldi	r30, 0x73	; 115
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	de 01       	movw	r26, r28
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	01 90       	ld	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	8a 95       	dec	r24
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <main+0xc4>
     c60:	fe 01       	movw	r30, r28
     c62:	31 96       	adiw	r30, 0x01	; 1
     c64:	7f 01       	movw	r14, r30
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     c66:	04 e1       	ldi	r16, 0x14	; 20
     c68:	10 e0       	ldi	r17, 0x00	; 0
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c6a:	c8 01       	movw	r24, r16
     c6c:	b3 d0       	rcall	.+358    	; 0xdd4 <eeprom_read_byte>
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c6e:	f7 01       	movw	r30, r14
     c70:	81 93       	st	Z+, r24
     c72:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     c74:	0f 5f       	subi	r16, 0xFF	; 255
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c78:	05 32       	cpi	r16, 0x25	; 37
     c7a:	11 05       	cpc	r17, r1
     c7c:	b1 f7       	brne	.-20     	; 0xc6a <main+0xd6>
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	a8 d0       	rcall	.+336    	; 0xdd4 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c84:	8a 8b       	std	Y+18, r24	; 0x12
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a4 d0       	rcall	.+328    	; 0xdd4 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c8c:	8b 8b       	std	Y+19, r24	; 0x13
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a0 d0       	rcall	.+320    	; 0xdd4 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c94:	8c 8b       	std	Y+20, r24	; 0x14
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9c d0       	rcall	.+312    	; 0xdd4 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c9c:	8d 8b       	std	Y+21, r24	; 0x15
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:44

  EEPROM.get(EEPROM_CONFIG_ADDRESS, restoredConfig);
  EEPROM.get(EEPROM_CHECKSUM_ADDRESS, existingChecksum);

  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	e8 d9       	rcall	.-3120   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:46

  if (checksum == existingChecksum) {
     ca4:	0a 89       	ldd	r16, Y+18	; 0x12
     ca6:	1b 89       	ldd	r17, Y+19	; 0x13
     ca8:	2c 89       	ldd	r18, Y+20	; 0x14
     caa:	3d 89       	ldd	r19, Y+21	; 0x15
     cac:	60 17       	cp	r22, r16
     cae:	71 07       	cpc	r23, r17
     cb0:	82 07       	cpc	r24, r18
     cb2:	93 07       	cpc	r25, r19
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <main+0x124>
     cb6:	84 c0       	rjmp	.+264    	; 0xdc0 <main+0x22c>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:50
    
  //Load our EEPROM configuration
  if (!LoadConfigFromEEPROM()) {
    badConfiguration = true;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <badConfiguration>
/media/D/Data/Powerwall/cellModule/e_setup.ino:52
  }
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
     cbe:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <badConfiguration>
     cc2:	81 11       	cpse	r24, r1
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <main+0x13a>
     cc6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
     cca:	85 31       	cpi	r24, 0x15	; 21
     ccc:	31 f4       	brne	.+12     	; 0xcda <main+0x146>
/media/D/Data/Powerwall/cellModule/e_setup.ino:53
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
     cce:	8f ee       	ldi	r24, 0xEF	; 239
     cd0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/e_setup.ino:54
    currentConfig.SLAVE_ADDR = DEFAULT_SLAVE_ADDR;//need to be here, compiler probably doesn't init struct properly
     cd4:	85 e1       	ldi	r24, 0x15	; 21
     cd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/e_setup.ino:57
  }

  cli();//stop interrupts
     cda:	f8 94       	cli
/media/D/Data/Powerwall/cellModule/e_setup.ino:59

  voltageBufIdx = 0;
     cdc:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <voltageBufIdx>
initTimer1():
/media/D/Data/Powerwall/cellModule/e_setup.ino:5
void initADC();

static inline void initTimer1(void)
{
  TCCR1 |= (1 << CTC1);  // clear timer on compare match
     ce0:	80 b7       	in	r24, 0x30	; 48
     ce2:	80 68       	ori	r24, 0x80	; 128
     ce4:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:6
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
     ce6:	80 b7       	in	r24, 0x30	; 48
     ce8:	8f 60       	ori	r24, 0x0F	; 15
     cea:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:7
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	8d bd       	out	0x2d, r24	; 45
/media/D/Data/Powerwall/cellModule/e_setup.ino:8
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
     cf0:	89 b7       	in	r24, 0x39	; 57
     cf2:	80 64       	ori	r24, 0x40	; 64
     cf4:	89 bf       	out	0x39, r24	; 57
initADC():
/media/D/Data/Powerwall/cellModule/e_setup.ino:112

  //REFS1 REFS0 ADLAR REFS2 MUX3 MUX2 MUX1 MUX0
  //Internal 2.56V Voltage Reference without external bypass capacitor, disconnected from PB0 (AREF)
  //ADLAR =0 and PB3 (B0011) for INPUT (A3)
  //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
  ADMUX = B10010011;
     cf6:	83 e9       	ldi	r24, 0x93	; 147
     cf8:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/e_setup.ino:135
      (1 << ADPS0);      // set prescaler bit 0
    #endif
  */
  //#if (F_CPU == 8000000)
  //8MHZ clock so set prescaler to 64 (B110)
  ADCSRA =
     cfa:	8e e8       	ldi	r24, 0x8E	; 142
     cfc:	86 b9       	out	0x06, r24	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:66
  initTimer1();
  initADC();

  // WDTCSR configuration:     WDIE = 1: Interrupt Enable     WDE = 1 :Reset Enable
  // Enter Watchdog Configuration mode:
  WDTCR |= (1 << WDCE) | (1 << WDE);
     cfe:	81 b5       	in	r24, 0x21	; 33
     d00:	88 61       	ori	r24, 0x18	; 24
     d02:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:69

  // Set Watchdog settings - 4000ms timeout
  WDTCR = (1 << WDIE) | (1 << WDE) | (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (0 << WDP0);
     d04:	88 e6       	ldi	r24, 0x68	; 104
     d06:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:72

  // Enable Global Interrupts
  sei();
     d08:	78 94       	sei
/media/D/Data/Powerwall/cellModule/e_setup.ino:74

  init_i2c();
     d0a:	a0 da       	rcall	.-2752   	; 0x24c <init_i2c()>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:25
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests

    green_pattern = GREEN_LED_PANIC;
     d0c:	15 e5       	ldi	r17, 0x55	; 85
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d0e:	01 e0       	ldi	r16, 0x01	; 1
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:3

void loop() {
  wdt_reset();
     d10:	a8 95       	wdr
/media/D/Data/Powerwall/cellModule/z_main.ino:6

  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
     d12:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <badConfiguration>
     d16:	81 11       	cpse	r24, r1
     d18:	28 c0       	rjmp	.+80     	; 0xd6a <main+0x1d6>
     d1a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
     d1e:	85 31       	cpi	r24, 0x15	; 21
     d20:	21 f1       	breq	.+72     	; 0xd6a <main+0x1d6>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:23
     */
  TinyWireS_stop_check();
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
     d22:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     d26:	81 11       	cpse	r24, r1
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <main+0x1be>
     d2a:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <inPanicMode>
     d2e:	81 11       	cpse	r24, r1
     d30:	10 c0       	rjmp	.+32     	; 0xd52 <main+0x1be>
/media/D/Data/Powerwall/cellModule/z_main.ino:25

    green_pattern = GREEN_LED_PANIC;
     d32:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d36:	00 93 f5 00 	sts	0x00F5, r16	; 0x8000f5 <inPanicMode>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}

void disable_i2c(){
  USICR = 0; //control register
     d3a:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
     d3c:	1e b8       	out	0x0e, r1	; 14
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:29
    //Try resetting the i2c bus
    disable_i2c();
    init_i2c();
     d3e:	86 da       	rcall	.-2804   	; 0x24c <init_i2c()>
/media/D/Data/Powerwall/cellModule/z_main.ino:31

    error_counter++;
     d40:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <error_counter>
     d44:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <error_counter+0x1>
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <error_counter+0x1>
     d4e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <error_counter>
/media/D/Data/Powerwall/cellModule/z_main.ino:34
  }

  if (i2cTmr > 0 && inPanicMode == true) {//return from panic mode
     d52:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     d56:	88 23       	and	r24, r24
     d58:	41 f0       	breq	.+16     	; 0xd6a <main+0x1d6>
     d5a:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <inPanicMode>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	21 f4       	brne	.+8      	; 0xd6a <main+0x1d6>
/media/D/Data/Powerwall/cellModule/z_main.ino:35
    green_pattern = GREEN_LED_PATTERN_STANDARD;
     d62:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:36
    inPanicMode = false;
     d66:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <inPanicMode>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:10
  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
    HandlePanicMode();//reset i2c bus if no communication going on for some time
  }

  if(inPanicMode)
     d6a:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <inPanicMode>
     d6e:	88 23       	and	r24, r24
     d70:	41 f0       	breq	.+16     	; 0xd82 <main+0x1ee>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     d72:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <targetBypassVoltage+0x1>
     d76:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     d7a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     d7e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <bypassEnabled>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:64
  usi_onRequestPtr = function;
}

void TinyWireS_stop_check()
{
    if (!usi_onReceiverPtr)
     d82:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <usi_onReceiverPtr>
     d86:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <usi_onReceiverPtr+0x1>
     d8a:	30 97       	sbiw	r30, 0x00	; 0
     d8c:	09 f4       	brne	.+2      	; 0xd90 <main+0x1fc>
     d8e:	c0 cf       	rjmp	.-128    	; 0xd10 <main+0x17c>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:69
    {
        // no onReceive callback, nothing to do...
        return;
    }
    if (!(USISR & ( 1 << USIPF )))
     d90:	75 9b       	sbis	0x0e, 5	; 14
     d92:	be cf       	rjmp	.-132    	; 0xd10 <main+0x17c>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     d94:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:75
    {
        // Stop not detected
        return;
    }
    uint8_t amount = usiTwiAmountDataInReceiveBuffer();
    if (amount == 0)
     d98:	88 23       	and	r24, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <main+0x20a>
     d9c:	b9 cf       	rjmp	.-142    	; 0xd10 <main+0x17c>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:80
    {
        // no data in buffer
        return;
    }
    usi_onReceiverPtr(amount);
     d9e:	09 95       	icall
     da0:	b7 cf       	rjmp	.-146    	; 0xd10 <main+0x17c>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:283
        ms--;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	c8 1a       	sub	r12, r24
     da6:	d1 08       	sbc	r13, r1
     da8:	e1 08       	sbc	r14, r1
     daa:	f1 08       	sbc	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:284
        start += 1000;
     dac:	08 51       	subi	r16, 0x18	; 24
     dae:	1c 4f       	sbci	r17, 0xFC	; 252
     db0:	3e cf       	rjmp	.-388    	; 0xc2e <main+0x9a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     db2:	c1 14       	cp	r12, r1
     db4:	d1 04       	cpc	r13, r1
     db6:	e1 04       	cpc	r14, r1
     db8:	f1 04       	cpc	r15, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <main+0x22a>
     dbc:	38 cf       	rjmp	.-400    	; 0xc2e <main+0x9a>
     dbe:	44 cf       	rjmp	.-376    	; 0xc48 <main+0xb4>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:48
  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));

  if (checksum == existingChecksum) {
    //Clone the config into our global variable and return all OK
    memcpy(&currentConfig, &restoredConfig, sizeof(cell_module_config));
     dc0:	81 e1       	ldi	r24, 0x11	; 17
     dc2:	fe 01       	movw	r30, r28
     dc4:	31 96       	adiw	r30, 0x01	; 1
     dc6:	a2 e6       	ldi	r26, 0x62	; 98
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	01 90       	ld	r0, Z+
     dcc:	0d 92       	st	X+, r0
     dce:	8a 95       	dec	r24
     dd0:	e1 f7       	brne	.-8      	; 0xdca <main+0x236>
     dd2:	75 cf       	rjmp	.-278    	; 0xcbe <main+0x12a>

00000dd4 <eeprom_read_byte>:
eeprom_read_byte():
     dd4:	e1 99       	sbic	0x1c, 1	; 28
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <eeprom_read_byte>
     dd8:	9f bb       	out	0x1f, r25	; 31
     dda:	8e bb       	out	0x1e, r24	; 30
     ddc:	e0 9a       	sbi	0x1c, 0	; 28
     dde:	99 27       	eor	r25, r25
     de0:	8d b3       	in	r24, 0x1d	; 29
     de2:	08 95       	ret

00000de4 <eeprom_write_byte>:
eeprom_write_byte():
     de4:	26 2f       	mov	r18, r22

00000de6 <eeprom_write_r18>:
     de6:	e1 99       	sbic	0x1c, 1	; 28
     de8:	fe cf       	rjmp	.-4      	; 0xde6 <eeprom_write_r18>
     dea:	1c ba       	out	0x1c, r1	; 28
     dec:	9f bb       	out	0x1f, r25	; 31
     dee:	8e bb       	out	0x1e, r24	; 30
     df0:	2d bb       	out	0x1d, r18	; 29
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	e2 9a       	sbi	0x1c, 2	; 28
     df8:	e1 9a       	sbi	0x1c, 1	; 28
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	08 95       	ret

00000e00 <__subsf3>:
__subsf3():
     e00:	50 58       	subi	r21, 0x80	; 128

00000e02 <__addsf3>:
     e02:	bb 27       	eor	r27, r27
     e04:	aa 27       	eor	r26, r26
     e06:	0e d0       	rcall	.+28     	; 0xe24 <__addsf3x>
     e08:	08 c1       	rjmp	.+528    	; 0x101a <__fp_round>
__addsf3():
     e0a:	f9 d0       	rcall	.+498    	; 0xffe <__fp_pscA>
     e0c:	30 f0       	brcs	.+12     	; 0xe1a <__addsf3+0x18>
     e0e:	fe d0       	rcall	.+508    	; 0x100c <__fp_pscB>
     e10:	20 f0       	brcs	.+8      	; 0xe1a <__addsf3+0x18>
     e12:	31 f4       	brne	.+12     	; 0xe20 <__addsf3+0x1e>
     e14:	9f 3f       	cpi	r25, 0xFF	; 255
     e16:	11 f4       	brne	.+4      	; 0xe1c <__addsf3+0x1a>
     e18:	1e f4       	brtc	.+6      	; 0xe20 <__addsf3+0x1e>
     e1a:	ee c0       	rjmp	.+476    	; 0xff8 <__fp_nan>
     e1c:	0e f4       	brtc	.+2      	; 0xe20 <__addsf3+0x1e>
     e1e:	e0 95       	com	r30
     e20:	e7 fb       	bst	r30, 7
     e22:	e4 c0       	rjmp	.+456    	; 0xfec <__fp_inf>

00000e24 <__addsf3x>:
__addsf3x():
     e24:	e9 2f       	mov	r30, r25
     e26:	0a d1       	rcall	.+532    	; 0x103c <__fp_split3>
     e28:	80 f3       	brcs	.-32     	; 0xe0a <__addsf3+0x8>
     e2a:	ba 17       	cp	r27, r26
     e2c:	62 07       	cpc	r22, r18
     e2e:	73 07       	cpc	r23, r19
     e30:	84 07       	cpc	r24, r20
     e32:	95 07       	cpc	r25, r21
     e34:	18 f0       	brcs	.+6      	; 0xe3c <__addsf3x+0x18>
     e36:	71 f4       	brne	.+28     	; 0xe54 <__addsf3x+0x30>
     e38:	9e f5       	brtc	.+102    	; 0xea0 <__addsf3x+0x7c>
     e3a:	22 c1       	rjmp	.+580    	; 0x1080 <__fp_zero>
     e3c:	0e f4       	brtc	.+2      	; 0xe40 <__addsf3x+0x1c>
     e3e:	e0 95       	com	r30
     e40:	0b 2e       	mov	r0, r27
     e42:	ba 2f       	mov	r27, r26
     e44:	a0 2d       	mov	r26, r0
     e46:	0b 01       	movw	r0, r22
     e48:	b9 01       	movw	r22, r18
     e4a:	90 01       	movw	r18, r0
     e4c:	0c 01       	movw	r0, r24
     e4e:	ca 01       	movw	r24, r20
     e50:	a0 01       	movw	r20, r0
     e52:	11 24       	eor	r1, r1
     e54:	ff 27       	eor	r31, r31
     e56:	59 1b       	sub	r21, r25
     e58:	99 f0       	breq	.+38     	; 0xe80 <__addsf3x+0x5c>
     e5a:	59 3f       	cpi	r21, 0xF9	; 249
     e5c:	50 f4       	brcc	.+20     	; 0xe72 <__addsf3x+0x4e>
     e5e:	50 3e       	cpi	r21, 0xE0	; 224
     e60:	68 f1       	brcs	.+90     	; 0xebc <__addsf3x+0x98>
     e62:	1a 16       	cp	r1, r26
     e64:	f0 40       	sbci	r31, 0x00	; 0
     e66:	a2 2f       	mov	r26, r18
     e68:	23 2f       	mov	r18, r19
     e6a:	34 2f       	mov	r19, r20
     e6c:	44 27       	eor	r20, r20
     e6e:	58 5f       	subi	r21, 0xF8	; 248
     e70:	f3 cf       	rjmp	.-26     	; 0xe58 <__addsf3x+0x34>
     e72:	46 95       	lsr	r20
     e74:	37 95       	ror	r19
     e76:	27 95       	ror	r18
     e78:	a7 95       	ror	r26
     e7a:	f0 40       	sbci	r31, 0x00	; 0
     e7c:	53 95       	inc	r21
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__addsf3x+0x4e>
     e80:	7e f4       	brtc	.+30     	; 0xea0 <__addsf3x+0x7c>
     e82:	1f 16       	cp	r1, r31
     e84:	ba 0b       	sbc	r27, r26
     e86:	62 0b       	sbc	r22, r18
     e88:	73 0b       	sbc	r23, r19
     e8a:	84 0b       	sbc	r24, r20
     e8c:	ba f0       	brmi	.+46     	; 0xebc <__addsf3x+0x98>
     e8e:	91 50       	subi	r25, 0x01	; 1
     e90:	a1 f0       	breq	.+40     	; 0xeba <__addsf3x+0x96>
     e92:	ff 0f       	add	r31, r31
     e94:	bb 1f       	adc	r27, r27
     e96:	66 1f       	adc	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	c2 f7       	brpl	.-16     	; 0xe8e <__addsf3x+0x6a>
     e9e:	0e c0       	rjmp	.+28     	; 0xebc <__addsf3x+0x98>
     ea0:	ba 0f       	add	r27, r26
     ea2:	62 1f       	adc	r22, r18
     ea4:	73 1f       	adc	r23, r19
     ea6:	84 1f       	adc	r24, r20
     ea8:	48 f4       	brcc	.+18     	; 0xebc <__addsf3x+0x98>
     eaa:	87 95       	ror	r24
     eac:	77 95       	ror	r23
     eae:	67 95       	ror	r22
     eb0:	b7 95       	ror	r27
     eb2:	f7 95       	ror	r31
     eb4:	9e 3f       	cpi	r25, 0xFE	; 254
     eb6:	08 f0       	brcs	.+2      	; 0xeba <__addsf3x+0x96>
     eb8:	b3 cf       	rjmp	.-154    	; 0xe20 <__addsf3+0x1e>
     eba:	93 95       	inc	r25
     ebc:	88 0f       	add	r24, r24
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <__addsf3x+0x9e>
     ec0:	99 27       	eor	r25, r25
     ec2:	ee 0f       	add	r30, r30
     ec4:	97 95       	ror	r25
     ec6:	87 95       	ror	r24
     ec8:	08 95       	ret

00000eca <__cmpsf2>:
     eca:	6c d0       	rcall	.+216    	; 0xfa4 <__fp_cmp>
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <__cmpsf2+0x6>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	08 95       	ret

00000ed2 <__fixunssfsi>:
     ed2:	bc d0       	rcall	.+376    	; 0x104c <__fp_splitA>
     ed4:	88 f0       	brcs	.+34     	; 0xef8 <__fixunssfsi+0x26>
     ed6:	9f 57       	subi	r25, 0x7F	; 127
     ed8:	90 f0       	brcs	.+36     	; 0xefe <__fixunssfsi+0x2c>
     eda:	b9 2f       	mov	r27, r25
     edc:	99 27       	eor	r25, r25
     ede:	b7 51       	subi	r27, 0x17	; 23
     ee0:	a0 f0       	brcs	.+40     	; 0xf0a <__fixunssfsi+0x38>
     ee2:	d1 f0       	breq	.+52     	; 0xf18 <__fixunssfsi+0x46>
__fixunssfsi():
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	1a f0       	brmi	.+6      	; 0xef4 <__fixunssfsi+0x22>
     eee:	ba 95       	dec	r27
     ef0:	c9 f7       	brne	.-14     	; 0xee4 <__fixunssfsi+0x12>
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <__fixunssfsi+0x46>
     ef4:	b1 30       	cpi	r27, 0x01	; 1
     ef6:	81 f0       	breq	.+32     	; 0xf18 <__fixunssfsi+0x46>
     ef8:	c3 d0       	rcall	.+390    	; 0x1080 <__fp_zero>
     efa:	b1 e0       	ldi	r27, 0x01	; 1
     efc:	08 95       	ret
     efe:	c0 c0       	rjmp	.+384    	; 0x1080 <__fp_zero>
     f00:	67 2f       	mov	r22, r23
     f02:	78 2f       	mov	r23, r24
     f04:	88 27       	eor	r24, r24
     f06:	b8 5f       	subi	r27, 0xF8	; 248
     f08:	39 f0       	breq	.+14     	; 0xf18 <__fixunssfsi+0x46>
     f0a:	b9 3f       	cpi	r27, 0xF9	; 249
     f0c:	cc f3       	brlt	.-14     	; 0xf00 <__fixunssfsi+0x2e>
     f0e:	86 95       	lsr	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b3 95       	inc	r27
     f16:	d9 f7       	brne	.-10     	; 0xf0e <__fixunssfsi+0x3c>
     f18:	3e f4       	brtc	.+14     	; 0xf28 <__fixunssfsi+0x56>
     f1a:	90 95       	com	r25
     f1c:	80 95       	com	r24
     f1e:	70 95       	com	r23
     f20:	61 95       	neg	r22
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	08 95       	ret

00000f2a <__floatunsisf>:
__floatunsisf():
     f2a:	e8 94       	clt
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <__floatsisf+0x12>

00000f2e <__floatsisf>:
     f2e:	97 fb       	bst	r25, 7
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__floatsisf+0x12>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	99 23       	and	r25, r25
     f42:	a9 f0       	breq	.+42     	; 0xf6e <__floatsisf+0x40>
     f44:	f9 2f       	mov	r31, r25
     f46:	96 e9       	ldi	r25, 0x96	; 150
     f48:	bb 27       	eor	r27, r27
     f4a:	93 95       	inc	r25
     f4c:	f6 95       	lsr	r31
     f4e:	87 95       	ror	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f1 11       	cpse	r31, r1
     f58:	f8 cf       	rjmp	.-16     	; 0xf4a <__floatsisf+0x1c>
     f5a:	fa f4       	brpl	.+62     	; 0xf9a <__floatsisf+0x6c>
     f5c:	bb 0f       	add	r27, r27
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__floatsisf+0x36>
     f60:	60 ff       	sbrs	r22, 0
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <__floatsisf+0x6c>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <__floatsisf+0x6c>
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <__floatsisf+0x48>
     f72:	96 e9       	ldi	r25, 0x96	; 150
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <__floatsisf+0x6a>
     f76:	77 23       	and	r23, r23
     f78:	21 f0       	breq	.+8      	; 0xf82 <__floatsisf+0x54>
     f7a:	9e e8       	ldi	r25, 0x8E	; 142
     f7c:	87 2f       	mov	r24, r23
     f7e:	76 2f       	mov	r23, r22
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__floatsisf+0x5e>
     f82:	66 23       	and	r22, r22
     f84:	71 f0       	breq	.+28     	; 0xfa2 <__floatsisf+0x74>
     f86:	96 e8       	ldi	r25, 0x86	; 134
     f88:	86 2f       	mov	r24, r22
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	2a f0       	brmi	.+10     	; 0xf9a <__floatsisf+0x6c>
     f90:	9a 95       	dec	r25
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	da f7       	brpl	.-10     	; 0xf90 <__floatsisf+0x62>
     f9a:	88 0f       	add	r24, r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__fp_cmp>:
__fp_cmp():
     fa4:	99 0f       	add	r25, r25
     fa6:	00 08       	sbc	r0, r0
     fa8:	55 0f       	add	r21, r21
     faa:	aa 0b       	sbc	r26, r26
     fac:	e0 e8       	ldi	r30, 0x80	; 128
     fae:	fe ef       	ldi	r31, 0xFE	; 254
     fb0:	16 16       	cp	r1, r22
     fb2:	17 06       	cpc	r1, r23
     fb4:	e8 07       	cpc	r30, r24
     fb6:	f9 07       	cpc	r31, r25
     fb8:	c0 f0       	brcs	.+48     	; 0xfea <__fp_cmp+0x46>
     fba:	12 16       	cp	r1, r18
     fbc:	13 06       	cpc	r1, r19
     fbe:	e4 07       	cpc	r30, r20
     fc0:	f5 07       	cpc	r31, r21
     fc2:	98 f0       	brcs	.+38     	; 0xfea <__fp_cmp+0x46>
     fc4:	62 1b       	sub	r22, r18
     fc6:	73 0b       	sbc	r23, r19
     fc8:	84 0b       	sbc	r24, r20
     fca:	95 0b       	sbc	r25, r21
     fcc:	39 f4       	brne	.+14     	; 0xfdc <__fp_cmp+0x38>
     fce:	0a 26       	eor	r0, r26
     fd0:	61 f0       	breq	.+24     	; 0xfea <__fp_cmp+0x46>
     fd2:	23 2b       	or	r18, r19
     fd4:	24 2b       	or	r18, r20
     fd6:	25 2b       	or	r18, r21
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <__fp_cmp+0x3e>
     fda:	08 95       	ret
     fdc:	0a 26       	eor	r0, r26
     fde:	09 f4       	brne	.+2      	; 0xfe2 <__fp_cmp+0x3e>
     fe0:	a1 40       	sbci	r26, 0x01	; 1
     fe2:	a6 95       	lsr	r26
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	81 1d       	adc	r24, r1
     fe8:	81 1d       	adc	r24, r1
     fea:	08 95       	ret

00000fec <__fp_inf>:
__fp_inf():
     fec:	97 f9       	bld	r25, 7
     fee:	9f 67       	ori	r25, 0x7F	; 127
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <__fp_nan>:
__fp_nan():
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	80 ec       	ldi	r24, 0xC0	; 192
     ffc:	08 95       	ret

00000ffe <__fp_pscA>:
__fp_pscA():
     ffe:	00 24       	eor	r0, r0
    1000:	0a 94       	dec	r0
    1002:	16 16       	cp	r1, r22
    1004:	17 06       	cpc	r1, r23
    1006:	18 06       	cpc	r1, r24
    1008:	09 06       	cpc	r0, r25
    100a:	08 95       	ret

0000100c <__fp_pscB>:
__fp_pscB():
    100c:	00 24       	eor	r0, r0
    100e:	0a 94       	dec	r0
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	14 06       	cpc	r1, r20
    1016:	05 06       	cpc	r0, r21
    1018:	08 95       	ret

0000101a <__fp_round>:
__fp_round():
    101a:	09 2e       	mov	r0, r25
    101c:	03 94       	inc	r0
    101e:	00 0c       	add	r0, r0
    1020:	11 f4       	brne	.+4      	; 0x1026 <__fp_round+0xc>
    1022:	88 23       	and	r24, r24
    1024:	52 f0       	brmi	.+20     	; 0x103a <__fp_round+0x20>
    1026:	bb 0f       	add	r27, r27
    1028:	40 f4       	brcc	.+16     	; 0x103a <__fp_round+0x20>
    102a:	bf 2b       	or	r27, r31
    102c:	11 f4       	brne	.+4      	; 0x1032 <__fp_round+0x18>
    102e:	60 ff       	sbrs	r22, 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <__fp_round+0x20>
    1032:	6f 5f       	subi	r22, 0xFF	; 255
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	08 95       	ret

0000103c <__fp_split3>:
__fp_split3():
    103c:	57 fd       	sbrc	r21, 7
    103e:	90 58       	subi	r25, 0x80	; 128
    1040:	44 0f       	add	r20, r20
    1042:	55 1f       	adc	r21, r21
    1044:	59 f0       	breq	.+22     	; 0x105c <__fp_splitA+0x10>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	71 f0       	breq	.+28     	; 0x1066 <__fp_splitA+0x1a>
    104a:	47 95       	ror	r20

0000104c <__fp_splitA>:
    104c:	88 0f       	add	r24, r24
    104e:	97 fb       	bst	r25, 7
    1050:	99 1f       	adc	r25, r25
    1052:	61 f0       	breq	.+24     	; 0x106c <__fp_splitA+0x20>
    1054:	9f 3f       	cpi	r25, 0xFF	; 255
    1056:	79 f0       	breq	.+30     	; 0x1076 <__fp_splitA+0x2a>
    1058:	87 95       	ror	r24
    105a:	08 95       	ret
    105c:	12 16       	cp	r1, r18
    105e:	13 06       	cpc	r1, r19
    1060:	14 06       	cpc	r1, r20
    1062:	55 1f       	adc	r21, r21
    1064:	f2 cf       	rjmp	.-28     	; 0x104a <__fp_split3+0xe>
    1066:	46 95       	lsr	r20
    1068:	f1 df       	rcall	.-30     	; 0x104c <__fp_splitA>
    106a:	08 c0       	rjmp	.+16     	; 0x107c <__fp_splitA+0x30>
    106c:	16 16       	cp	r1, r22
    106e:	17 06       	cpc	r1, r23
    1070:	18 06       	cpc	r1, r24
    1072:	99 1f       	adc	r25, r25
    1074:	f1 cf       	rjmp	.-30     	; 0x1058 <__fp_splitA+0xc>
    1076:	86 95       	lsr	r24
    1078:	71 05       	cpc	r23, r1
    107a:	61 05       	cpc	r22, r1
    107c:	08 94       	sec
    107e:	08 95       	ret

00001080 <__fp_zero>:
__fp_zero():
    1080:	e8 94       	clt

00001082 <__fp_szero>:
    1082:	bb 27       	eor	r27, r27
    1084:	66 27       	eor	r22, r22
    1086:	77 27       	eor	r23, r23
    1088:	cb 01       	movw	r24, r22
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret

0000108e <__mulsf3>:
__mulsf3():
    108e:	0a d0       	rcall	.+20     	; 0x10a4 <__mulsf3x>
    1090:	c4 cf       	rjmp	.-120    	; 0x101a <__fp_round>
    1092:	b5 df       	rcall	.-150    	; 0xffe <__fp_pscA>
    1094:	28 f0       	brcs	.+10     	; 0x10a0 <__mulsf3+0x12>
    1096:	ba df       	rcall	.-140    	; 0x100c <__fp_pscB>
    1098:	18 f0       	brcs	.+6      	; 0x10a0 <__mulsf3+0x12>
    109a:	95 23       	and	r25, r21
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__mulsf3+0x12>
    109e:	a6 cf       	rjmp	.-180    	; 0xfec <__fp_inf>
    10a0:	ab cf       	rjmp	.-170    	; 0xff8 <__fp_nan>
    10a2:	ef cf       	rjmp	.-34     	; 0x1082 <__fp_szero>

000010a4 <__mulsf3x>:
__mulsf3x():
    10a4:	cb df       	rcall	.-106    	; 0x103c <__fp_split3>
    10a6:	a8 f3       	brcs	.-22     	; 0x1092 <__mulsf3+0x4>

000010a8 <__mulsf3_pse>:
    10a8:	99 23       	and	r25, r25
    10aa:	d9 f3       	breq	.-10     	; 0x10a2 <__mulsf3+0x14>
    10ac:	55 23       	and	r21, r21
    10ae:	c9 f3       	breq	.-14     	; 0x10a2 <__mulsf3+0x14>
    10b0:	95 0f       	add	r25, r21
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	55 1f       	adc	r21, r21
    10b6:	aa 27       	eor	r26, r26
    10b8:	ee 27       	eor	r30, r30
    10ba:	ff 27       	eor	r31, r31
    10bc:	bb 27       	eor	r27, r27
    10be:	00 24       	eor	r0, r0
    10c0:	08 94       	sec
    10c2:	67 95       	ror	r22
    10c4:	20 f4       	brcc	.+8      	; 0x10ce <__mulsf3_pse+0x26>
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	b4 1f       	adc	r27, r20
    10cc:	0a 1e       	adc	r0, r26
    10ce:	22 0f       	add	r18, r18
    10d0:	33 1f       	adc	r19, r19
    10d2:	44 1f       	adc	r20, r20
    10d4:	aa 1f       	adc	r26, r26
    10d6:	66 95       	lsr	r22
    10d8:	a9 f7       	brne	.-22     	; 0x10c4 <__mulsf3_pse+0x1c>
    10da:	77 95       	ror	r23
    10dc:	30 f4       	brcc	.+12     	; 0x10ea <__mulsf3_pse+0x42>
    10de:	f3 0f       	add	r31, r19
    10e0:	b4 1f       	adc	r27, r20
    10e2:	0a 1e       	adc	r0, r26
    10e4:	12 1e       	adc	r1, r18
    10e6:	08 f4       	brcc	.+2      	; 0x10ea <__mulsf3_pse+0x42>
    10e8:	63 95       	inc	r22
    10ea:	33 0f       	add	r19, r19
    10ec:	44 1f       	adc	r20, r20
    10ee:	aa 1f       	adc	r26, r26
    10f0:	22 1f       	adc	r18, r18
    10f2:	76 95       	lsr	r23
    10f4:	99 f7       	brne	.-26     	; 0x10dc <__mulsf3_pse+0x34>
    10f6:	87 95       	ror	r24
    10f8:	20 f4       	brcc	.+8      	; 0x1102 <__mulsf3_pse+0x5a>
    10fa:	b4 0f       	add	r27, r20
    10fc:	0a 1e       	adc	r0, r26
    10fe:	12 1e       	adc	r1, r18
    1100:	63 1f       	adc	r22, r19
    1102:	44 0f       	add	r20, r20
    1104:	aa 1f       	adc	r26, r26
    1106:	22 1f       	adc	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	86 95       	lsr	r24
    110c:	a9 f7       	brne	.-22     	; 0x10f8 <__mulsf3_pse+0x50>
    110e:	86 2f       	mov	r24, r22
    1110:	71 2d       	mov	r23, r1
    1112:	60 2d       	mov	r22, r0
    1114:	11 24       	eor	r1, r1
    1116:	9f 57       	subi	r25, 0x7F	; 127
    1118:	50 40       	sbci	r21, 0x00	; 0
    111a:	8a f0       	brmi	.+34     	; 0x113e <__mulsf3_pse+0x96>
    111c:	e1 f0       	breq	.+56     	; 0x1156 <__mulsf3_pse+0xae>
    111e:	88 23       	and	r24, r24
    1120:	4a f0       	brmi	.+18     	; 0x1134 <__mulsf3_pse+0x8c>
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	a9 f7       	brne	.-22     	; 0x111e <__mulsf3_pse+0x76>
    1134:	9e 3f       	cpi	r25, 0xFE	; 254
    1136:	51 05       	cpc	r21, r1
    1138:	70 f0       	brcs	.+28     	; 0x1156 <__mulsf3_pse+0xae>
    113a:	58 cf       	rjmp	.-336    	; 0xfec <__fp_inf>
    113c:	a2 cf       	rjmp	.-188    	; 0x1082 <__fp_szero>
    113e:	5f 3f       	cpi	r21, 0xFF	; 255
    1140:	ec f3       	brlt	.-6      	; 0x113c <__mulsf3_pse+0x94>
    1142:	98 3e       	cpi	r25, 0xE8	; 232
    1144:	dc f3       	brlt	.-10     	; 0x113c <__mulsf3_pse+0x94>
    1146:	86 95       	lsr	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	b7 95       	ror	r27
    114e:	f7 95       	ror	r31
    1150:	e7 95       	ror	r30
    1152:	9f 5f       	subi	r25, 0xFF	; 255
    1154:	c1 f7       	brne	.-16     	; 0x1146 <__mulsf3_pse+0x9e>
    1156:	fe 2b       	or	r31, r30
    1158:	88 0f       	add	r24, r24
    115a:	91 1d       	adc	r25, r1
    115c:	96 95       	lsr	r25
    115e:	87 95       	ror	r24
    1160:	97 f9       	bld	r25, 7
    1162:	08 95       	ret

00001164 <_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1164:	f8 94       	cli

00001166 <__stop_program>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1166:	ff cf       	rjmp	.-2      	; 0x1166 <__stop_program>
