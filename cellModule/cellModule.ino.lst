
/tmp/arduino_build_712181/cellModule.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	dc c4       	rjmp	.+2488   	; 0x9c0 <__vector_3>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	bd c3       	rjmp	.+1914   	; 0x786 <__vector_5>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	6f c5       	rjmp	.+2782   	; 0xaf0 <__vector_8>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	b5 c4       	rjmp	.+2410   	; 0x986 <__vector_13>
      1c:	fe c3       	rjmp	.+2044   	; 0x81a <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
      2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
      30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
      36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf e5       	ldi	r28, 0x5F	; 95
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      48:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      4e:	e4 e7       	ldi	r30, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      50:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      54:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      56:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      58:	a4 38       	cpi	r26, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      5a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      5e:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      60:	a4 e8       	ldi	r26, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      62:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      68:	a7 3f       	cpi	r26, 0xF7	; 247
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      6a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
      6e:	98 d5       	rcall	.+2864   	; 0xba0 <main>
      70:	7f c8       	rjmp	.-3842   	; 0xfffff170 <__eeprom_end+0xff7ef170>

00000072 <__bad_interrupt>:
__vector_1():
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>:
_Z14calculateCRC32PKhj.constprop.8():
/media/D/Data/Powerwall/cellModule/b_functions.ino:12
inline void ledOFF() {
  DDRB |= (1 << DDB1);
  PORTB &= ~(1 << PB1);
}

uint32_t calculateCRC32(const uint8_t *data, size_t length)
      74:	4f 92       	push	r4
      76:	5f 92       	push	r5
      78:	6f 92       	push	r6
      7a:	7f 92       	push	r7
      7c:	8f 92       	push	r8
      7e:	9f 92       	push	r9
      80:	af 92       	push	r10
      82:	bf 92       	push	r11
      84:	cf 92       	push	r12
      86:	df 92       	push	r13
      88:	ef 92       	push	r14
      8a:	ff 92       	push	r15
      8c:	fc 01       	movw	r30, r24
      8e:	71 96       	adiw	r30, 0x11	; 17
/media/D/Data/Powerwall/cellModule/b_functions.ino:14
{
  uint32_t crc = 0xffffffff;
      90:	cc 24       	eor	r12, r12
      92:	ca 94       	dec	r12
      94:	dc 2c       	mov	r13, r12
      96:	76 01       	movw	r14, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:15
  while (length--) {
      98:	8e 17       	cp	r24, r30
      9a:	9f 07       	cpc	r25, r31
      9c:	e1 f1       	breq	.+120    	; 0x116 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0xa2>
/media/D/Data/Powerwall/cellModule/b_functions.ino:16
    uint8_t c = *data++;
      9e:	dc 01       	movw	r26, r24
      a0:	4d 90       	ld	r4, X+
      a2:	cd 01       	movw	r24, r26
      a4:	28 e0       	ldi	r18, 0x08	; 8
      a6:	30 e0       	ldi	r19, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      a8:	40 e8       	ldi	r20, 0x80	; 128
      aa:	84 2e       	mov	r8, r20
      ac:	91 2c       	mov	r9, r1
      ae:	a1 2c       	mov	r10, r1
      b0:	b1 2c       	mov	r11, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:19
      bool bit = crc & 0x80000000;
      if (c & i) {
      b2:	51 2c       	mov	r5, r1
      b4:	71 2c       	mov	r7, r1
      b6:	61 2c       	mov	r6, r1
      b8:	b3 01       	movw	r22, r6
      ba:	a2 01       	movw	r20, r4
      bc:	48 21       	and	r20, r8
      be:	59 21       	and	r21, r9
      c0:	6a 21       	and	r22, r10
      c2:	7b 21       	and	r23, r11
      c4:	45 2b       	or	r20, r21
      c6:	46 2b       	or	r20, r22
      c8:	47 2b       	or	r20, r23
      ca:	f1 f4       	brne	.+60     	; 0x108 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x94>
/media/D/Data/Powerwall/cellModule/b_functions.ino:18
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      bool bit = crc & 0x80000000;
      cc:	b7 01       	movw	r22, r14
      ce:	a6 01       	movw	r20, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      if (c & i) {
        bit = !bit;
      d0:	44 27       	eor	r20, r20
      d2:	77 fd       	sbrc	r23, 7
      d4:	43 95       	inc	r20
      d6:	55 27       	eor	r21, r21
      d8:	66 27       	eor	r22, r22
      da:	77 27       	eor	r23, r23
/media/D/Data/Powerwall/cellModule/b_functions.ino:22
      }
      crc <<= 1;
      dc:	cc 0c       	add	r12, r12
      de:	dd 1c       	adc	r13, r13
      e0:	ee 1c       	adc	r14, r14
      e2:	ff 1c       	adc	r15, r15
/media/D/Data/Powerwall/cellModule/b_functions.ino:23
      if (bit) {
      e4:	44 23       	and	r20, r20
      e6:	41 f0       	breq	.+16     	; 0xf8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x84>
/media/D/Data/Powerwall/cellModule/b_functions.ino:24
        crc ^= 0x04c11db7;
      e8:	b7 eb       	ldi	r27, 0xB7	; 183
      ea:	cb 26       	eor	r12, r27
      ec:	bd e1       	ldi	r27, 0x1D	; 29
      ee:	db 26       	eor	r13, r27
      f0:	b1 ec       	ldi	r27, 0xC1	; 193
      f2:	eb 26       	eor	r14, r27
      f4:	b4 e0       	ldi	r27, 0x04	; 4
      f6:	fb 26       	eor	r15, r27
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
uint32_t calculateCRC32(const uint8_t *data, size_t length)
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      f8:	b6 94       	lsr	r11
      fa:	a7 94       	ror	r10
      fc:	97 94       	ror	r9
      fe:	87 94       	ror	r8
     100:	21 50       	subi	r18, 0x01	; 1
     102:	31 09       	sbc	r19, r1
     104:	c9 f6       	brne	.-78     	; 0xb8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x44>
     106:	c8 cf       	rjmp	.-112    	; 0x98 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x24>
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      bool bit = crc & 0x80000000;
      if (c & i) {
        bit = !bit;
     108:	b7 01       	movw	r22, r14
     10a:	a6 01       	movw	r20, r12
     10c:	40 95       	com	r20
     10e:	50 95       	com	r21
     110:	60 95       	com	r22
     112:	70 95       	com	r23
     114:	dd cf       	rjmp	.-70     	; 0xd0 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x5c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:29
        crc ^= 0x04c11db7;
      }
    }
  }
  return crc;
}
     116:	c7 01       	movw	r24, r14
     118:	b6 01       	movw	r22, r12
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	9f 90       	pop	r9
     128:	8f 90       	pop	r8
     12a:	7f 90       	pop	r7
     12c:	6f 90       	pop	r6
     12e:	5f 90       	pop	r5
     130:	4f 90       	pop	r4
     132:	08 95       	ret

00000134 <digitalWrite.constprop.1>:
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     134:	ea e3       	ldi	r30, 0x3A	; 58
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     13a:	e4 e3       	ldi	r30, 0x34	; 52
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     140:	ee e2       	ldi	r30, 0x2E	; 46
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	e4 91       	lpm	r30, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     146:	ee 23       	and	r30, r30
     148:	c1 f0       	breq	.+48     	; 0x17a <digitalWrite.constprop.1+0x46>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     14a:	22 23       	and	r18, r18
     14c:	29 f0       	breq	.+10     	; 0x158 <digitalWrite.constprop.1+0x24>
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     14e:	21 30       	cpi	r18, 0x01	; 1
     150:	a9 f4       	brne	.+42     	; 0x17c <digitalWrite.constprop.1+0x48>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     152:	2a b5       	in	r18, 0x2a	; 42
     154:	2f 77       	andi	r18, 0x7F	; 127
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     156:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ec 5d       	subi	r30, 0xDC	; 220
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	a5 91       	lpm	r26, Z+
     164:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:151

  if (val == LOW) {
     166:	81 11       	cpse	r24, r1
     168:	1a c0       	rjmp	.+52     	; 0x19e <digitalWrite.constprop.1+0x6a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:152
    uint8_t oldSREG = SREG;
     16a:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:153
    cli();
     16c:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:154
    *out &= ~bit;
     16e:	2c 91       	ld	r18, X
     170:	e9 2f       	mov	r30, r25
     172:	e0 95       	com	r30
     174:	e2 23       	and	r30, r18
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     176:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
     178:	8f bf       	out	0x3f, r24	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:162
  }
}
     17a:	08 95       	ret
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     17c:	22 30       	cpi	r18, 0x02	; 2
     17e:	19 f4       	brne	.+6      	; 0x186 <digitalWrite.constprop.1+0x52>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     180:	2a b5       	in	r18, 0x2a	; 42
     182:	2f 7d       	andi	r18, 0xDF	; 223
     184:	e8 cf       	rjmp	.-48     	; 0x156 <digitalWrite.constprop.1+0x22>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
     186:	23 30       	cpi	r18, 0x03	; 3
     188:	21 f4       	brne	.+8      	; 0x192 <digitalWrite.constprop.1+0x5e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
     18a:	20 b7       	in	r18, 0x30	; 48
     18c:	2f 7d       	andi	r18, 0xDF	; 223
     18e:	20 bf       	out	0x30, r18	; 48
     190:	e3 cf       	rjmp	.-58     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
     192:	24 30       	cpi	r18, 0x04	; 4
     194:	09 f7       	brne	.-62     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
     196:	2c b5       	in	r18, 0x2c	; 44
     198:	2f 7d       	andi	r18, 0xDF	; 223
     19a:	2c bd       	out	0x2c, r18	; 44
     19c:	dd cf       	rjmp	.-70     	; 0x158 <digitalWrite.constprop.1+0x24>
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:157
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     19e:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:158
    cli();
     1a0:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    *out |= bit;
     1a2:	ec 91       	ld	r30, X
     1a4:	e9 2b       	or	r30, r25
     1a6:	e7 cf       	rjmp	.-50     	; 0x176 <digitalWrite.constprop.1+0x42>

000001a8 <micros>:
micros():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     1a8:	3f b7       	in	r19, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:183

    cli();
     1aa:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:184
    m = millis_timer_overflow_count;
     1ac:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis_timer_overflow_count>
     1b0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis_timer_overflow_count+0x1>
     1b4:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis_timer_overflow_count+0x2>
     1b8:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     1bc:	22 b7       	in	r18, 0x32	; 50
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:201

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     1be:	08 b6       	in	r0, 0x38	; 56
     1c0:	01 fe       	sbrs	r0, 1
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <micros+0x26>
     1c4:	2f 3f       	cpi	r18, 0xFF	; 255
     1c6:	19 f0       	breq	.+6      	; 0x1ce <micros+0x26>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:202
      m++;
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	a1 1d       	adc	r26, r1
     1cc:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     1ce:	3f bf       	out	0x3f, r19	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     1d0:	ba 2f       	mov	r27, r26
     1d2:	a9 2f       	mov	r26, r25
     1d4:	98 2f       	mov	r25, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	bc 01       	movw	r22, r24
     1da:	cd 01       	movw	r24, r26
     1dc:	62 0f       	add	r22, r18
     1de:	71 1d       	adc	r23, r1
     1e0:	81 1d       	adc	r24, r1
     1e2:	91 1d       	adc	r25, r1
     1e4:	43 e0       	ldi	r20, 0x03	; 3
     1e6:	66 0f       	add	r22, r22
     1e8:	77 1f       	adc	r23, r23
     1ea:	88 1f       	adc	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	4a 95       	dec	r20
     1f0:	d1 f7       	brne	.-12     	; 0x1e6 <micros+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     1f2:	08 95       	ret

000001f4 <usiTwiReceiveByte>:
usiTwiReceiveByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:443
)
{
  uint8_t rtn_byte;

  // wait for Rx data
  while ( !rxCount );
     1f4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
     1f8:	88 23       	and	r24, r24
     1fa:	e1 f3       	breq	.-8      	; 0x1f4 <usiTwiReceiveByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:445

  rtn_byte = rxBuf [ rxTail ];
     1fc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <rxTail>
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	e6 54       	subi	r30, 0x46	; 70
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	80 81       	ld	r24, Z
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:447
  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
     208:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <rxTail>
     20c:	9f 5f       	subi	r25, 0xFF	; 255
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:448
  rxCount--;
     214:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <rxCount>
     218:	91 50       	subi	r25, 0x01	; 1
     21a:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:453

  // return data from the buffer.
  return rtn_byte;

} // end usiTwiReceiveByte
     21e:	08 95       	ret

00000220 <usiTwiTransmitByte>:
usiTwiTransmitByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:420
{

  uint8_t tmphead;

  // wait for free space in buffer
  while ( txCount == TWI_TX_BUFFER_SIZE) ;
     220:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <txCount>
     224:	90 31       	cpi	r25, 0x10	; 16
     226:	e1 f3       	breq	.-8      	; 0x220 <usiTwiTransmitByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:423

  // store data in buffer
  txBuf[ txHead ] = data;
     228:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <txHead>
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	e5 53       	subi	r30, 0x35	; 53
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:424
  txHead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
     234:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <txHead>
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	8f 70       	andi	r24, 0x0F	; 15
     23c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:425
  txCount++;
     240:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txCount>
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:427

} // end usiTwiTransmitByte
     24a:	08 95       	ret

0000024c <init_i2c()>:
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:11
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
}
void init_i2c() {
  TinyWireS.begin(currentConfig.SLAVE_ADDR);
     24c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
flushTwiBuffers():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:333
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
     250:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:334
  rxHead = 0;
     254:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:335
  rxCount = 0;
     258:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:336
  txTail = 0;
     25c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:337
  txHead = 0;
     260:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:338
  txCount = 0;
     264:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txCount>
usiTwiSlaveInit():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:361
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
     268:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <slaveAddress>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:369
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
     26c:	87 b3       	in	r24, 0x17	; 23
     26e:	85 60       	ori	r24, 0x05	; 5
     270:	87 bb       	out	0x17, r24	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:372

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
     272:	c2 9a       	sbi	0x18, 2	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:375

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
     274:	c0 9a       	sbi	0x18, 0	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:378

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
     276:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:380

  USICR =
     278:	88 ea       	ldi	r24, 0xA8	; 168
     27a:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:395
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
     27c:	80 ef       	ldi	r24, 0xF0	; 240
     27e:	8e b9       	out	0x0e, r24	; 14
onReceive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:53
}

// sets function called on slave write
void USI_TWI_S::onReceive( void (*function)(uint8_t) )
{
  usi_onReceiverPtr = function;
     280:	8b e9       	ldi	r24, 0x9B	; 155
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <usi_onReceiverPtr+0x1>
     288:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <usi_onReceiverPtr>
onRequest():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:59
}

// sets function called on slave read
void USI_TWI_S::onRequest( void (*function)(void) )
{
  usi_onRequestPtr = function;
     28c:	8a eb       	ldi	r24, 0xBA	; 186
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <usi_onRequestPtr+0x1>
     294:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <usi_onRequestPtr>
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:14
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}
     298:	08 95       	ret

0000029a <getVoltageMeasurement()>:
_Z21getVoltageMeasurementv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	20 e0       	ldi	r18, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:120
}


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	dc 01       	movw	r26, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:122
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
    sum += voltageBuff[k];
     2a4:	f9 01       	movw	r30, r18
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	e3 57       	subi	r30, 0x73	; 115
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	40 81       	ld	r20, Z
     2b0:	51 81       	ldd	r21, Z+1	; 0x01
     2b2:	84 0f       	add	r24, r20
     2b4:	95 1f       	adc	r25, r21
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	20 31       	cpi	r18, 0x10	; 16
     2c0:	31 05       	cpc	r19, r1
     2c2:	81 f7       	brne	.-32     	; 0x2a4 <getVoltageMeasurement()+0xa>
/media/D/Data/Powerwall/cellModule/b_functions.ino:127
    sum += voltageBuff[k];
  }
  //Shift the bits to match OVERSAMPLE_LOOP size (buffer size of 8=3 shifts, 16=4 shifts)
  //Assume perfect reference of 2560mV for reference - we will correct for this with voltageCalibration

  uint16_t raw = (uint16_t)(sum / OVERSAMPLE_LOOP);
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	b6 95       	lsr	r27
     2c8:	a7 95       	ror	r26
     2ca:	97 95       	ror	r25
     2cc:	87 95       	ror	r24
     2ce:	2a 95       	dec	r18
     2d0:	d1 f7       	brne	.-12     	; 0x2c6 <getVoltageMeasurement()+0x2c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:129

  return (uint16_t)((float)raw * currentConfig.voltageCalibration + currentConfig.voltageCalibration2);
     2d2:	bc 01       	movw	r22, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	2e d6       	rcall	.+3164   	; 0xf36 <__floatunsisf>
     2da:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
     2de:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
     2e2:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
     2e6:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
     2ea:	d7 d6       	rcall	.+3502   	; 0x109a <__mulsf3>
     2ec:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
     2f0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
     2f4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
     2f8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
     2fc:	88 d5       	rcall	.+2832   	; 0xe0e <__addsf3>
     2fe:	ef d5       	rcall	.+3038   	; 0xede <__fixunssfsi>
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	18 d6       	rcall	.+3120   	; 0xf36 <__floatunsisf>
/media/D/Data/Powerwall/cellModule/b_functions.ino:130
}
     306:	08 95       	ret

00000308 <readFloat()>:
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:97
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}

float readFloat() {
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
     30c:	73 df       	rcall	.-282    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:98
  float_to_bytes.b[0] = TinyWireS.receive();
     30e:	c4 e8       	ldi	r28, 0x84	; 132
     310:	d0 e0       	ldi	r29, 0x00	; 0
     312:	88 83       	st	Y, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     314:	6f df       	rcall	.-290    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:99
  float_to_bytes.b[1] = TinyWireS.receive();
     316:	89 83       	std	Y+1, r24	; 0x01
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     318:	6d df       	rcall	.-294    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:100
  float_to_bytes.b[2] = TinyWireS.receive();
     31a:	8a 83       	std	Y+2, r24	; 0x02
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     31c:	6b df       	rcall	.-298    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:101
  float_to_bytes.b[3] = TinyWireS.receive();
     31e:	8b 83       	std	Y+3, r24	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:103

  return float_to_bytes.val;
     320:	68 81       	ld	r22, Y
     322:	79 81       	ldd	r23, Y+1	; 0x01
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	9b 81       	ldd	r25, Y+3	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:104
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <sendFloat(float)>:
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:88

void sendByte(uint8_t number) {
  TinyWireS.send(number);
}

void sendFloat(float number) {
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	17 2f       	mov	r17, r23
     336:	d8 2f       	mov	r29, r24
     338:	c9 2f       	mov	r28, r25
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
  float_to_bytes.val = number;
     33a:	86 2f       	mov	r24, r22
     33c:	97 2f       	mov	r25, r23
     33e:	ad 2f       	mov	r26, r29
     340:	bc 2f       	mov	r27, r28
     342:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
     346:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
     34a:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <__data_end+0x2>
     34e:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <__data_end+0x3>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
void USI_TWI_S::begin(uint8_t slaveAddr){ // initialize I2C lib
  usiTwiSlaveInit(slaveAddr); 
}

void USI_TWI_S::send(uint8_t data){  // send it back to master
  usiTwiTransmitByte(data);
     352:	66 df       	rcall	.-308    	; 0x220 <usiTwiTransmitByte>
     354:	81 2f       	mov	r24, r17
     356:	64 df       	rcall	.-312    	; 0x220 <usiTwiTransmitByte>
     358:	8d 2f       	mov	r24, r29
     35a:	62 df       	rcall	.-316    	; 0x220 <usiTwiTransmitByte>
     35c:	8c 2f       	mov	r24, r28
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:95

  TinyWireS.send(float_to_bytes.b[0]);
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     364:	5d cf       	rjmp	.-326    	; 0x220 <usiTwiTransmitByte>

00000366 <sendUnsignedInt(unsigned int)>:
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:79
  //Infinity
  while (1) {}
}


void sendUnsignedInt(uint16_t number) {
     366:	cf 93       	push	r28
     368:	c8 2f       	mov	r28, r24
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     36a:	89 2f       	mov	r24, r25
     36c:	59 df       	rcall	.-334    	; 0x220 <usiTwiTransmitByte>
     36e:	8c 2f       	mov	r24, r28
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:82
  TinyWireS.send((byte)((number >> 8) & 0xFF));
  TinyWireS.send((byte)(number & 0xFF));
}
     370:	cf 91       	pop	r28
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     372:	56 cf       	rjmp	.-340    	; 0x220 <usiTwiTransmitByte>

00000374 <requestEvent()>:
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:4
//cellModule -> cellController
// function that executes whenever data is requested by master (this answers requestFrom command)
void requestEvent() {
  switch (cmdByte) {
     374:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <cmdByte>
     378:	ea 50       	subi	r30, 0x0A	; 10
     37a:	eb 30       	cpi	r30, 0x0B	; 11
     37c:	e8 f4       	brcc	.+58     	; 0x3b8 <requestEvent()+0x44>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ed 53       	subi	r30, 0x3D	; 61
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	09 94       	ijmp
     386:	0a c0       	rjmp	.+20     	; 0x39c <requestEvent()+0x28>
     388:	2b c0       	rjmp	.+86     	; 0x3e0 <requestEvent()+0x6c>
     38a:	46 c0       	rjmp	.+140    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     38c:	58 c0       	rjmp	.+176    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     38e:	1a c0       	rjmp	.+52     	; 0x3c4 <requestEvent()+0x50>
     390:	1e c0       	rjmp	.+60     	; 0x3ce <requestEvent()+0x5a>
     392:	22 c0       	rjmp	.+68     	; 0x3d8 <requestEvent()+0x64>
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <requestEvent()+0x30>
     396:	65 c0       	rjmp	.+202    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     398:	49 c0       	rjmp	.+146    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     39a:	5a c0       	rjmp	.+180    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
/media/D/Data/Powerwall/cellModule/c_comm.ino:6
    case READOUT_voltage:
      if (bypassEnabled) {
     39c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <bypassEnabled>
     3a0:	88 23       	and	r24, r24
     3a2:	29 f0       	breq	.+10     	; 0x3ae <requestEvent()+0x3a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:14
        sendUnsignedInt(voltageMeasurement);
      }

      break;
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
     3a4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <voltageMeasurement_bypass>
     3a8:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <requestEvent()+0x42>
/media/D/Data/Powerwall/cellModule/c_comm.ino:9
  switch (cmdByte) {
    case READOUT_voltage:
      if (bypassEnabled) {
        sendUnsignedInt(voltageMeasurement_bypass);
      } else {
        sendUnsignedInt(voltageMeasurement);
     3ae:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <voltageMeasurement>
     3b2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <voltageMeasurement+0x1>
     3b6:	d7 df       	rcall	.-82     	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:56
      //Dont do anything - timeout
      break;
  }

  //Clear cmdByte
  cmdByte = 0;
     3b8:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:59

  //if this times out, master has stopped communicating with module
  i2cTmr = 80;//150
     3bc:	80 e5       	ldi	r24, 0x50	; 80
     3be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/c_comm.ino:60
}
     3c2:	08 95       	ret
/media/D/Data/Powerwall/cellModule/c_comm.ino:18
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
      break;
      
    case READOUT_raw_voltage:
      sendUnsignedInt(last_raw_adc);
     3c4:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <last_raw_adc>
     3c8:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <last_raw_adc+0x1>
     3cc:	f4 cf       	rjmp	.-24     	; 0x3b6 <requestEvent()+0x42>
/media/D/Data/Powerwall/cellModule/c_comm.ino:22
      break;

    case READOUT_error_counter:
      sendUnsignedInt(error_counter);
     3ce:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <error_counter>
     3d2:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <error_counter+0x1>
     3d6:	ef cf       	rjmp	.-34     	; 0x3b6 <requestEvent()+0x42>
/media/D/Data/Powerwall/cellModule/c_comm.ino:26
      break;

    case READOUT_bypass_state:
      sendByte(bypassEnabled);
     3d8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <bypassEnabled>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     3dc:	21 df       	rcall	.-446    	; 0x220 <usiTwiTransmitByte>
     3de:	ec cf       	rjmp	.-40     	; 0x3b8 <requestEvent()+0x44>
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:30
      break;

    case READOUT_temperature:
      sendUnsignedInt((uint16_t)((float)tempSensorValue * currentConfig.tempSensorCalibration + currentConfig.tempSensorCalibration2));
     3e0:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <tempSensorValue>
     3e4:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <tempSensorValue+0x1>
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	a4 d5       	rcall	.+2888   	; 0xf36 <__floatunsisf>
     3ee:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <currentConfig+0x9>
     3f2:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <currentConfig+0xa>
     3f6:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <currentConfig+0xb>
     3fa:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <currentConfig+0xc>
     3fe:	4d d6       	rcall	.+3226   	; 0x109a <__mulsf3>
     400:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <currentConfig+0xd>
     404:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentConfig+0xe>
     408:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentConfig+0xf>
     40c:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentConfig+0x10>
     410:	fe d4       	rcall	.+2556   	; 0xe0e <__addsf3>
     412:	65 d5       	rcall	.+2762   	; 0xede <__fixunssfsi>
     414:	cb 01       	movw	r24, r22
     416:	cf cf       	rjmp	.-98     	; 0x3b6 <requestEvent()+0x42>
/media/D/Data/Powerwall/cellModule/c_comm.ino:34
      break;

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
     418:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <currentConfig+0x1>
     41c:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <currentConfig+0x2>
     420:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <currentConfig+0x3>
     424:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:43
      break;
    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
      break;
    case READOUT_temperature_calibration2:
      sendFloat(currentConfig.tempSensorCalibration2);
     428:	82 df       	rcall	.-252    	; 0x32e <sendFloat(float)>
     42a:	c6 cf       	rjmp	.-116    	; 0x3b8 <requestEvent()+0x44>
/media/D/Data/Powerwall/cellModule/c_comm.ino:37

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
      break;
    case READOUT_voltage_calibration2:
      sendFloat(currentConfig.voltageCalibration2);
     42c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentConfig+0x5>
     430:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <currentConfig+0x6>
     434:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <currentConfig+0x7>
     438:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <currentConfig+0x8>
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
/media/D/Data/Powerwall/cellModule/c_comm.ino:40
      break;
    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
     43e:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <currentConfig+0x9>
     442:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <currentConfig+0xa>
     446:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <currentConfig+0xb>
     44a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <currentConfig+0xc>
     44e:	ec cf       	rjmp	.-40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
/media/D/Data/Powerwall/cellModule/c_comm.ino:43
      break;
    case READOUT_temperature_calibration2:
      sendFloat(currentConfig.tempSensorCalibration2);
     450:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <currentConfig+0xd>
     454:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <currentConfig+0xe>
     458:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <currentConfig+0xf>
     45c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <currentConfig+0x10>
     460:	e3 cf       	rjmp	.-58     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
/media/D/Data/Powerwall/cellModule/c_comm.ino:46
      break;
    case READOUT_burningCounter:
      sendUnsignedInt(iBurningCounter);
     462:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <iBurningCounter>
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	7e df       	rcall	.-260    	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:47
      iBurningCounter = 0;//resest after it is read
     46a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <iBurningCounter>
     46e:	a4 cf       	rjmp	.-184    	; 0x3b8 <requestEvent()+0x44>

00000470 <ledOFF()>:
_Z6ledOFFv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:8
  DDRB |= (1 << DDB1);
  PORTB |=  (1 << PB1);
}

inline void ledOFF() {
  DDRB |= (1 << DDB1);
     470:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:9
  PORTB &= ~(1 << PB1);
     472:	c1 98       	cbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:10
}
     474:	08 95       	ret

00000476 <ledON()>:
_Z5ledONv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:3

inline void ledON() {
  DDRB |= (1 << DDB1);
     476:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:4
  PORTB |=  (1 << PB1);
     478:	c1 9a       	sbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:5
}
     47a:	08 95       	ret

0000047c <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	f6 2e       	mov	r15, r22
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     48a:	08 81       	ld	r16, Y
     48c:	19 81       	ldd	r17, Y+1	; 0x01
     48e:	c8 01       	movw	r24, r16
     490:	a7 d4       	rcall	.+2382   	; 0xde0 <eeprom_read_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     492:	f8 16       	cp	r15, r24
     494:	19 f0       	breq	.+6      	; 0x49c <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     496:	6f 2d       	mov	r22, r15
     498:	c8 01       	movw	r24, r16
     49a:	aa d4       	rcall	.+2388   	; 0xdf0 <eeprom_write_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     49c:	ce 01       	movw	r24, r28
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	08 95       	ret

000004aa <WriteConfigToEEPROM()>:
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:31
    }
  }
  return crc;
}

void WriteConfigToEEPROM() {
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <WriteConfigToEEPROM()+0xe>
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <WriteConfigToEEPROM()+0x10>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <WriteConfigToEEPROM()+0x12>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	82 e6       	ldi	r24, 0x62	; 98
     4c2:	e8 2e       	mov	r14, r24
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	f8 2e       	mov	r15, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     4c8:	04 e1       	ldi	r16, 0x14	; 20
     4ca:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     4cc:	1a 83       	std	Y+2, r17	; 0x02
     4ce:	09 83       	std	Y+1, r16	; 0x01
     4d0:	f7 01       	movw	r30, r14
     4d2:	61 91       	ld	r22, Z+
     4d4:	7f 01       	movw	r14, r30
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	d0 df       	rcall	.-96     	; 0x47c <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     4dc:	0f 5f       	subi	r16, 0xFF	; 255
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     4e0:	05 32       	cpi	r16, 0x25	; 37
     4e2:	11 05       	cpc	r17, r1
     4e4:	99 f7       	brne	.-26     	; 0x4cc <WriteConfigToEEPROM()+0x22>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:33
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
     4e6:	82 e6       	ldi	r24, 0x62	; 98
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	c4 dd       	rcall	.-1144   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
     4ec:	69 83       	std	Y+1, r22	; 0x01
     4ee:	7a 83       	std	Y+2, r23	; 0x02
     4f0:	8b 83       	std	Y+3, r24	; 0x03
     4f2:	9c 83       	std	Y+4, r25	; 0x04
     4f4:	8e 01       	movw	r16, r28
     4f6:	0f 5f       	subi	r16, 0xFF	; 255
     4f8:	1f 4f       	sbci	r17, 0xFF	; 255
     4fa:	f1 2c       	mov	r15, r1
     4fc:	e1 2c       	mov	r14, r1
_ZN11EEPROMClass3putImEERKT_iS3_.isra.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     4fe:	fe 82       	std	Y+6, r15	; 0x06
     500:	ed 82       	std	Y+5, r14	; 0x05
     502:	f8 01       	movw	r30, r16
     504:	61 91       	ld	r22, Z+
     506:	8f 01       	movw	r16, r30
     508:	ce 01       	movw	r24, r28
     50a:	05 96       	adiw	r24, 0x05	; 5
     50c:	b7 df       	rcall	.-146    	; 0x47c <EERef::update(unsigned char)>
     50e:	ff ef       	ldi	r31, 0xFF	; 255
     510:	ef 1a       	sub	r14, r31
     512:	ff 0a       	sbc	r15, r31
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	e8 16       	cp	r14, r24
     518:	f1 04       	cpc	r15, r1
     51a:	89 f7       	brne	.-30     	; 0x4fe <WriteConfigToEEPROM()+0x54>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:34
}
     51c:	26 96       	adiw	r28, 0x06	; 6
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	08 95       	ret

00000536 <receiveEvent(unsigned char)>:
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:70
 * The I2C data received handler
 *
 * This needs to complete before the next incoming transaction (start, data, restart/stop) on the bus does
 * so be quick, set flags for long running tasks to be called from the mainloop instead of running them directly
 */
void receiveEvent(uint8_t bytesCnt) {
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	00 d0       	rcall	.+0      	; 0x546 <receiveEvent(unsigned char)+0x10>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
/media/D/Data/Powerwall/cellModule/c_comm.ino:71
  if (bytesCnt <= 0) return;
     54a:	88 23       	and	r24, r24
     54c:	09 f4       	brne	.+2      	; 0x550 <receiveEvent(unsigned char)+0x1a>
     54e:	38 c0       	rjmp	.+112    	; 0x5c0 <receiveEvent(unsigned char)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:75

  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;
     550:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <cmdByte>
     554:	99 23       	and	r25, r25
     556:	51 f0       	breq	.+20     	; 0x56c <receiveEvent(unsigned char)+0x36>
     558:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <error_counter>
     55c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <error_counter+0x1>
     560:	2f 5f       	subi	r18, 0xFF	; 255
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <error_counter+0x1>
     568:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <error_counter>
     56c:	18 2f       	mov	r17, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
     56e:	42 de       	rcall	.-892    	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:77

  cmdByte = TinyWireS.receive();
     570:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:81
  bytesCnt--;

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {
     574:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <cmdByte>
     578:	86 ff       	sbrs	r24, 6
     57a:	f6 c0       	rjmp	.+492    	; 0x768 <receiveEvent(unsigned char)+0x232>
/media/D/Data/Powerwall/cellModule/c_comm.ino:78
  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;

  cmdByte = TinyWireS.receive();
  bytesCnt--;
     57c:	11 50       	subi	r17, 0x01	; 1
/media/D/Data/Powerwall/cellModule/c_comm.ino:83

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {

    bitClear(cmdByte, COMMAND_BIT);
     57e:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <cmdByte>
     582:	9f 7b       	andi	r25, 0xBF	; 191
     584:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:85

    switch (cmdByte) {
     588:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <cmdByte>
     58c:	e1 50       	subi	r30, 0x01	; 1
     58e:	ec 30       	cpi	r30, 0x0C	; 12
     590:	a8 f4       	brcc	.+42     	; 0x5bc <receiveEvent(unsigned char)+0x86>
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	e3 53       	subi	r30, 0x33	; 51
     596:	fd 4f       	sbci	r31, 0xFD	; 253
     598:	09 94       	ijmp
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <receiveEvent(unsigned char)+0x7c>
     59c:	0f c0       	rjmp	.+30     	; 0x5bc <receiveEvent(unsigned char)+0x86>
     59e:	1a c0       	rjmp	.+52     	; 0x5d4 <receiveEvent(unsigned char)+0x9e>
     5a0:	cd c0       	rjmp	.+410    	; 0x73c <receiveEvent(unsigned char)+0x206>
     5a2:	c9 c0       	rjmp	.+402    	; 0x736 <receiveEvent(unsigned char)+0x200>
     5a4:	26 c0       	rjmp	.+76     	; 0x5f2 <receiveEvent(unsigned char)+0xbc>
     5a6:	59 c0       	rjmp	.+178    	; 0x65a <receiveEvent(unsigned char)+0x124>
     5a8:	8e c0       	rjmp	.+284    	; 0x6c6 <receiveEvent(unsigned char)+0x190>
     5aa:	08 c0       	rjmp	.+16     	; 0x5bc <receiveEvent(unsigned char)+0x86>
     5ac:	3c c0       	rjmp	.+120    	; 0x626 <receiveEvent(unsigned char)+0xf0>
     5ae:	70 c0       	rjmp	.+224    	; 0x690 <receiveEvent(unsigned char)+0x15a>
     5b0:	d7 c0       	rjmp	.+430    	; 0x760 <receiveEvent(unsigned char)+0x22a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:87
      case COMMAND_green_led_pattern:
        if (bytesCnt == 1) {
     5b2:	11 30       	cpi	r17, 0x01	; 1
     5b4:	19 f4       	brne	.+6      	; 0x5bc <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     5b6:	1e de       	rcall	.-964    	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:88
          green_pattern = TinyWireS.receive();
     5b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:179
        disable_i2c();
        init_i2c();
       break;
    }

    cmdByte = 0;
     5bc:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:191
        ledFlash = true;
        break;
    }
  }

}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	08 95       	ret
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     5d4:	1a 82       	std	Y+2, r1	; 0x02
     5d6:	19 82       	std	Y+1, r1	; 0x01
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	ce 01       	movw	r24, r28
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	4e df       	rcall	.-356    	; 0x47c <EERef::update(unsigned char)>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9a 83       	std	Y+2, r25	; 0x02
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	46 df       	rcall	.-372    	; 0x47c <EERef::update(unsigned char)>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:169
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
            currentConfig.SLAVE_ADDR = newAddress;
            WriteConfigToEEPROM();
            Reboot();
     5f0:	d1 d2       	rcall	.+1442   	; 0xb94 <Reboot()>
/media/D/Data/Powerwall/cellModule/c_comm.ino:102
        factory_default();
        Reboot();
        break;

      case COMMAND_set_voltage_calibration:
        if (bytesCnt == sizeof(float)) {
     5f2:	14 30       	cpi	r17, 0x04	; 4
     5f4:	19 f7       	brne	.-58     	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:103
          float newValue = readFloat();
     5f6:	88 de       	rcall	.-752    	; 0x308 <readFloat()>
     5f8:	6b 01       	movw	r12, r22
     5fa:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:105
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration) {
     5fc:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
     600:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
     604:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
     608:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
     60c:	64 d4       	rcall	.+2248   	; 0xed6 <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	a9 f2       	breq	.-86     	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:106
            currentConfig.voltageCalibration = newValue;
     612:	c0 92 63 00 	sts	0x0063, r12	; 0x800063 <currentConfig+0x1>
     616:	d0 92 64 00 	sts	0x0064, r13	; 0x800064 <currentConfig+0x2>
     61a:	e0 92 65 00 	sts	0x0065, r14	; 0x800065 <currentConfig+0x3>
     61e:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:138
        if (bytesCnt == sizeof(float)) {
          float newValue = readFloat();
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration2) {
            currentConfig.tempSensorCalibration2 = newValue;
            WriteConfigToEEPROM();
     622:	43 df       	rcall	.-378    	; 0x4aa <WriteConfigToEEPROM()>
     624:	cb cf       	rjmp	.-106    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:112
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_voltage_calibration2:
        if (bytesCnt == sizeof(float)) {
     626:	14 30       	cpi	r17, 0x04	; 4
     628:	49 f6       	brne	.-110    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:113
          float newValue = readFloat();
     62a:	6e de       	rcall	.-804    	; 0x308 <readFloat()>
     62c:	6b 01       	movw	r12, r22
     62e:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:115
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration2) {
     630:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
     634:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
     638:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
     63c:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
     640:	4a d4       	rcall	.+2196   	; 0xed6 <__cmpsf2>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <receiveEvent(unsigned char)+0x112>
     646:	ba cf       	rjmp	.-140    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:116
            currentConfig.voltageCalibration2 = newValue;
     648:	c0 92 67 00 	sts	0x0067, r12	; 0x800067 <currentConfig+0x5>
     64c:	d0 92 68 00 	sts	0x0068, r13	; 0x800068 <currentConfig+0x6>
     650:	e0 92 69 00 	sts	0x0069, r14	; 0x800069 <currentConfig+0x7>
     654:	f0 92 6a 00 	sts	0x006A, r15	; 0x80006a <currentConfig+0x8>
     658:	e4 cf       	rjmp	.-56     	; 0x622 <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:123
          }
        }
        break;

      case COMMAND_set_temperature_calibration:
        if (bytesCnt == sizeof(float)) {
     65a:	14 30       	cpi	r17, 0x04	; 4
     65c:	09 f0       	breq	.+2      	; 0x660 <receiveEvent(unsigned char)+0x12a>
     65e:	ae cf       	rjmp	.-164    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:124
          float newValue = readFloat();
     660:	53 de       	rcall	.-858    	; 0x308 <readFloat()>
     662:	6b 01       	movw	r12, r22
     664:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:126
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
     666:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <currentConfig+0x9>
     66a:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <currentConfig+0xa>
     66e:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <currentConfig+0xb>
     672:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <currentConfig+0xc>
     676:	2f d4       	rcall	.+2142   	; 0xed6 <__cmpsf2>
     678:	88 23       	and	r24, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <receiveEvent(unsigned char)+0x148>
     67c:	9f cf       	rjmp	.-194    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:127
            currentConfig.tempSensorCalibration = newValue;
     67e:	c0 92 6b 00 	sts	0x006B, r12	; 0x80006b <currentConfig+0x9>
     682:	d0 92 6c 00 	sts	0x006C, r13	; 0x80006c <currentConfig+0xa>
     686:	e0 92 6d 00 	sts	0x006D, r14	; 0x80006d <currentConfig+0xb>
     68a:	f0 92 6e 00 	sts	0x006E, r15	; 0x80006e <currentConfig+0xc>
     68e:	c9 cf       	rjmp	.-110    	; 0x622 <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:133
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_temperature_calibration2:
        if (bytesCnt == sizeof(float)) {
     690:	14 30       	cpi	r17, 0x04	; 4
     692:	09 f0       	breq	.+2      	; 0x696 <receiveEvent(unsigned char)+0x160>
     694:	93 cf       	rjmp	.-218    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:134
          float newValue = readFloat();
     696:	38 de       	rcall	.-912    	; 0x308 <readFloat()>
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:136
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration2) {
     69c:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <currentConfig+0xd>
     6a0:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentConfig+0xe>
     6a4:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentConfig+0xf>
     6a8:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentConfig+0x10>
     6ac:	14 d4       	rcall	.+2088   	; 0xed6 <__cmpsf2>
     6ae:	88 23       	and	r24, r24
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <receiveEvent(unsigned char)+0x17e>
     6b2:	84 cf       	rjmp	.-248    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:137
            currentConfig.tempSensorCalibration2 = newValue;
     6b4:	c0 92 6f 00 	sts	0x006F, r12	; 0x80006f <currentConfig+0xd>
     6b8:	d0 92 70 00 	sts	0x0070, r13	; 0x800070 <currentConfig+0xe>
     6bc:	e0 92 71 00 	sts	0x0071, r14	; 0x800071 <currentConfig+0xf>
     6c0:	f0 92 72 00 	sts	0x0072, r15	; 0x800072 <currentConfig+0x10>
     6c4:	ae cf       	rjmp	.-164    	; 0x622 <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:143
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_bypass_voltage:
        if (bytesCnt == sizeof(uint16_t)) {
     6c6:	12 30       	cpi	r17, 0x02	; 2
     6c8:	09 f0       	breq	.+2      	; 0x6cc <receiveEvent(unsigned char)+0x196>
     6ca:	78 cf       	rjmp	.-272    	; 0x5bc <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     6cc:	93 dd       	rcall	.-1242   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:106
  float_to_bytes.b[3] = TinyWireS.receive();

  return float_to_bytes.val;
}
uint16_t readUINT16() {
  uint16_t_to_bytes.b[0] = TinyWireS.receive();
     6ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <uint16_t_to_bytes>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     6d2:	90 dd       	rcall	.-1248   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:107
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
     6d4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <uint16_t_to_bytes+0x1>
/media/D/Data/Powerwall/cellModule/b_functions.ino:108
  return uint16_t_to_bytes.val;
     6d8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <uint16_t_to_bytes>
     6dc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <uint16_t_to_bytes+0x1>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:146
          uint16_t newValue = readUINT16();
          //Only accept if its a realistic value and the value is LESS than the last voltage reading
          if (newValue >= MIN_BYPASS_VOLTAGE && newValue <= MAX_BYPASS_VOLTAGE && newValue < voltageMeasurement) {
     6e0:	9c 01       	movw	r18, r24
     6e2:	2c 52       	subi	r18, 0x2C	; 44
     6e4:	31 40       	sbci	r19, 0x01	; 1
     6e6:	29 37       	cpi	r18, 0x79	; 121
     6e8:	31 05       	cpc	r19, r1
     6ea:	e8 f4       	brcc	.+58     	; 0x726 <receiveEvent(unsigned char)+0x1f0>
     6ec:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <voltageMeasurement>
     6f0:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <voltageMeasurement+0x1>
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	b0 f4       	brcc	.+44     	; 0x726 <receiveEvent(unsigned char)+0x1f0>
/media/D/Data/Powerwall/cellModule/c_comm.ino:147
            targetBypassVoltage = newValue;
     6fa:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <targetBypassVoltage+0x1>
     6fe:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/c_comm.ino:148
            voltageMeasurement_bypass = voltageMeasurement;//init bypass voltage
     702:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <voltageMeasurement>
     706:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <voltageMeasurement+0x1>
     70a:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     70e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/c_comm.ino:149
            bypassCnt = BYPASS_COUNTER_MAX;
     712:	80 ef       	ldi	r24, 0xF0	; 240
     714:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:150
            green_pattern = GREEN_LED_PATTERN_BYPASS;
     718:	8c e6       	ldi	r24, 0x6C	; 108
     71a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:151
            bypassEnabled = true;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <bypassEnabled>
     724:	4b cf       	rjmp	.-362    	; 0x5bc <receiveEvent(unsigned char)+0x86>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
}

void bypass_off() {
  targetBypassVoltage = 0;
     726:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <targetBypassVoltage+0x1>
     72a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     72e:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     732:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <bypassEnabled>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:155
          } else {
            //Disable
            bypass_off();
            green_pattern = GREEN_LED_PATTERN_STANDARD;
     736:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     73a:	40 cf       	rjmp	.-384    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:163
        break;


      case COMMAND_set_slave_address:
        //Set i2c slave address and write to EEPROM, then reboot
        if (bytesCnt == 1 ) {
     73c:	11 30       	cpi	r17, 0x01	; 1
     73e:	09 f0       	breq	.+2      	; 0x742 <receiveEvent(unsigned char)+0x20c>
     740:	3d cf       	rjmp	.-390    	; 0x5bc <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     742:	58 dd       	rcall	.-1360   	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:166
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
     744:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <currentConfig>
     748:	98 17       	cp	r25, r24
     74a:	09 f4       	brne	.+2      	; 0x74e <receiveEvent(unsigned char)+0x218>
     74c:	37 cf       	rjmp	.-402    	; 0x5bc <receiveEvent(unsigned char)+0x86>
     74e:	98 ee       	ldi	r25, 0xE8	; 232
     750:	98 0f       	add	r25, r24
     752:	9d 30       	cpi	r25, 0x0D	; 13
     754:	08 f0       	brcs	.+2      	; 0x758 <receiveEvent(unsigned char)+0x222>
     756:	32 cf       	rjmp	.-412    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:167
            currentConfig.SLAVE_ADDR = newAddress;
     758:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/c_comm.ino:168
            WriteConfigToEEPROM();
     75c:	a6 de       	rcall	.-692    	; 0x4aa <WriteConfigToEEPROM()>
     75e:	48 cf       	rjmp	.-368    	; 0x5f0 <receiveEvent(unsigned char)+0xba>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17

void disable_i2c(){
  USICR = 0; //control register
     760:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
     762:	1e b8       	out	0x0e, r1	; 14
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:175
          }
        }
        break;
      case COMMAND_resetI2c://controller requests this module to reset i2c
        disable_i2c();
        init_i2c();
     764:	73 dd       	rcall	.-1306   	; 0x24c <init_i2c()>
     766:	2a cf       	rjmp	.-428    	; 0x5bc <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:183

    cmdByte = 0;
  } else {
    //Its a READ request

    switch (cmdByte) {
     768:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <cmdByte>
     76c:	8a 30       	cpi	r24, 0x0A	; 10
     76e:	09 f0       	breq	.+2      	; 0x772 <receiveEvent(unsigned char)+0x23c>
     770:	27 cf       	rjmp	.-434    	; 0x5c0 <receiveEvent(unsigned char)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:185
      case READOUT_voltage:
        voltageMeasurement = getVoltageMeasurement();
     772:	93 dd       	rcall	.-1242   	; 0x29a <getVoltageMeasurement()>
     774:	b4 d3       	rcall	.+1896   	; 0xede <__fixunssfsi>
     776:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <voltageMeasurement+0x1>
     77a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <voltageMeasurement>
/media/D/Data/Powerwall/cellModule/c_comm.ino:186
        ledFlash = true;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <ledFlash>
     784:	1d cf       	rjmp	.-454    	; 0x5c0 <receiveEvent(unsigned char)+0x8a>

00000786 <__vector_5>:
__vector_5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     79c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <millis_timer_millis>
     7a0:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <millis_timer_millis+0x1>
     7a4:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <millis_timer_millis+0x2>
     7a8:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
     7ac:	30 91 e2 00 	lds	r19, 0x00E2	; 0x8000e2 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:145

    f += FRACT_INC;
     7b0:	26 e0       	ldi	r18, 0x06	; 6
     7b2:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:147

    if (f >= FRACT_MAX)
     7b4:	2d 37       	cpi	r18, 0x7D	; 125
     7b6:	68 f1       	brcs	.+90     	; 0x812 <__vector_5+0x8c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:149
    {
      f -= FRACT_MAX;
     7b8:	29 e8       	ldi	r18, 0x89	; 137
     7ba:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
     7bc:	03 96       	adiw	r24, 0x03	; 3
     7be:	a1 1d       	adc	r26, r1
     7c0:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     7c2:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:159
    millis_timer_millis = m;
     7c6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <millis_timer_millis>
     7ca:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <millis_timer_millis+0x1>
     7ce:	a0 93 e5 00 	sts	0x00E5, r26	; 0x8000e5 <millis_timer_millis+0x2>
     7d2:	b0 93 e6 00 	sts	0x00E6, r27	; 0x8000e6 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:160
    millis_timer_overflow_count++;
     7d6:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis_timer_overflow_count>
     7da:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis_timer_overflow_count+0x1>
     7de:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis_timer_overflow_count+0x2>
     7e2:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis_timer_overflow_count+0x3>
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	a1 1d       	adc	r26, r1
     7ea:	b1 1d       	adc	r27, r1
     7ec:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <millis_timer_overflow_count>
     7f0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <millis_timer_overflow_count+0x1>
     7f4:	a0 93 e9 00 	sts	0x00E9, r26	; 0x8000e9 <millis_timer_overflow_count+0x2>
     7f8:	b0 93 ea 00 	sts	0x00EA, r27	; 0x8000ea <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:162

  }
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     812:	02 96       	adiw	r24, 0x02	; 2
     814:	a1 1d       	adc	r26, r1
     816:	b1 1d       	adc	r27, r1
     818:	d4 cf       	rjmp	.-88     	; 0x7c2 <__vector_5+0x3c>

0000081a <__vector_14>:
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:564
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566

  switch ( overflowState )
     83c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <overflowState>
     840:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <overflowState+0x1>
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	91 05       	cpc	r25, r1
     848:	09 f4       	brne	.+2      	; 0x84c <__vector_14+0x32>
     84a:	8b c0       	rjmp	.+278    	; 0x962 <__vector_14+0x148>
     84c:	b0 f4       	brcc	.+44     	; 0x87a <__vector_14+0x60>
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	a9 f1       	breq	.+106    	; 0x8bc <__vector_14+0xa2>
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	09 f4       	brne	.+2      	; 0x858 <__vector_14+0x3e>
     856:	60 c0       	rjmp	.+192    	; 0x918 <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:659
      SET_USI_TO_SEND_ACK( );
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
     858:	ff 91       	pop	r31
     85a:	ef 91       	pop	r30
     85c:	bf 91       	pop	r27
     85e:	af 91       	pop	r26
     860:	9f 91       	pop	r25
     862:	8f 91       	pop	r24
     864:	7f 91       	pop	r23
     866:	6f 91       	pop	r22
     868:	5f 91       	pop	r21
     86a:	4f 91       	pop	r20
     86c:	3f 91       	pop	r19
     86e:	2f 91       	pop	r18
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
     87a:	84 30       	cpi	r24, 0x04	; 4
     87c:	91 05       	cpc	r25, r1
     87e:	09 f4       	brne	.+2      	; 0x882 <__vector_14+0x68>
     880:	7a c0       	rjmp	.+244    	; 0x976 <__vector_14+0x15c>
     882:	08 f4       	brcc	.+2      	; 0x886 <__vector_14+0x6c>
     884:	43 c0       	rjmp	.+134    	; 0x90c <__vector_14+0xf2>
     886:	05 97       	sbiw	r24, 0x05	; 5
     888:	39 f7       	brne	.-50     	; 0x858 <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:643
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // check buffer size
      if ( rxCount < TWI_RX_BUFFER_SIZE )
     88a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
     88e:	80 31       	cpi	r24, 0x10	; 16
     890:	90 f4       	brcc	.+36     	; 0x8b6 <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:645
      {
        rxBuf[ rxHead ] = USIDR;
     892:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <rxHead>
     896:	8f b1       	in	r24, 0x0f	; 15
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	e6 54       	subi	r30, 0x46	; 70
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:646
        rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
     8a0:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <rxHead>
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	8f 70       	andi	r24, 0x0F	; 15
     8a8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:647
        rxCount++;
     8ac:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
     8b6:	84 e0       	ldi	r24, 0x04	; 4
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	21 c0       	rjmp	.+66     	; 0x8fe <__vector_14+0xe4>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:572
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
     8bc:	8f b1       	in	r24, 0x0f	; 15
     8be:	88 23       	and	r24, r24
     8c0:	31 f0       	breq	.+12     	; 0x8ce <__vector_14+0xb4>
     8c2:	8f b1       	in	r24, 0x0f	; 15
     8c4:	86 95       	lsr	r24
     8c6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <slaveAddress>
     8ca:	89 13       	cpse	r24, r25
     8cc:	22 c0       	rjmp	.+68     	; 0x912 <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:574
      {
        if ( USIDR & 0x01 )
     8ce:	78 9b       	sbis	0x0f, 0	; 15
     8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
        {
          USI_REQUEST_CALLBACK();
     8d2:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <usi_onReceiverPtr>
     8d6:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <usi_onReceiverPtr+0x1>
     8da:	30 97       	sbiw	r30, 0x00	; 0
     8dc:	39 f0       	breq	.+14     	; 0x8ec <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     8de:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
     8e2:	88 23       	and	r24, r24
     8e4:	19 f0       	breq	.+6      	; 0x8ec <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     8e6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
     8ea:	09 95       	icall
     8ec:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <usi_onRequestPtr>
     8f0:	f0 91 de 00 	lds	r31, 0x00DE	; 0x8000de <usi_onRequestPtr+0x1>
     8f4:	30 97       	sbiw	r30, 0x00	; 0
     8f6:	09 f0       	breq	.+2      	; 0x8fa <__vector_14+0xe0>
     8f8:	09 95       	icall
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:577
          overflowState = USI_SLAVE_SEND_DATA;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
     8fe:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     902:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
      SET_USI_TO_SEND_ACK( );
     906:	1f b8       	out	0x0f, r1	; 15
     908:	b8 9a       	sbi	0x17, 0	; 23
     90a:	33 c0       	rjmp	.+102    	; 0x972 <__vector_14+0x158>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:594
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
     90c:	8f b1       	in	r24, 0x0f	; 15
     90e:	88 23       	and	r24, r24
     910:	19 f0       	breq	.+6      	; 0x918 <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:617
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
     912:	88 ea       	ldi	r24, 0xA8	; 168
     914:	8d b9       	out	0x0d, r24	; 13
     916:	1d c0       	rjmp	.+58     	; 0x952 <__vector_14+0x138>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:607

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txCount )
     918:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txCount>
     91c:	88 23       	and	r24, r24
     91e:	e1 f0       	breq	.+56     	; 0x958 <__vector_14+0x13e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:609
      {
        USIDR = txBuf[ txTail ];
     920:	e0 91 db 00 	lds	r30, 0x00DB	; 0x8000db <txTail>
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	e5 53       	subi	r30, 0x35	; 53
     928:	ff 4f       	sbci	r31, 0xFF	; 255
     92a:	80 81       	ld	r24, Z
     92c:	8f b9       	out	0x0f, r24	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:610
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
     92e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <txTail>
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:611
        txCount--;
     93a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txCount>
     93e:	81 50       	subi	r24, 0x01	; 1
     940:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:620
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     94c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:621
      SET_USI_TO_SEND_DATA( );
     950:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
      SET_USI_TO_READ_DATA( );
     952:	80 e7       	ldi	r24, 0x70	; 112
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
     954:	8e b9       	out	0x0e, r24	; 14
     956:	80 cf       	rjmp	.-256    	; 0x858 <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:616
        txCount--;
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
     958:	b8 98       	cbi	0x17, 0	; 23
     95a:	1f b8       	out	0x0f, r1	; 15
     95c:	8e e7       	ldi	r24, 0x7E	; 126
     95e:	8e b9       	out	0x0e, r24	; 14
     960:	d8 cf       	rjmp	.-80     	; 0x912 <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:627
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     96a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:628
      SET_USI_TO_READ_ACK( );
     96e:	b8 98       	cbi	0x17, 0	; 23
     970:	1f b8       	out	0x0f, r1	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
     972:	8e e7       	ldi	r24, 0x7E	; 126
     974:	ef cf       	rjmp	.-34     	; 0x954 <__vector_14+0x13a>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:634
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <overflowState+0x1>
     97e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635
      SET_USI_TO_READ_DATA( );
     982:	b8 98       	cbi	0x17, 0	; 23
     984:	e6 cf       	rjmp	.-52     	; 0x952 <__vector_14+0x138>

00000986 <__vector_13>:
__vector_13():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:472
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
     986:	1f 92       	push	r1
     988:	0f 92       	push	r0
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	0f 92       	push	r0
     98e:	11 24       	eor	r1, r1
     990:	8f 93       	push	r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:484
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
     992:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <overflowState+0x1>
     996:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:487

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
     99a:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:494
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
     99c:	b2 9b       	sbis	0x16, 2	; 22
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__vector_13+0x1e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:496
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
     9a0:	b0 9b       	sbis	0x16, 0	; 22
     9a2:	fc cf       	rjmp	.-8      	; 0x99c <__vector_13+0x16>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:502
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
     9a4:	b0 99       	sbic	0x16, 0	; 22
     9a6:	0a c0       	rjmp	.+20     	; 0x9bc <__vector_13+0x36>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:507
  {

    // a Stop Condition did not occur

    USICR =
     9a8:	88 ef       	ldi	r24, 0xF8	; 248
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
     9aa:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:540
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
     9ac:	80 ef       	ldi	r24, 0xF0	; 240
     9ae:	8e b9       	out	0x0e, r24	; 14
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:549
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
     9b0:	8f 91       	pop	r24
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
     9bc:	88 ea       	ldi	r24, 0xA8	; 168
     9be:	f5 cf       	rjmp	.-22     	; 0x9aa <__vector_13+0x24>

000009c0 <__vector_3>:
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:42
  }
}


ISR(TIMER1_COMPA_vect) // timer interrupt
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	2f 93       	push	r18
     9cc:	3f 93       	push	r19
     9ce:	4f 93       	push	r20
     9d0:	5f 93       	push	r21
     9d2:	6f 93       	push	r22
     9d4:	7f 93       	push	r23
     9d6:	8f 93       	push	r24
     9d8:	9f 93       	push	r25
     9da:	af 93       	push	r26
     9dc:	bf 93       	push	r27
     9de:	ef 93       	push	r30
     9e0:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/z_main.ino:44

  if (i2cTmr > 0) {
     9e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     9e6:	88 23       	and	r24, r24
     9e8:	29 f0       	breq	.+10     	; 0x9f4 <__vector_3+0x34>
/media/D/Data/Powerwall/cellModule/z_main.ino:46
    //Count down loop for requests to see if i2c bus hangs or controller stops talking
    i2cTmr--;
     9ea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     9ee:	81 50       	subi	r24, 0x01	; 1
     9f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/z_main.ino:50
  }
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
     9f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9f8:	81 11       	cpse	r24, r1
     9fa:	60 c0       	rjmp	.+192    	; 0xabc <__vector_3+0xfc>
/media/D/Data/Powerwall/cellModule/z_main.ino:51
    if (ledFlash)  {
     9fc:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <ledFlash>
     a00:	88 23       	and	r24, r24
     a02:	09 f4       	brne	.+2      	; 0xa06 <__vector_3+0x46>
     a04:	59 c0       	rjmp	.+178    	; 0xab8 <__vector_3+0xf8>
/media/D/Data/Powerwall/cellModule/z_main.ino:52
      ledON();
     a06:	37 dd       	rcall	.-1426   	; 0x476 <ledON()>
/media/D/Data/Powerwall/cellModule/z_main.ino:54
    }else ledOFF();
    ledFlash = false;
     a08:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <ledFlash>
/media/D/Data/Powerwall/cellModule/z_main.ino:66
      ledOFF();
    }
  }
  ///////////////////////////////////////////////////
  
  if (bypassEnabled) {// burning energy in resistor
     a0c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <bypassEnabled>
     a10:	88 23       	and	r24, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <__vector_3+0x56>
     a14:	6a c0       	rjmp	.+212    	; 0xaea <__vector_3+0x12a>
/media/D/Data/Powerwall/cellModule/z_main.ino:67
    if(iBurningCounter<65535)iBurningCounter++;//counting burned Wh, reset by reading
     a16:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <iBurningCounter>
     a1a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <iBurningCounter>
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <iBurningCounter>
/media/D/Data/Powerwall/cellModule/z_main.ino:69
    
    if (bypassCnt == 0 && voltageBufferReady) {
     a24:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a28:	81 11       	cpse	r24, r1
     a2a:	20 c0       	rjmp	.+64     	; 0xa6c <__vector_3+0xac>
     a2c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <voltageBufferReady>
     a30:	88 23       	and	r24, r24
     a32:	e1 f0       	breq	.+56     	; 0xa6c <__vector_3+0xac>
/media/D/Data/Powerwall/cellModule/z_main.ino:71
      //We are in bypass and just filled in whole buffer with voltage measurements
      voltageMeasurement_bypass = getVoltageMeasurement();
     a34:	32 dc       	rcall	.-1948   	; 0x29a <getVoltageMeasurement()>
     a36:	53 d2       	rcall	.+1190   	; 0xede <__fixunssfsi>
     a38:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     a3c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/z_main.ino:73

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
     a40:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <targetBypassVoltage>
     a44:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <targetBypassVoltage+0x1>
     a48:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <voltageMeasurement_bypass>
     a4c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <voltageMeasurement_bypass+0x1>
     a50:	28 17       	cp	r18, r24
     a52:	39 07       	cpc	r19, r25
     a54:	08 f4       	brcc	.+2      	; 0xa58 <__vector_3+0x98>
     a56:	45 c0       	rjmp	.+138    	; 0xae2 <__vector_3+0x122>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     a58:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <targetBypassVoltage+0x1>
     a5c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     a60:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     a64:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <bypassEnabled>
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:75
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
     a68:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:81
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
      }
    }

    if (bypassCnt > 0)
     a6c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a70:	88 23       	and	r24, r24
     a72:	81 f0       	breq	.+32     	; 0xa94 <__vector_3+0xd4>
/media/D/Data/Powerwall/cellModule/z_main.ino:84
    {
      //We are in ACTIVE BYPASS mode -> BURNING ENERGY in resistor
      bypassCnt--;
     a74:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/z_main.ino:85
      digitalWrite(PB4, HIGH);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	59 db       	rcall	.-2382   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:87

      if (bypassCnt == 0)
     a82:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <bypassCnt>
     a86:	81 11       	cpse	r24, r1
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__vector_3+0xd4>
/media/D/Data/Powerwall/cellModule/z_main.ino:91
      {
        //We have just finished this timed ACTIVE BYPASS mode, disable resistor
        //and measure resting voltage now before possible re-enable.
        digitalWrite(PB4, LOW);
     a8a:	54 db       	rcall	.-2392   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:94

        //Reset voltage ADC buffer
        voltageBufIdx = 0;//we want whole one cycle
     a8c:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/z_main.ino:95
        voltageBufferReady = false;
     a90:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/z_main.ino:104
  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
  }

  //trigger ADC reading
  ADCSRA |= (1 << ADSC);
     a94:	36 9a       	sbi	0x06, 6	; 6
/media/D/Data/Powerwall/cellModule/z_main.ino:105
}
     a96:	ff 91       	pop	r31
     a98:	ef 91       	pop	r30
     a9a:	bf 91       	pop	r27
     a9c:	af 91       	pop	r26
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	7f 91       	pop	r23
     aa4:	6f 91       	pop	r22
     aa6:	5f 91       	pop	r21
     aa8:	4f 91       	pop	r20
     aaa:	3f 91       	pop	r19
     aac:	2f 91       	pop	r18
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti
/media/D/Data/Powerwall/cellModule/z_main.ino:53
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
    if (ledFlash)  {
      ledON();
    }else ledOFF();
     ab8:	db dc       	rcall	.-1610   	; 0x470 <ledOFF()>
     aba:	a6 cf       	rjmp	.-180    	; 0xa08 <__vector_3+0x48>
/media/D/Data/Powerwall/cellModule/z_main.ino:56
    ledFlash = false;
  } else {
    green_pattern = (byte)(green_pattern << 1) | (green_pattern >> 7);//rotate pattern left
     abc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ac0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ac4:	99 0f       	add	r25, r25
     ac6:	88 1f       	adc	r24, r24
     ac8:	88 27       	eor	r24, r24
     aca:	88 1f       	adc	r24, r24
     acc:	89 2b       	or	r24, r25
     ace:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:58

    if (green_pattern & 0x01) {
     ad2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ad6:	80 ff       	sbrs	r24, 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <__vector_3+0x11e>
/media/D/Data/Powerwall/cellModule/z_main.ino:59
      ledON();
     ada:	cd dc       	rcall	.-1638   	; 0x476 <ledON()>
     adc:	97 cf       	rjmp	.-210    	; 0xa0c <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:61
    } else {
      ledOFF();
     ade:	c8 dc       	rcall	.-1648   	; 0x470 <ledOFF()>
     ae0:	95 cf       	rjmp	.-214    	; 0xa0c <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:77

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
     ae2:	80 ef       	ldi	r24, 0xF0	; 240
     ae4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <bypassCnt>
     ae8:	c1 cf       	rjmp	.-126    	; 0xa6c <__vector_3+0xac>
/media/D/Data/Powerwall/cellModule/z_main.ino:100
        voltageBufferReady = false;
      }
    }

  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	23 db       	rcall	.-2490   	; 0x134 <digitalWrite.constprop.1>
     aee:	d2 cf       	rjmp	.-92     	; 0xa94 <__vector_3+0xd4>

00000af0 <__vector_8>:
__vector_8():
/media/D/Data/Powerwall/cellModule/d_adc.ino:16
// changed MUX
// skipping this ADC reading
// temperature = ADC; + changing MUX + next reading will be skipped


ISR(ADC_vect) {
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/d_adc.ino:21
  
  //uint8_t adcl = ADCL;
  //uint16_t value = ADCH << 8 | adcl;

  uint16_t value = ADCW;
     b04:	84 b1       	in	r24, 0x04	; 4
     b06:	95 b1       	in	r25, 0x05	; 5
/media/D/Data/Powerwall/cellModule/d_adc.ino:24

  //If we skip this ADC reading, quit ISR here
  if (skipNextADC) {
     b08:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <skipNextADC>
     b0c:	22 23       	and	r18, r18
     b0e:	61 f0       	breq	.+24     	; 0xb28 <__vector_8+0x38>
/media/D/Data/Powerwall/cellModule/d_adc.ino:25
    skipNextADC = false;
     b10:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <skipNextADC>
/media/D/Data/Powerwall/cellModule/d_adc.ino:71
      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
    }
  }

}
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti
/media/D/Data/Powerwall/cellModule/d_adc.ino:29
  if (skipNextADC) {
    skipNextADC = false;
    return;
  }

  if (tempReadingCnt == TEMP_READING_LOOP_FREQ ) {
     b28:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <tempReadingCnt>
     b2c:	20 31       	cpi	r18, 0x10	; 16
     b2e:	61 f4       	brne	.+24     	; 0xb48 <__vector_8+0x58>
/media/D/Data/Powerwall/cellModule/d_adc.ino:34
    //Use A0 (RESET PIN) to act as an analogue input
    //note that we cannot take the pin below 1.4V or the CPU resets
    //so we use the top half between 1.6V and 2.56V (voltage reference)
    //we avoid switching references (VCC vs 2.56V) so the capacitors dont have to keep draining and recharging
    tempReadingCnt = 0;
     b30:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:37

    //We reduce the value by 512 as we have a DC offset we need to remove
    tempSensorValue = value;
     b34:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <tempSensorValue+0x1>
     b38:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <tempSensorValue>
/media/D/Data/Powerwall/cellModule/d_adc.ino:40

    // use ADC3 for input for next reading (voltage)
    ADMUX = B10010011;
     b3c:	83 e9       	ldi	r24, 0x93	; 147
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
    tempReadingCnt++;
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     b3e:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/d_adc.ino:67

      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <skipNextADC>
     b46:	e6 cf       	rjmp	.-52     	; 0xb14 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:48
    skipNextADC = true;

  } else {

    //Populate the rolling buffer with values from the ADC
    last_raw_adc = value;
     b48:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <last_raw_adc+0x1>
     b4c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <last_raw_adc>
/media/D/Data/Powerwall/cellModule/d_adc.ino:49
    voltageBuff[voltageBufIdx] = value;
     b50:	e0 91 eb 00 	lds	r30, 0x00EB	; 0x8000eb <voltageBufIdx>
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e3 57       	subi	r30, 0x73	; 115
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	80 83       	st	Z, r24
/media/D/Data/Powerwall/cellModule/d_adc.ino:51

    voltageBufIdx++;
     b62:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <voltageBufIdx>
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:53

    if (voltageBufIdx == OVERSAMPLE_LOOP) {
     b6c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <voltageBufIdx>
     b70:	80 31       	cpi	r24, 0x10	; 16
     b72:	29 f4       	brne	.+10     	; 0xb7e <__vector_8+0x8e>
/media/D/Data/Powerwall/cellModule/d_adc.ino:54
      voltageBufIdx = 0;
     b74:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:55
      voltageBufferReady = 1;// indicates valid data, used in main logic
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/d_adc.ino:59
    }


    tempReadingCnt++;
     b7e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempReadingCnt>
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:60
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
     b88:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempReadingCnt>
     b8c:	80 31       	cpi	r24, 0x10	; 16
     b8e:	11 f6       	brne	.-124    	; 0xb14 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     b90:	80 e9       	ldi	r24, 0x90	; 144
     b92:	d5 cf       	rjmp	.-86     	; 0xb3e <__vector_8+0x4e>

00000b94 <Reboot()>:
_Z6Rebootv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:62
void factory_default() {
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, 0);
}

void Reboot() {
  TCCR1 = 0;
     b94:	10 be       	out	0x30, r1	; 48
/media/D/Data/Powerwall/cellModule/b_functions.ino:63
  TIMSK |= (1 << OCIE1A); //Disable timer1
     b96:	89 b7       	in	r24, 0x39	; 57
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	89 bf       	out	0x39, r24	; 57
/media/D/Data/Powerwall/cellModule/b_functions.ino:66

  //Now power down loop until the watchdog timer kicks a reset
  ledON();
     b9c:	6c dc       	rcall	.-1832   	; 0x476 <ledON()>
     b9e:	ff cf       	rjmp	.-2      	; 0xb9e <Reboot()+0xa>

00000ba0 <main>:
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	65 97       	sbiw	r28, 0x15	; 21
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	8a bd       	out	0x2a, r24	; 42
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     bb8:	83 bf       	out	0x33, r24	; 51
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     bba:	78 94       	sei
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:933

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     bbc:	89 b7       	in	r24, 0x39	; 57
     bbe:	82 60       	ori	r24, 0x02	; 2
     bc0:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:594
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	8c bd       	out	0x2c, r24	; 44
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:595
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	8d bd       	out	0x2d, r24	; 45
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:596
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     bca:	87 ec       	ldi	r24, 0xC7	; 199
     bcc:	80 bf       	out	0x30, r24	; 48
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     bce:	86 b1       	in	r24, 0x06	; 6
     bd0:	88 77       	andi	r24, 0x78	; 120
     bd2:	86 68       	ori	r24, 0x86	; 134
     bd4:	86 b9       	out	0x06, r24	; 6
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     bd6:	37 9a       	sbi	0x06, 7	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:23
}

void setup() {
  //Must be first line of setup()
  MCUSR &= ~(1 << WDRF); // reset status flag
     bd8:	84 b7       	in	r24, 0x34	; 52
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	84 bf       	out	0x34, r24	; 52
wdt_disable():
/home/zz/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	a8 95       	wdr
     be4:	81 b5       	in	r24, 0x21	; 33
     be6:	88 61       	ori	r24, 0x18	; 24
     be8:	81 bd       	out	0x21, r24	; 33
     bea:	11 bc       	out	0x21, r1	; 33
     bec:	0f be       	out	0x3f, r0	; 63
pinMode():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:35
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     bee:	e4 e3       	ldi	r30, 0x34	; 52
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     bf4:	ee e2       	ldi	r30, 0x2E	; 46
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	84 91       	lpm	r24, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     bfa:	88 23       	and	r24, r24
     bfc:	99 f0       	breq	.+38     	; 0xc24 <main+0x84>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	fc 01       	movw	r30, r24
     c06:	e2 5e       	subi	r30, 0xE2	; 226
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	a5 91       	lpm	r26, Z+
     c0c:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     c0e:	fc 01       	movw	r30, r24
     c10:	ec 5d       	subi	r30, 0xDC	; 220
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	85 91       	lpm	r24, Z+
     c16:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     c18:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:58
                cli();
     c1a:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:59
    *reg |= bit;
     c1c:	ec 91       	ld	r30, X
     c1e:	e2 2b       	or	r30, r18
     c20:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
     c22:	8f bf       	out	0x3f, r24	; 63
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:40
    DDRB &= ~(1 << DDB5);
    PORTB &= ~(1 << PB5);
  */

  pinMode(PB4, OUTPUT); //bypass - burning resistor
  digitalWrite(PB4, LOW);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	86 da       	rcall	.-2804   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/e_setup.ino:42

  ledON();
     c28:	26 dc       	rcall	.-1972   	; 0x476 <ledON()>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:278
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     c2a:	be da       	rcall	.-2692   	; 0x1a8 <micros>
     c2c:	8b 01       	movw	r16, r22
     c2e:	84 ef       	ldi	r24, 0xF4	; 244
     c30:	c8 2e       	mov	r12, r24
     c32:	dd 24       	eor	r13, r13
     c34:	d3 94       	inc	r13
     c36:	e1 2c       	mov	r14, r1
     c38:	f1 2c       	mov	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     c3a:	b6 da       	rcall	.-2708   	; 0x1a8 <micros>
     c3c:	60 1b       	sub	r22, r16
     c3e:	71 0b       	sbc	r23, r17
     c40:	68 3e       	cpi	r22, 0xE8	; 232
     c42:	73 40       	sbci	r23, 0x03	; 3
     c44:	08 f4       	brcc	.+2      	; 0xc48 <main+0xa8>
     c46:	bb c0       	rjmp	.+374    	; 0xdbe <main+0x21e>
     c48:	c1 14       	cp	r12, r1
     c4a:	d1 04       	cpc	r13, r1
     c4c:	e1 04       	cpc	r14, r1
     c4e:	f1 04       	cpc	r15, r1
     c50:	09 f0       	breq	.+2      	; 0xc54 <main+0xb4>
     c52:	ad c0       	rjmp	.+346    	; 0xdae <main+0x20e>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:44
  delay(500);
  ledOFF();
     c54:	0d dc       	rcall	.-2022   	; 0x470 <ledOFF()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:46

  green_pattern = GREEN_LED_PATTERN_STANDARD;
     c56:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:37
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
}

bool LoadConfigFromEEPROM() {
  cell_module_config restoredConfig;
     c5a:	81 e1       	ldi	r24, 0x11	; 17
     c5c:	e3 e7       	ldi	r30, 0x73	; 115
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	de 01       	movw	r26, r28
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	01 90       	ld	r0, Z+
     c66:	0d 92       	st	X+, r0
     c68:	8a 95       	dec	r24
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <main+0xc4>
     c6c:	fe 01       	movw	r30, r28
     c6e:	31 96       	adiw	r30, 0x01	; 1
     c70:	7f 01       	movw	r14, r30
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     c72:	04 e1       	ldi	r16, 0x14	; 20
     c74:	10 e0       	ldi	r17, 0x00	; 0
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c76:	c8 01       	movw	r24, r16
     c78:	b3 d0       	rcall	.+358    	; 0xde0 <eeprom_read_byte>
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c7a:	f7 01       	movw	r30, r14
     c7c:	81 93       	st	Z+, r24
     c7e:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     c80:	0f 5f       	subi	r16, 0xFF	; 255
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c84:	05 32       	cpi	r16, 0x25	; 37
     c86:	11 05       	cpc	r17, r1
     c88:	b1 f7       	brne	.-20     	; 0xc76 <main+0xd6>
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	a8 d0       	rcall	.+336    	; 0xde0 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c90:	8a 8b       	std	Y+18, r24	; 0x12
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a4 d0       	rcall	.+328    	; 0xde0 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     c98:	8b 8b       	std	Y+19, r24	; 0x13
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 d0       	rcall	.+320    	; 0xde0 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     ca0:	8c 8b       	std	Y+20, r24	; 0x14
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9c d0       	rcall	.+312    	; 0xde0 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     ca8:	8d 8b       	std	Y+21, r24	; 0x15
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:44

  EEPROM.get(EEPROM_CONFIG_ADDRESS, restoredConfig);
  EEPROM.get(EEPROM_CHECKSUM_ADDRESS, existingChecksum);

  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	e2 d9       	rcall	.-3132   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:46

  if (checksum == existingChecksum) {
     cb0:	0a 89       	ldd	r16, Y+18	; 0x12
     cb2:	1b 89       	ldd	r17, Y+19	; 0x13
     cb4:	2c 89       	ldd	r18, Y+20	; 0x14
     cb6:	3d 89       	ldd	r19, Y+21	; 0x15
     cb8:	60 17       	cp	r22, r16
     cba:	71 07       	cpc	r23, r17
     cbc:	82 07       	cpc	r24, r18
     cbe:	93 07       	cpc	r25, r19
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <main+0x124>
     cc2:	84 c0       	rjmp	.+264    	; 0xdcc <main+0x22c>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:50
    
  //Load our EEPROM configuration
  if (!LoadConfigFromEEPROM()) {
    badConfiguration = true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <badConfiguration>
/media/D/Data/Powerwall/cellModule/e_setup.ino:52
  }
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
     cca:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <badConfiguration>
     cce:	81 11       	cpse	r24, r1
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <main+0x13a>
     cd2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
     cd6:	85 31       	cpi	r24, 0x15	; 21
     cd8:	31 f4       	brne	.+12     	; 0xce6 <main+0x146>
/media/D/Data/Powerwall/cellModule/e_setup.ino:53
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
     cda:	8f ee       	ldi	r24, 0xEF	; 239
     cdc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/e_setup.ino:54
    currentConfig.SLAVE_ADDR = DEFAULT_SLAVE_ADDR;//need to be here, compiler probably doesn't init struct properly
     ce0:	85 e1       	ldi	r24, 0x15	; 21
     ce2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/e_setup.ino:57
  }

  cli();//stop interrupts
     ce6:	f8 94       	cli
/media/D/Data/Powerwall/cellModule/e_setup.ino:59

  voltageBufIdx = 0;
     ce8:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <voltageBufIdx>
initTimer1():
/media/D/Data/Powerwall/cellModule/e_setup.ino:5
void initADC();

static inline void initTimer1(void)
{
  TCCR1 |= (1 << CTC1);  // clear timer on compare match
     cec:	80 b7       	in	r24, 0x30	; 48
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:6
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
     cf2:	80 b7       	in	r24, 0x30	; 48
     cf4:	8f 60       	ori	r24, 0x0F	; 15
     cf6:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:7
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	8d bd       	out	0x2d, r24	; 45
/media/D/Data/Powerwall/cellModule/e_setup.ino:8
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
     cfc:	89 b7       	in	r24, 0x39	; 57
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	89 bf       	out	0x39, r24	; 57
initADC():
/media/D/Data/Powerwall/cellModule/e_setup.ino:112

  //REFS1 REFS0 ADLAR REFS2 MUX3 MUX2 MUX1 MUX0
  //Internal 2.56V Voltage Reference without external bypass capacitor, disconnected from PB0 (AREF)
  //ADLAR =0 and PB3 (B0011) for INPUT (A3)
  //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
  ADMUX = B10010011;
     d02:	83 e9       	ldi	r24, 0x93	; 147
     d04:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/e_setup.ino:135
      (1 << ADPS0);      // set prescaler bit 0
    #endif
  */
  //#if (F_CPU == 8000000)
  //8MHZ clock so set prescaler to 64 (B110)
  ADCSRA =
     d06:	8e e8       	ldi	r24, 0x8E	; 142
     d08:	86 b9       	out	0x06, r24	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:66
  initTimer1();
  initADC();

  // WDTCSR configuration:     WDIE = 1: Interrupt Enable     WDE = 1 :Reset Enable
  // Enter Watchdog Configuration mode:
  WDTCR |= (1 << WDCE) | (1 << WDE);
     d0a:	81 b5       	in	r24, 0x21	; 33
     d0c:	88 61       	ori	r24, 0x18	; 24
     d0e:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:69

  // Set Watchdog settings - 4000ms timeout
  WDTCR = (1 << WDIE) | (1 << WDE) | (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (0 << WDP0);
     d10:	88 e6       	ldi	r24, 0x68	; 104
     d12:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:72

  // Enable Global Interrupts
  sei();
     d14:	78 94       	sei
/media/D/Data/Powerwall/cellModule/e_setup.ino:74

  init_i2c();
     d16:	9a da       	rcall	.-2764   	; 0x24c <init_i2c()>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:25
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests

    green_pattern = GREEN_LED_PANIC;
     d18:	15 e5       	ldi	r17, 0x55	; 85
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d1a:	01 e0       	ldi	r16, 0x01	; 1
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:3

void loop() {
  wdt_reset();
     d1c:	a8 95       	wdr
/media/D/Data/Powerwall/cellModule/z_main.ino:6

  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
     d1e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <badConfiguration>
     d22:	81 11       	cpse	r24, r1
     d24:	28 c0       	rjmp	.+80     	; 0xd76 <main+0x1d6>
     d26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
     d2a:	85 31       	cpi	r24, 0x15	; 21
     d2c:	21 f1       	breq	.+72     	; 0xd76 <main+0x1d6>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:23
     */
  TinyWireS_stop_check();
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
     d2e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     d32:	81 11       	cpse	r24, r1
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <main+0x1be>
     d36:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <inPanicMode>
     d3a:	81 11       	cpse	r24, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <main+0x1be>
/media/D/Data/Powerwall/cellModule/z_main.ino:25

    green_pattern = GREEN_LED_PANIC;
     d3e:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d42:	00 93 f5 00 	sts	0x00F5, r16	; 0x8000f5 <inPanicMode>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}

void disable_i2c(){
  USICR = 0; //control register
     d46:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
     d48:	1e b8       	out	0x0e, r1	; 14
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:29
    //Try resetting the i2c bus
    disable_i2c();
    init_i2c();
     d4a:	80 da       	rcall	.-2816   	; 0x24c <init_i2c()>
/media/D/Data/Powerwall/cellModule/z_main.ino:31

    error_counter++;
     d4c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <error_counter>
     d50:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <error_counter+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <error_counter+0x1>
     d5a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <error_counter>
/media/D/Data/Powerwall/cellModule/z_main.ino:34
  }

  if (i2cTmr > 0 && inPanicMode == true) {//return from panic mode
     d5e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     d62:	88 23       	and	r24, r24
     d64:	41 f0       	breq	.+16     	; 0xd76 <main+0x1d6>
     d66:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <inPanicMode>
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	21 f4       	brne	.+8      	; 0xd76 <main+0x1d6>
/media/D/Data/Powerwall/cellModule/z_main.ino:35
    green_pattern = GREEN_LED_PATTERN_STANDARD;
     d6e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:36
    inPanicMode = false;
     d72:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <inPanicMode>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:10
  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
    HandlePanicMode();//reset i2c bus if no communication going on for some time
  }

  if(inPanicMode)
     d76:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <inPanicMode>
     d7a:	88 23       	and	r24, r24
     d7c:	41 f0       	breq	.+16     	; 0xd8e <main+0x1ee>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     d7e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <targetBypassVoltage+0x1>
     d82:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     d86:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     d8a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <bypassEnabled>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:64
  usi_onRequestPtr = function;
}

void TinyWireS_stop_check()
{
    if (!usi_onReceiverPtr)
     d8e:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <usi_onReceiverPtr>
     d92:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <usi_onReceiverPtr+0x1>
     d96:	30 97       	sbiw	r30, 0x00	; 0
     d98:	09 f4       	brne	.+2      	; 0xd9c <main+0x1fc>
     d9a:	c0 cf       	rjmp	.-128    	; 0xd1c <main+0x17c>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:69
    {
        // no onReceive callback, nothing to do...
        return;
    }
    if (!(USISR & ( 1 << USIPF )))
     d9c:	75 9b       	sbis	0x0e, 5	; 14
     d9e:	be cf       	rjmp	.-132    	; 0xd1c <main+0x17c>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     da0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <rxCount>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:75
    {
        // Stop not detected
        return;
    }
    uint8_t amount = usiTwiAmountDataInReceiveBuffer();
    if (amount == 0)
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <main+0x20a>
     da8:	b9 cf       	rjmp	.-142    	; 0xd1c <main+0x17c>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:80
    {
        // no data in buffer
        return;
    }
    usi_onReceiverPtr(amount);
     daa:	09 95       	icall
     dac:	b7 cf       	rjmp	.-146    	; 0xd1c <main+0x17c>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:283
        ms--;
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	c8 1a       	sub	r12, r24
     db2:	d1 08       	sbc	r13, r1
     db4:	e1 08       	sbc	r14, r1
     db6:	f1 08       	sbc	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:284
        start += 1000;
     db8:	08 51       	subi	r16, 0x18	; 24
     dba:	1c 4f       	sbci	r17, 0xFC	; 252
     dbc:	3e cf       	rjmp	.-388    	; 0xc3a <main+0x9a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     dbe:	c1 14       	cp	r12, r1
     dc0:	d1 04       	cpc	r13, r1
     dc2:	e1 04       	cpc	r14, r1
     dc4:	f1 04       	cpc	r15, r1
     dc6:	09 f0       	breq	.+2      	; 0xdca <main+0x22a>
     dc8:	38 cf       	rjmp	.-400    	; 0xc3a <main+0x9a>
     dca:	44 cf       	rjmp	.-376    	; 0xc54 <main+0xb4>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:48
  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));

  if (checksum == existingChecksum) {
    //Clone the config into our global variable and return all OK
    memcpy(&currentConfig, &restoredConfig, sizeof(cell_module_config));
     dcc:	81 e1       	ldi	r24, 0x11	; 17
     dce:	fe 01       	movw	r30, r28
     dd0:	31 96       	adiw	r30, 0x01	; 1
     dd2:	a2 e6       	ldi	r26, 0x62	; 98
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	01 90       	ld	r0, Z+
     dd8:	0d 92       	st	X+, r0
     dda:	8a 95       	dec	r24
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <main+0x236>
     dde:	75 cf       	rjmp	.-278    	; 0xcca <main+0x12a>

00000de0 <eeprom_read_byte>:
eeprom_read_byte():
     de0:	e1 99       	sbic	0x1c, 1	; 28
     de2:	fe cf       	rjmp	.-4      	; 0xde0 <eeprom_read_byte>
     de4:	9f bb       	out	0x1f, r25	; 31
     de6:	8e bb       	out	0x1e, r24	; 30
     de8:	e0 9a       	sbi	0x1c, 0	; 28
     dea:	99 27       	eor	r25, r25
     dec:	8d b3       	in	r24, 0x1d	; 29
     dee:	08 95       	ret

00000df0 <eeprom_write_byte>:
eeprom_write_byte():
     df0:	26 2f       	mov	r18, r22

00000df2 <eeprom_write_r18>:
     df2:	e1 99       	sbic	0x1c, 1	; 28
     df4:	fe cf       	rjmp	.-4      	; 0xdf2 <eeprom_write_r18>
     df6:	1c ba       	out	0x1c, r1	; 28
     df8:	9f bb       	out	0x1f, r25	; 31
     dfa:	8e bb       	out	0x1e, r24	; 30
     dfc:	2d bb       	out	0x1d, r18	; 29
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	e2 9a       	sbi	0x1c, 2	; 28
     e04:	e1 9a       	sbi	0x1c, 1	; 28
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	08 95       	ret

00000e0c <__subsf3>:
__subsf3():
     e0c:	50 58       	subi	r21, 0x80	; 128

00000e0e <__addsf3>:
     e0e:	bb 27       	eor	r27, r27
     e10:	aa 27       	eor	r26, r26
     e12:	0e d0       	rcall	.+28     	; 0xe30 <__addsf3x>
     e14:	08 c1       	rjmp	.+528    	; 0x1026 <__fp_round>
__addsf3():
     e16:	f9 d0       	rcall	.+498    	; 0x100a <__fp_pscA>
     e18:	30 f0       	brcs	.+12     	; 0xe26 <__addsf3+0x18>
     e1a:	fe d0       	rcall	.+508    	; 0x1018 <__fp_pscB>
     e1c:	20 f0       	brcs	.+8      	; 0xe26 <__addsf3+0x18>
     e1e:	31 f4       	brne	.+12     	; 0xe2c <__addsf3+0x1e>
     e20:	9f 3f       	cpi	r25, 0xFF	; 255
     e22:	11 f4       	brne	.+4      	; 0xe28 <__addsf3+0x1a>
     e24:	1e f4       	brtc	.+6      	; 0xe2c <__addsf3+0x1e>
     e26:	ee c0       	rjmp	.+476    	; 0x1004 <__fp_nan>
     e28:	0e f4       	brtc	.+2      	; 0xe2c <__addsf3+0x1e>
     e2a:	e0 95       	com	r30
     e2c:	e7 fb       	bst	r30, 7
     e2e:	e4 c0       	rjmp	.+456    	; 0xff8 <__fp_inf>

00000e30 <__addsf3x>:
__addsf3x():
     e30:	e9 2f       	mov	r30, r25
     e32:	0a d1       	rcall	.+532    	; 0x1048 <__fp_split3>
     e34:	80 f3       	brcs	.-32     	; 0xe16 <__addsf3+0x8>
     e36:	ba 17       	cp	r27, r26
     e38:	62 07       	cpc	r22, r18
     e3a:	73 07       	cpc	r23, r19
     e3c:	84 07       	cpc	r24, r20
     e3e:	95 07       	cpc	r25, r21
     e40:	18 f0       	brcs	.+6      	; 0xe48 <__addsf3x+0x18>
     e42:	71 f4       	brne	.+28     	; 0xe60 <__addsf3x+0x30>
     e44:	9e f5       	brtc	.+102    	; 0xeac <__addsf3x+0x7c>
     e46:	22 c1       	rjmp	.+580    	; 0x108c <__fp_zero>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3x+0x1c>
     e4a:	e0 95       	com	r30
     e4c:	0b 2e       	mov	r0, r27
     e4e:	ba 2f       	mov	r27, r26
     e50:	a0 2d       	mov	r26, r0
     e52:	0b 01       	movw	r0, r22
     e54:	b9 01       	movw	r22, r18
     e56:	90 01       	movw	r18, r0
     e58:	0c 01       	movw	r0, r24
     e5a:	ca 01       	movw	r24, r20
     e5c:	a0 01       	movw	r20, r0
     e5e:	11 24       	eor	r1, r1
     e60:	ff 27       	eor	r31, r31
     e62:	59 1b       	sub	r21, r25
     e64:	99 f0       	breq	.+38     	; 0xe8c <__addsf3x+0x5c>
     e66:	59 3f       	cpi	r21, 0xF9	; 249
     e68:	50 f4       	brcc	.+20     	; 0xe7e <__addsf3x+0x4e>
     e6a:	50 3e       	cpi	r21, 0xE0	; 224
     e6c:	68 f1       	brcs	.+90     	; 0xec8 <__addsf3x+0x98>
     e6e:	1a 16       	cp	r1, r26
     e70:	f0 40       	sbci	r31, 0x00	; 0
     e72:	a2 2f       	mov	r26, r18
     e74:	23 2f       	mov	r18, r19
     e76:	34 2f       	mov	r19, r20
     e78:	44 27       	eor	r20, r20
     e7a:	58 5f       	subi	r21, 0xF8	; 248
     e7c:	f3 cf       	rjmp	.-26     	; 0xe64 <__addsf3x+0x34>
     e7e:	46 95       	lsr	r20
     e80:	37 95       	ror	r19
     e82:	27 95       	ror	r18
     e84:	a7 95       	ror	r26
     e86:	f0 40       	sbci	r31, 0x00	; 0
     e88:	53 95       	inc	r21
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__addsf3x+0x4e>
     e8c:	7e f4       	brtc	.+30     	; 0xeac <__addsf3x+0x7c>
     e8e:	1f 16       	cp	r1, r31
     e90:	ba 0b       	sbc	r27, r26
     e92:	62 0b       	sbc	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba f0       	brmi	.+46     	; 0xec8 <__addsf3x+0x98>
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <__addsf3x+0x96>
     e9e:	ff 0f       	add	r31, r31
     ea0:	bb 1f       	adc	r27, r27
     ea2:	66 1f       	adc	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	c2 f7       	brpl	.-16     	; 0xe9a <__addsf3x+0x6a>
     eaa:	0e c0       	rjmp	.+28     	; 0xec8 <__addsf3x+0x98>
     eac:	ba 0f       	add	r27, r26
     eae:	62 1f       	adc	r22, r18
     eb0:	73 1f       	adc	r23, r19
     eb2:	84 1f       	adc	r24, r20
     eb4:	48 f4       	brcc	.+18     	; 0xec8 <__addsf3x+0x98>
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f7 95       	ror	r31
     ec0:	9e 3f       	cpi	r25, 0xFE	; 254
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0x96>
     ec4:	b3 cf       	rjmp	.-154    	; 0xe2c <__addsf3+0x1e>
     ec6:	93 95       	inc	r25
     ec8:	88 0f       	add	r24, r24
     eca:	08 f0       	brcs	.+2      	; 0xece <__addsf3x+0x9e>
     ecc:	99 27       	eor	r25, r25
     ece:	ee 0f       	add	r30, r30
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret

00000ed6 <__cmpsf2>:
     ed6:	6c d0       	rcall	.+216    	; 0xfb0 <__fp_cmp>
     ed8:	08 f4       	brcc	.+2      	; 0xedc <__cmpsf2+0x6>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	08 95       	ret

00000ede <__fixunssfsi>:
     ede:	bc d0       	rcall	.+376    	; 0x1058 <__fp_splitA>
     ee0:	88 f0       	brcs	.+34     	; 0xf04 <__fixunssfsi+0x26>
     ee2:	9f 57       	subi	r25, 0x7F	; 127
     ee4:	90 f0       	brcs	.+36     	; 0xf0a <__fixunssfsi+0x2c>
     ee6:	b9 2f       	mov	r27, r25
     ee8:	99 27       	eor	r25, r25
     eea:	b7 51       	subi	r27, 0x17	; 23
     eec:	a0 f0       	brcs	.+40     	; 0xf16 <__fixunssfsi+0x38>
     eee:	d1 f0       	breq	.+52     	; 0xf24 <__fixunssfsi+0x46>
__fixunssfsi():
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	1a f0       	brmi	.+6      	; 0xf00 <__fixunssfsi+0x22>
     efa:	ba 95       	dec	r27
     efc:	c9 f7       	brne	.-14     	; 0xef0 <__fixunssfsi+0x12>
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__fixunssfsi+0x46>
     f00:	b1 30       	cpi	r27, 0x01	; 1
     f02:	81 f0       	breq	.+32     	; 0xf24 <__fixunssfsi+0x46>
     f04:	c3 d0       	rcall	.+390    	; 0x108c <__fp_zero>
     f06:	b1 e0       	ldi	r27, 0x01	; 1
     f08:	08 95       	ret
     f0a:	c0 c0       	rjmp	.+384    	; 0x108c <__fp_zero>
     f0c:	67 2f       	mov	r22, r23
     f0e:	78 2f       	mov	r23, r24
     f10:	88 27       	eor	r24, r24
     f12:	b8 5f       	subi	r27, 0xF8	; 248
     f14:	39 f0       	breq	.+14     	; 0xf24 <__fixunssfsi+0x46>
     f16:	b9 3f       	cpi	r27, 0xF9	; 249
     f18:	cc f3       	brlt	.-14     	; 0xf0c <__fixunssfsi+0x2e>
     f1a:	86 95       	lsr	r24
     f1c:	77 95       	ror	r23
     f1e:	67 95       	ror	r22
     f20:	b3 95       	inc	r27
     f22:	d9 f7       	brne	.-10     	; 0xf1a <__fixunssfsi+0x3c>
     f24:	3e f4       	brtc	.+14     	; 0xf34 <__fixunssfsi+0x56>
     f26:	90 95       	com	r25
     f28:	80 95       	com	r24
     f2a:	70 95       	com	r23
     f2c:	61 95       	neg	r22
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	8f 4f       	sbci	r24, 0xFF	; 255
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	08 95       	ret

00000f36 <__floatunsisf>:
__floatunsisf():
     f36:	e8 94       	clt
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <__floatsisf+0x12>

00000f3a <__floatsisf>:
     f3a:	97 fb       	bst	r25, 7
     f3c:	3e f4       	brtc	.+14     	; 0xf4c <__floatsisf+0x12>
     f3e:	90 95       	com	r25
     f40:	80 95       	com	r24
     f42:	70 95       	com	r23
     f44:	61 95       	neg	r22
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	99 23       	and	r25, r25
     f4e:	a9 f0       	breq	.+42     	; 0xf7a <__floatsisf+0x40>
     f50:	f9 2f       	mov	r31, r25
     f52:	96 e9       	ldi	r25, 0x96	; 150
     f54:	bb 27       	eor	r27, r27
     f56:	93 95       	inc	r25
     f58:	f6 95       	lsr	r31
     f5a:	87 95       	ror	r24
     f5c:	77 95       	ror	r23
     f5e:	67 95       	ror	r22
     f60:	b7 95       	ror	r27
     f62:	f1 11       	cpse	r31, r1
     f64:	f8 cf       	rjmp	.-16     	; 0xf56 <__floatsisf+0x1c>
     f66:	fa f4       	brpl	.+62     	; 0xfa6 <__floatsisf+0x6c>
     f68:	bb 0f       	add	r27, r27
     f6a:	11 f4       	brne	.+4      	; 0xf70 <__floatsisf+0x36>
     f6c:	60 ff       	sbrs	r22, 0
     f6e:	1b c0       	rjmp	.+54     	; 0xfa6 <__floatsisf+0x6c>
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 4f       	sbci	r24, 0xFF	; 255
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	16 c0       	rjmp	.+44     	; 0xfa6 <__floatsisf+0x6c>
     f7a:	88 23       	and	r24, r24
     f7c:	11 f0       	breq	.+4      	; 0xf82 <__floatsisf+0x48>
     f7e:	96 e9       	ldi	r25, 0x96	; 150
     f80:	11 c0       	rjmp	.+34     	; 0xfa4 <__floatsisf+0x6a>
     f82:	77 23       	and	r23, r23
     f84:	21 f0       	breq	.+8      	; 0xf8e <__floatsisf+0x54>
     f86:	9e e8       	ldi	r25, 0x8E	; 142
     f88:	87 2f       	mov	r24, r23
     f8a:	76 2f       	mov	r23, r22
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <__floatsisf+0x5e>
     f8e:	66 23       	and	r22, r22
     f90:	71 f0       	breq	.+28     	; 0xfae <__floatsisf+0x74>
     f92:	96 e8       	ldi	r25, 0x86	; 134
     f94:	86 2f       	mov	r24, r22
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	2a f0       	brmi	.+10     	; 0xfa6 <__floatsisf+0x6c>
     f9c:	9a 95       	dec	r25
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	da f7       	brpl	.-10     	; 0xf9c <__floatsisf+0x62>
     fa6:	88 0f       	add	r24, r24
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	97 f9       	bld	r25, 7
     fae:	08 95       	ret

00000fb0 <__fp_cmp>:
__fp_cmp():
     fb0:	99 0f       	add	r25, r25
     fb2:	00 08       	sbc	r0, r0
     fb4:	55 0f       	add	r21, r21
     fb6:	aa 0b       	sbc	r26, r26
     fb8:	e0 e8       	ldi	r30, 0x80	; 128
     fba:	fe ef       	ldi	r31, 0xFE	; 254
     fbc:	16 16       	cp	r1, r22
     fbe:	17 06       	cpc	r1, r23
     fc0:	e8 07       	cpc	r30, r24
     fc2:	f9 07       	cpc	r31, r25
     fc4:	c0 f0       	brcs	.+48     	; 0xff6 <__fp_cmp+0x46>
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	e4 07       	cpc	r30, r20
     fcc:	f5 07       	cpc	r31, r21
     fce:	98 f0       	brcs	.+38     	; 0xff6 <__fp_cmp+0x46>
     fd0:	62 1b       	sub	r22, r18
     fd2:	73 0b       	sbc	r23, r19
     fd4:	84 0b       	sbc	r24, r20
     fd6:	95 0b       	sbc	r25, r21
     fd8:	39 f4       	brne	.+14     	; 0xfe8 <__fp_cmp+0x38>
     fda:	0a 26       	eor	r0, r26
     fdc:	61 f0       	breq	.+24     	; 0xff6 <__fp_cmp+0x46>
     fde:	23 2b       	or	r18, r19
     fe0:	24 2b       	or	r18, r20
     fe2:	25 2b       	or	r18, r21
     fe4:	21 f4       	brne	.+8      	; 0xfee <__fp_cmp+0x3e>
     fe6:	08 95       	ret
     fe8:	0a 26       	eor	r0, r26
     fea:	09 f4       	brne	.+2      	; 0xfee <__fp_cmp+0x3e>
     fec:	a1 40       	sbci	r26, 0x01	; 1
     fee:	a6 95       	lsr	r26
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	81 1d       	adc	r24, r1
     ff4:	81 1d       	adc	r24, r1
     ff6:	08 95       	ret

00000ff8 <__fp_inf>:
__fp_inf():
     ff8:	97 f9       	bld	r25, 7
     ffa:	9f 67       	ori	r25, 0x7F	; 127
     ffc:	80 e8       	ldi	r24, 0x80	; 128
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	08 95       	ret

00001004 <__fp_nan>:
__fp_nan():
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	80 ec       	ldi	r24, 0xC0	; 192
    1008:	08 95       	ret

0000100a <__fp_pscA>:
__fp_pscA():
    100a:	00 24       	eor	r0, r0
    100c:	0a 94       	dec	r0
    100e:	16 16       	cp	r1, r22
    1010:	17 06       	cpc	r1, r23
    1012:	18 06       	cpc	r1, r24
    1014:	09 06       	cpc	r0, r25
    1016:	08 95       	ret

00001018 <__fp_pscB>:
__fp_pscB():
    1018:	00 24       	eor	r0, r0
    101a:	0a 94       	dec	r0
    101c:	12 16       	cp	r1, r18
    101e:	13 06       	cpc	r1, r19
    1020:	14 06       	cpc	r1, r20
    1022:	05 06       	cpc	r0, r21
    1024:	08 95       	ret

00001026 <__fp_round>:
__fp_round():
    1026:	09 2e       	mov	r0, r25
    1028:	03 94       	inc	r0
    102a:	00 0c       	add	r0, r0
    102c:	11 f4       	brne	.+4      	; 0x1032 <__fp_round+0xc>
    102e:	88 23       	and	r24, r24
    1030:	52 f0       	brmi	.+20     	; 0x1046 <__fp_round+0x20>
    1032:	bb 0f       	add	r27, r27
    1034:	40 f4       	brcc	.+16     	; 0x1046 <__fp_round+0x20>
    1036:	bf 2b       	or	r27, r31
    1038:	11 f4       	brne	.+4      	; 0x103e <__fp_round+0x18>
    103a:	60 ff       	sbrs	r22, 0
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <__fp_round+0x20>
    103e:	6f 5f       	subi	r22, 0xFF	; 255
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	8f 4f       	sbci	r24, 0xFF	; 255
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	08 95       	ret

00001048 <__fp_split3>:
__fp_split3():
    1048:	57 fd       	sbrc	r21, 7
    104a:	90 58       	subi	r25, 0x80	; 128
    104c:	44 0f       	add	r20, r20
    104e:	55 1f       	adc	r21, r21
    1050:	59 f0       	breq	.+22     	; 0x1068 <__fp_splitA+0x10>
    1052:	5f 3f       	cpi	r21, 0xFF	; 255
    1054:	71 f0       	breq	.+28     	; 0x1072 <__fp_splitA+0x1a>
    1056:	47 95       	ror	r20

00001058 <__fp_splitA>:
    1058:	88 0f       	add	r24, r24
    105a:	97 fb       	bst	r25, 7
    105c:	99 1f       	adc	r25, r25
    105e:	61 f0       	breq	.+24     	; 0x1078 <__fp_splitA+0x20>
    1060:	9f 3f       	cpi	r25, 0xFF	; 255
    1062:	79 f0       	breq	.+30     	; 0x1082 <__fp_splitA+0x2a>
    1064:	87 95       	ror	r24
    1066:	08 95       	ret
    1068:	12 16       	cp	r1, r18
    106a:	13 06       	cpc	r1, r19
    106c:	14 06       	cpc	r1, r20
    106e:	55 1f       	adc	r21, r21
    1070:	f2 cf       	rjmp	.-28     	; 0x1056 <__fp_split3+0xe>
    1072:	46 95       	lsr	r20
    1074:	f1 df       	rcall	.-30     	; 0x1058 <__fp_splitA>
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <__fp_splitA+0x30>
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	18 06       	cpc	r1, r24
    107e:	99 1f       	adc	r25, r25
    1080:	f1 cf       	rjmp	.-30     	; 0x1064 <__fp_splitA+0xc>
    1082:	86 95       	lsr	r24
    1084:	71 05       	cpc	r23, r1
    1086:	61 05       	cpc	r22, r1
    1088:	08 94       	sec
    108a:	08 95       	ret

0000108c <__fp_zero>:
__fp_zero():
    108c:	e8 94       	clt

0000108e <__fp_szero>:
    108e:	bb 27       	eor	r27, r27
    1090:	66 27       	eor	r22, r22
    1092:	77 27       	eor	r23, r23
    1094:	cb 01       	movw	r24, r22
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__mulsf3>:
__mulsf3():
    109a:	0a d0       	rcall	.+20     	; 0x10b0 <__mulsf3x>
    109c:	c4 cf       	rjmp	.-120    	; 0x1026 <__fp_round>
    109e:	b5 df       	rcall	.-150    	; 0x100a <__fp_pscA>
    10a0:	28 f0       	brcs	.+10     	; 0x10ac <__mulsf3+0x12>
    10a2:	ba df       	rcall	.-140    	; 0x1018 <__fp_pscB>
    10a4:	18 f0       	brcs	.+6      	; 0x10ac <__mulsf3+0x12>
    10a6:	95 23       	and	r25, r21
    10a8:	09 f0       	breq	.+2      	; 0x10ac <__mulsf3+0x12>
    10aa:	a6 cf       	rjmp	.-180    	; 0xff8 <__fp_inf>
    10ac:	ab cf       	rjmp	.-170    	; 0x1004 <__fp_nan>
    10ae:	ef cf       	rjmp	.-34     	; 0x108e <__fp_szero>

000010b0 <__mulsf3x>:
__mulsf3x():
    10b0:	cb df       	rcall	.-106    	; 0x1048 <__fp_split3>
    10b2:	a8 f3       	brcs	.-22     	; 0x109e <__mulsf3+0x4>

000010b4 <__mulsf3_pse>:
    10b4:	99 23       	and	r25, r25
    10b6:	d9 f3       	breq	.-10     	; 0x10ae <__mulsf3+0x14>
    10b8:	55 23       	and	r21, r21
    10ba:	c9 f3       	breq	.-14     	; 0x10ae <__mulsf3+0x14>
    10bc:	95 0f       	add	r25, r21
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	55 1f       	adc	r21, r21
    10c2:	aa 27       	eor	r26, r26
    10c4:	ee 27       	eor	r30, r30
    10c6:	ff 27       	eor	r31, r31
    10c8:	bb 27       	eor	r27, r27
    10ca:	00 24       	eor	r0, r0
    10cc:	08 94       	sec
    10ce:	67 95       	ror	r22
    10d0:	20 f4       	brcc	.+8      	; 0x10da <__mulsf3_pse+0x26>
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	b4 1f       	adc	r27, r20
    10d8:	0a 1e       	adc	r0, r26
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	44 1f       	adc	r20, r20
    10e0:	aa 1f       	adc	r26, r26
    10e2:	66 95       	lsr	r22
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__mulsf3_pse+0x1c>
    10e6:	77 95       	ror	r23
    10e8:	30 f4       	brcc	.+12     	; 0x10f6 <__mulsf3_pse+0x42>
    10ea:	f3 0f       	add	r31, r19
    10ec:	b4 1f       	adc	r27, r20
    10ee:	0a 1e       	adc	r0, r26
    10f0:	12 1e       	adc	r1, r18
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <__mulsf3_pse+0x42>
    10f4:	63 95       	inc	r22
    10f6:	33 0f       	add	r19, r19
    10f8:	44 1f       	adc	r20, r20
    10fa:	aa 1f       	adc	r26, r26
    10fc:	22 1f       	adc	r18, r18
    10fe:	76 95       	lsr	r23
    1100:	99 f7       	brne	.-26     	; 0x10e8 <__mulsf3_pse+0x34>
    1102:	87 95       	ror	r24
    1104:	20 f4       	brcc	.+8      	; 0x110e <__mulsf3_pse+0x5a>
    1106:	b4 0f       	add	r27, r20
    1108:	0a 1e       	adc	r0, r26
    110a:	12 1e       	adc	r1, r18
    110c:	63 1f       	adc	r22, r19
    110e:	44 0f       	add	r20, r20
    1110:	aa 1f       	adc	r26, r26
    1112:	22 1f       	adc	r18, r18
    1114:	33 1f       	adc	r19, r19
    1116:	86 95       	lsr	r24
    1118:	a9 f7       	brne	.-22     	; 0x1104 <__mulsf3_pse+0x50>
    111a:	86 2f       	mov	r24, r22
    111c:	71 2d       	mov	r23, r1
    111e:	60 2d       	mov	r22, r0
    1120:	11 24       	eor	r1, r1
    1122:	9f 57       	subi	r25, 0x7F	; 127
    1124:	50 40       	sbci	r21, 0x00	; 0
    1126:	8a f0       	brmi	.+34     	; 0x114a <__mulsf3_pse+0x96>
    1128:	e1 f0       	breq	.+56     	; 0x1162 <__mulsf3_pse+0xae>
    112a:	88 23       	and	r24, r24
    112c:	4a f0       	brmi	.+18     	; 0x1140 <__mulsf3_pse+0x8c>
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	bb 1f       	adc	r27, r27
    1134:	66 1f       	adc	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	91 50       	subi	r25, 0x01	; 1
    113c:	50 40       	sbci	r21, 0x00	; 0
    113e:	a9 f7       	brne	.-22     	; 0x112a <__mulsf3_pse+0x76>
    1140:	9e 3f       	cpi	r25, 0xFE	; 254
    1142:	51 05       	cpc	r21, r1
    1144:	70 f0       	brcs	.+28     	; 0x1162 <__mulsf3_pse+0xae>
    1146:	58 cf       	rjmp	.-336    	; 0xff8 <__fp_inf>
    1148:	a2 cf       	rjmp	.-188    	; 0x108e <__fp_szero>
    114a:	5f 3f       	cpi	r21, 0xFF	; 255
    114c:	ec f3       	brlt	.-6      	; 0x1148 <__mulsf3_pse+0x94>
    114e:	98 3e       	cpi	r25, 0xE8	; 232
    1150:	dc f3       	brlt	.-10     	; 0x1148 <__mulsf3_pse+0x94>
    1152:	86 95       	lsr	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	b7 95       	ror	r27
    115a:	f7 95       	ror	r31
    115c:	e7 95       	ror	r30
    115e:	9f 5f       	subi	r25, 0xFF	; 255
    1160:	c1 f7       	brne	.-16     	; 0x1152 <__mulsf3_pse+0x9e>
    1162:	fe 2b       	or	r31, r30
    1164:	88 0f       	add	r24, r24
    1166:	91 1d       	adc	r25, r1
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret

00001170 <_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1170:	f8 94       	cli

00001172 <__stop_program>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1172:	ff cf       	rjmp	.-2      	; 0x1172 <__stop_program>
