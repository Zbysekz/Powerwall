
/tmp/arduino_build_748426/cellModule.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	11 c5       	rjmp	.+2594   	; 0xa2a <__vector_3>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	c5 c3       	rjmp	.+1930   	; 0x796 <__vector_5>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	9b c5       	rjmp	.+2870   	; 0xb48 <__vector_8>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	bf c4       	rjmp	.+2430   	; 0x99a <__vector_13>
      1c:	06 c4       	rjmp	.+2060   	; 0x82a <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
      2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
      30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
      36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf e5       	ldi	r28, 0x5F	; 95
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      48:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      4e:	ea ec       	ldi	r30, 0xCA	; 202
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      50:	f0 e1       	ldi	r31, 0x10	; 16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      54:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      56:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      58:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      5a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      5e:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      60:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      62:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      68:	a6 3e       	cpi	r26, 0xE6	; 230
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      6a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
      6e:	c4 d5       	rcall	.+2952   	; 0xbf8 <main>
      70:	2a c8       	rjmp	.-4012   	; 0xfffff0c6 <__eeprom_end+0xff7ef0c6>

00000072 <__bad_interrupt>:
__vector_1():
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]>:
_Z14calculateCRC32PKhj.constprop.9():
/media/D/Data/Powerwall/cellModule/b_functions.ino:12
inline void ledOFF() {
  DDRB |= (1 << DDB1);
  PORTB &= ~(1 << PB1);
}

uint32_t calculateCRC32(const uint8_t *data, size_t length)
      74:	4f 92       	push	r4
      76:	5f 92       	push	r5
      78:	6f 92       	push	r6
      7a:	7f 92       	push	r7
      7c:	8f 92       	push	r8
      7e:	9f 92       	push	r9
      80:	af 92       	push	r10
      82:	bf 92       	push	r11
      84:	cf 92       	push	r12
      86:	df 92       	push	r13
      88:	ef 92       	push	r14
      8a:	ff 92       	push	r15
      8c:	fc 01       	movw	r30, r24
      8e:	39 96       	adiw	r30, 0x09	; 9
/media/D/Data/Powerwall/cellModule/b_functions.ino:14
{
  uint32_t crc = 0xffffffff;
      90:	cc 24       	eor	r12, r12
      92:	ca 94       	dec	r12
      94:	dc 2c       	mov	r13, r12
      96:	76 01       	movw	r14, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:15
  while (length--) {
      98:	8e 17       	cp	r24, r30
      9a:	9f 07       	cpc	r25, r31
      9c:	e1 f1       	breq	.+120    	; 0x116 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0xa2>
/media/D/Data/Powerwall/cellModule/b_functions.ino:16
    uint8_t c = *data++;
      9e:	dc 01       	movw	r26, r24
      a0:	4d 90       	ld	r4, X+
      a2:	cd 01       	movw	r24, r26
      a4:	28 e0       	ldi	r18, 0x08	; 8
      a6:	30 e0       	ldi	r19, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      a8:	40 e8       	ldi	r20, 0x80	; 128
      aa:	84 2e       	mov	r8, r20
      ac:	91 2c       	mov	r9, r1
      ae:	a1 2c       	mov	r10, r1
      b0:	b1 2c       	mov	r11, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:19
      bool bit = crc & 0x80000000;
      if (c & i) {
      b2:	51 2c       	mov	r5, r1
      b4:	71 2c       	mov	r7, r1
      b6:	61 2c       	mov	r6, r1
      b8:	b3 01       	movw	r22, r6
      ba:	a2 01       	movw	r20, r4
      bc:	48 21       	and	r20, r8
      be:	59 21       	and	r21, r9
      c0:	6a 21       	and	r22, r10
      c2:	7b 21       	and	r23, r11
      c4:	45 2b       	or	r20, r21
      c6:	46 2b       	or	r20, r22
      c8:	47 2b       	or	r20, r23
      ca:	f1 f4       	brne	.+60     	; 0x108 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x94>
/media/D/Data/Powerwall/cellModule/b_functions.ino:18
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      bool bit = crc & 0x80000000;
      cc:	b7 01       	movw	r22, r14
      ce:	a6 01       	movw	r20, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      if (c & i) {
        bit = !bit;
      d0:	44 27       	eor	r20, r20
      d2:	77 fd       	sbrc	r23, 7
      d4:	43 95       	inc	r20
      d6:	55 27       	eor	r21, r21
      d8:	66 27       	eor	r22, r22
      da:	77 27       	eor	r23, r23
/media/D/Data/Powerwall/cellModule/b_functions.ino:22
      }
      crc <<= 1;
      dc:	cc 0c       	add	r12, r12
      de:	dd 1c       	adc	r13, r13
      e0:	ee 1c       	adc	r14, r14
      e2:	ff 1c       	adc	r15, r15
/media/D/Data/Powerwall/cellModule/b_functions.ino:23
      if (bit) {
      e4:	44 23       	and	r20, r20
      e6:	41 f0       	breq	.+16     	; 0xf8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x84>
/media/D/Data/Powerwall/cellModule/b_functions.ino:24
        crc ^= 0x04c11db7;
      e8:	b7 eb       	ldi	r27, 0xB7	; 183
      ea:	cb 26       	eor	r12, r27
      ec:	bd e1       	ldi	r27, 0x1D	; 29
      ee:	db 26       	eor	r13, r27
      f0:	b1 ec       	ldi	r27, 0xC1	; 193
      f2:	eb 26       	eor	r14, r27
      f4:	b4 e0       	ldi	r27, 0x04	; 4
      f6:	fb 26       	eor	r15, r27
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
uint32_t calculateCRC32(const uint8_t *data, size_t length)
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      f8:	b6 94       	lsr	r11
      fa:	a7 94       	ror	r10
      fc:	97 94       	ror	r9
      fe:	87 94       	ror	r8
     100:	21 50       	subi	r18, 0x01	; 1
     102:	31 09       	sbc	r19, r1
     104:	c9 f6       	brne	.-78     	; 0xb8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x44>
     106:	c8 cf       	rjmp	.-112    	; 0x98 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x24>
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      bool bit = crc & 0x80000000;
      if (c & i) {
        bit = !bit;
     108:	b7 01       	movw	r22, r14
     10a:	a6 01       	movw	r20, r12
     10c:	40 95       	com	r20
     10e:	50 95       	com	r21
     110:	60 95       	com	r22
     112:	70 95       	com	r23
     114:	dd cf       	rjmp	.-70     	; 0xd0 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]+0x5c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:29
        crc ^= 0x04c11db7;
      }
    }
  }
  return crc;
}
     116:	c7 01       	movw	r24, r14
     118:	b6 01       	movw	r22, r12
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	9f 90       	pop	r9
     128:	8f 90       	pop	r8
     12a:	7f 90       	pop	r7
     12c:	6f 90       	pop	r6
     12e:	5f 90       	pop	r5
     130:	4f 90       	pop	r4
     132:	08 95       	ret

00000134 <TwoWire::write(unsigned char) [clone .constprop.8]>:
_ZN7TwoWire5writeEh.constprop.8():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     134:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <TWI_TxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     138:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     13c:	2f 5f       	subi	r18, 0xFF	; 255
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     13e:	92 1b       	sub	r25, r18
     140:	9f 70       	andi	r25, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:513
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     142:	91 f0       	breq	.+36     	; 0x168 <TwoWire::write(unsigned char) [clone .constprop.8]+0x34>
USI_TWI_Transmit_Byte():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     144:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <TWI_TxHead>
     148:	9f 5f       	subi	r25, 0xFF	; 255
     14a:	9f 70       	andi	r25, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
     14c:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <TWI_TxTail>
     150:	92 17       	cp	r25, r18
     152:	e1 f3       	breq	.-8      	; 0x14c <TwoWire::write(unsigned char) [clone .constprop.8]+0x18>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     154:	e9 2f       	mov	r30, r25
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	ec 57       	subi	r30, 0x7C	; 124
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	80 83       	st	Z, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
     15e:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <TWI_TxHead>
_ZN7TwoWire5writeEh.constprop.8():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:519
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:514
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
      return 0;
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	80 e0       	ldi	r24, 0x00	; 0
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:520
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
}
     16c:	08 95       	ret

0000016e <digitalWrite.constprop.2>:
digitalWrite.constprop.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     16e:	ea e3       	ldi	r30, 0x3A	; 58
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     174:	e4 e3       	ldi	r30, 0x34	; 52
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     17a:	ee e2       	ldi	r30, 0x2E	; 46
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	e4 91       	lpm	r30, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     180:	ee 23       	and	r30, r30
     182:	c1 f0       	breq	.+48     	; 0x1b4 <digitalWrite.constprop.2+0x46>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     184:	22 23       	and	r18, r18
     186:	29 f0       	breq	.+10     	; 0x192 <digitalWrite.constprop.2+0x24>
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     188:	21 30       	cpi	r18, 0x01	; 1
     18a:	a9 f4       	brne	.+42     	; 0x1b6 <digitalWrite.constprop.2+0x48>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     18c:	2a b5       	in	r18, 0x2a	; 42
     18e:	2f 77       	andi	r18, 0x7F	; 127
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     190:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	ec 5d       	subi	r30, 0xDC	; 220
     19a:	ff 4f       	sbci	r31, 0xFF	; 255
     19c:	a5 91       	lpm	r26, Z+
     19e:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:151

  if (val == LOW) {
     1a0:	81 11       	cpse	r24, r1
     1a2:	1a c0       	rjmp	.+52     	; 0x1d8 <digitalWrite.constprop.2+0x6a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:152
    uint8_t oldSREG = SREG;
     1a4:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:153
    cli();
     1a6:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:154
    *out &= ~bit;
     1a8:	2c 91       	ld	r18, X
     1aa:	e9 2f       	mov	r30, r25
     1ac:	e0 95       	com	r30
     1ae:	e2 23       	and	r30, r18
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     1b0:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
     1b2:	8f bf       	out	0x3f, r24	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:162
  }
}
     1b4:	08 95       	ret
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     1b6:	22 30       	cpi	r18, 0x02	; 2
     1b8:	19 f4       	brne	.+6      	; 0x1c0 <digitalWrite.constprop.2+0x52>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     1ba:	2a b5       	in	r18, 0x2a	; 42
     1bc:	2f 7d       	andi	r18, 0xDF	; 223
     1be:	e8 cf       	rjmp	.-48     	; 0x190 <digitalWrite.constprop.2+0x22>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
     1c0:	23 30       	cpi	r18, 0x03	; 3
     1c2:	21 f4       	brne	.+8      	; 0x1cc <digitalWrite.constprop.2+0x5e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
     1c4:	20 b7       	in	r18, 0x30	; 48
     1c6:	2f 7d       	andi	r18, 0xDF	; 223
     1c8:	20 bf       	out	0x30, r18	; 48
     1ca:	e3 cf       	rjmp	.-58     	; 0x192 <digitalWrite.constprop.2+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
     1cc:	24 30       	cpi	r18, 0x04	; 4
     1ce:	09 f7       	brne	.-62     	; 0x192 <digitalWrite.constprop.2+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
     1d0:	2c b5       	in	r18, 0x2c	; 44
     1d2:	2f 7d       	andi	r18, 0xDF	; 223
     1d4:	2c bd       	out	0x2c, r18	; 44
     1d6:	dd cf       	rjmp	.-70     	; 0x192 <digitalWrite.constprop.2+0x24>
digitalWrite.constprop.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:157
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     1d8:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:158
    cli();
     1da:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    *out |= bit;
     1dc:	ec 91       	ld	r30, X
     1de:	e9 2b       	or	r30, r25
     1e0:	e7 cf       	rjmp	.-50     	; 0x1b0 <digitalWrite.constprop.2+0x42>

000001e2 <micros>:
micros():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     1e2:	3f b7       	in	r19, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:183

    cli();
     1e4:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:184
    m = millis_timer_overflow_count;
     1e6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis_timer_overflow_count>
     1ea:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis_timer_overflow_count+0x1>
     1ee:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis_timer_overflow_count+0x2>
     1f2:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     1f6:	22 b7       	in	r18, 0x32	; 50
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:201

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     1f8:	08 b6       	in	r0, 0x38	; 56
     1fa:	01 fe       	sbrs	r0, 1
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <micros+0x26>
     1fe:	2f 3f       	cpi	r18, 0xFF	; 255
     200:	19 f0       	breq	.+6      	; 0x208 <micros+0x26>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:202
      m++;
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	a1 1d       	adc	r26, r1
     206:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     208:	3f bf       	out	0x3f, r19	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     20a:	ba 2f       	mov	r27, r26
     20c:	a9 2f       	mov	r26, r25
     20e:	98 2f       	mov	r25, r24
     210:	88 27       	eor	r24, r24
     212:	bc 01       	movw	r22, r24
     214:	cd 01       	movw	r24, r26
     216:	62 0f       	add	r22, r18
     218:	71 1d       	adc	r23, r1
     21a:	81 1d       	adc	r24, r1
     21c:	91 1d       	adc	r25, r1
     21e:	43 e0       	ldi	r20, 0x03	; 3
     220:	66 0f       	add	r22, r22
     222:	77 1f       	adc	r23, r23
     224:	88 1f       	adc	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	4a 95       	dec	r20
     22a:	d1 f7       	brne	.-12     	; 0x220 <micros+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     22c:	08 95       	ret

0000022e <delay>:
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:276
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	6b 01       	movw	r12, r22
     23c:	7c 01       	movw	r14, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:278
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     23e:	d1 df       	rcall	.-94     	; 0x1e2 <micros>
     240:	eb 01       	movw	r28, r22
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     242:	cf df       	rcall	.-98     	; 0x1e2 <micros>
     244:	6c 1b       	sub	r22, r28
     246:	7d 0b       	sbc	r23, r29
     248:	68 3e       	cpi	r22, 0xE8	; 232
     24a:	73 40       	sbci	r23, 0x03	; 3
     24c:	a0 f0       	brcs	.+40     	; 0x276 <__stack+0x17>
     24e:	c1 14       	cp	r12, r1
     250:	d1 04       	cpc	r13, r1
     252:	e1 04       	cpc	r14, r1
     254:	f1 04       	cpc	r15, r1
     256:	39 f4       	brne	.+14     	; 0x266 <__stack+0x7>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:292
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:283
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	c8 1a       	sub	r12, r24
     26a:	d1 08       	sbc	r13, r1
     26c:	e1 08       	sbc	r14, r1
     26e:	f1 08       	sbc	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:284
        start += 1000;
     270:	c8 51       	subi	r28, 0x18	; 24
     272:	dc 4f       	sbci	r29, 0xFC	; 252
     274:	e6 cf       	rjmp	.-52     	; 0x242 <delay+0x14>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     276:	c1 14       	cp	r12, r1
     278:	d1 04       	cpc	r13, r1
     27a:	e1 04       	cpc	r14, r1
     27c:	f1 04       	cpc	r15, r1
     27e:	09 f7       	brne	.-62     	; 0x242 <delay+0x14>
     280:	eb cf       	rjmp	.-42     	; 0x258 <delay+0x2a>

00000282 <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
     282:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
     286:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <TWI_RxHead>
     28a:	89 1b       	sub	r24, r25
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:138
}
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	08 95       	ret

00000290 <TwoWire::read() [clone .constprop.6]>:
_ZN7TwoWire4readEv.constprop.6():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:545

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     290:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <TwoWire::BufferLength>
     294:	88 23       	and	r24, r24
     296:	39 f0       	breq	.+14     	; 0x2a6 <TwoWire::read() [clone .constprop.6]+0x16>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:546
    return BufferLength - BufferIndex;
     298:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <TwoWire::BufferIndex>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:559
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     29c:	82 13       	cpse	r24, r18
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <TwoWire::read() [clone .constprop.6]+0x40>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:556

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	9f ef       	ldi	r25, 0xFF	; 255
     2a4:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:548
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    return BufferLength - BufferIndex;
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     2a6:	ed df       	rcall	.-38     	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:559
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     2a8:	88 23       	and	r24, r24
     2aa:	d1 f3       	breq	.-12     	; 0x2a0 <TwoWire::read() [clone .constprop.6]+0x10>
USI_TWI_Receive_Byte():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
     2ac:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
     2b0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <TWI_RxHead>
     2b4:	98 17       	cp	r25, r24
     2b6:	e1 f3       	breq	.-8      	; 0x2b0 <TwoWire::read() [clone .constprop.6]+0x20>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
     2b8:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <TWI_RxTail>
     2bc:	ef 5f       	subi	r30, 0xFF	; 255
     2be:	ef 70       	andi	r30, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
     2c0:	e0 93 e1 00 	sts	0x00E1, r30	; 0x8000e1 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ec 58       	subi	r30, 0x8C	; 140
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
_ZN7TwoWire4readEv.constprop.6():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:564
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
     2ca:	80 81       	ld	r24, Z
     2cc:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:569
    }
  }

  return value;
}
     2ce:	08 95       	ret
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:561
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
     2d0:	e2 2f       	mov	r30, r18
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ec 58       	subi	r30, 0x8C	; 140
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	80 81       	ld	r24, Z
     2da:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:562
      ++BufferIndex;
     2dc:	2f 5f       	subi	r18, 0xFF	; 255
     2de:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <TwoWire::BufferIndex>
     2e2:	08 95       	ret

000002e4 <init_i2c()>:
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:11
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
}
void init_i2c() {
  Wire.begin(currentConfig.SLAVE_ADDR);
     2e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentConfig>
begin():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:371

  USI_TWI_Master_Initialise();
}

void TwoWire::begin(uint8_t address) {
  BufferIndex = 0;
     2e8:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <TwoWire::BufferIndex>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:372
  BufferLength = 0;
     2ec:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <TwoWire::BufferLength>
Flush_TWI_Buffers():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:54
static volatile uint8_t TWI_TxHead;
static volatile uint8_t TWI_TxTail;

void Flush_TWI_Buffers(void)
{
  TWI_RxTail = 0;
     2f0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:55
  TWI_RxHead = 0;
     2f4:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:56
  TWI_TxTail = 0;
     2f8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:57
  TWI_TxHead = 0;
     2fc:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <TWI_TxHead>
USI_TWI_Slave_Initialise():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:69
----------------------------------------------------------*/
void USI_TWI_Slave_Initialise(unsigned char TWI_ownAddress)
{
  Flush_TWI_Buffers();

  TWI_slaveAddress = TWI_ownAddress;
     300:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <TWI_slaveAddress>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:71

  USI_TWI_On_Slave_Transmit = 0;
     304:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <USI_TWI_On_Slave_Transmit+0x1>
     308:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <USI_TWI_On_Slave_Transmit>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:72
  USI_TWI_On_Slave_Receive = 0;
     30c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <USI_TWI_On_Slave_Receive+0x1>
     310:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <USI_TWI_On_Slave_Receive>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:74

  PORT_USI_CL |= (1 << PORT_USI_SCL);     // Set SCL high
     314:	c2 9a       	sbi	0x18, 2	; 24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:75
  PORT_USI |= (1 << PORT_USI_SDA);        // Set SDA high
     316:	c0 9a       	sbi	0x18, 0	; 24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:76
  DDR_USI_CL |= (1 << PORT_USI_SCL);      // Set SCL as output
     318:	ba 9a       	sbi	0x17, 2	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:77
  DDR_USI &= ~(1 << PORT_USI_SDA);        // Set SDA as input
     31a:	b8 98       	cbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:78
  USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     31c:	88 ea       	ldi	r24, 0xA8	; 168
     31e:	8d b9       	out	0x0d, r24	; 13
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:83
          (1 << USIWM1) | (0 << USIWM0) | // Set USI in Two-wire mode. No USI Counter overflow prior
                                          // to first Start Condition (potential failure)
          (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
          (0 << USITC);
  USISR = 0xF0; // Clear all flags and reset overflow counter
     320:	80 ef       	ldi	r24, 0xF0	; 240
     322:	8e b9       	out	0x0e, r24	; 14
onRequest():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:599
  USI_TWI_On_Slave_Receive = function;
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) ) {
  USI_TWI_On_Slave_Transmit = function;
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <USI_TWI_On_Slave_Transmit+0x1>
     32c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <USI_TWI_On_Slave_Transmit>
onReceive():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:594
  // XXX: to be implemented.
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) ) {
  USI_TWI_On_Slave_Receive = function;
     330:	87 ec       	ldi	r24, 0xC7	; 199
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <USI_TWI_On_Slave_Receive+0x1>
     338:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <USI_TWI_On_Slave_Receive>
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:14
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);
}
     33c:	08 95       	ret

0000033e <getVoltageMeasurement()>:
_Z21getVoltageMeasurementv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	20 e0       	ldi	r18, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:120
}


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	dc 01       	movw	r26, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:122
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
    sum += voltageBuff[k];
     348:	f9 01       	movw	r30, r18
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	e3 56       	subi	r30, 0x63	; 99
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	40 81       	ld	r20, Z
     354:	51 81       	ldd	r21, Z+1	; 0x01
     356:	84 0f       	add	r24, r20
     358:	95 1f       	adc	r25, r21
     35a:	a1 1d       	adc	r26, r1
     35c:	b1 1d       	adc	r27, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	20 31       	cpi	r18, 0x10	; 16
     364:	31 05       	cpc	r19, r1
     366:	81 f7       	brne	.-32     	; 0x348 <getVoltageMeasurement()+0xa>
/media/D/Data/Powerwall/cellModule/b_functions.ino:127
    sum += voltageBuff[k];
  }
  //Shift the bits to match OVERSAMPLE_LOOP size (buffer size of 8=3 shifts, 16=4 shifts)
  //Assume perfect reference of 2560mV for reference - we will correct for this with voltageCalibration

  uint16_t raw = (uint16_t)(sum / OVERSAMPLE_LOOP);
     368:	24 e0       	ldi	r18, 0x04	; 4
     36a:	b6 95       	lsr	r27
     36c:	a7 95       	ror	r26
     36e:	97 95       	ror	r25
     370:	87 95       	ror	r24
     372:	2a 95       	dec	r18
     374:	d1 f7       	brne	.-12     	; 0x36a <getVoltageMeasurement()+0x2c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:129

  return (uint16_t)((float)raw * currentConfig.voltageCalibration);
     376:	bc 01       	movw	r22, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	87 d5       	rcall	.+2830   	; 0xe8c <__floatunsisf>
     37e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <currentConfig+0x1>
     382:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <currentConfig+0x2>
     386:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <currentConfig+0x3>
     38a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <currentConfig+0x4>
     38e:	08 d6       	rcall	.+3088   	; 0xfa0 <__mulsf3>
     390:	51 d5       	rcall	.+2722   	; 0xe34 <__fixunssfsi>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	7a d5       	rcall	.+2804   	; 0xe8c <__floatunsisf>
/media/D/Data/Powerwall/cellModule/b_functions.ino:130
}
     398:	08 95       	ret

0000039a <readFloat()>:
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:97
  Wire.write(float_to_bytes.b[1]);
  Wire.write(float_to_bytes.b[2]);
  Wire.write(float_to_bytes.b[3]);
}

float readFloat() {
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
/media/D/Data/Powerwall/cellModule/b_functions.ino:98
  float_to_bytes.b[0] = Wire.read();
     39e:	78 df       	rcall	.-272    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3a0:	c4 e9       	ldi	r28, 0x94	; 148
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	88 83       	st	Y, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:99
  float_to_bytes.b[1] = Wire.read();
     3a6:	74 df       	rcall	.-280    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3a8:	89 83       	std	Y+1, r24	; 0x01
/media/D/Data/Powerwall/cellModule/b_functions.ino:100
  float_to_bytes.b[2] = Wire.read();
     3aa:	72 df       	rcall	.-284    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3ac:	8a 83       	std	Y+2, r24	; 0x02
/media/D/Data/Powerwall/cellModule/b_functions.ino:101
  float_to_bytes.b[3] = Wire.read();
     3ae:	70 df       	rcall	.-288    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     3b0:	8b 83       	std	Y+3, r24	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:103

  return float_to_bytes.val;
     3b2:	68 81       	ld	r22, Y
     3b4:	79 81       	ldd	r23, Y+1	; 0x01
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	9b 81       	ldd	r25, Y+3	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:104
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <sendFloat(float)>:
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:88

void sendByte(uint8_t number) {
  Wire.write(number);
}

void sendFloat(float number) {
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	17 2f       	mov	r17, r23
     3c8:	d8 2f       	mov	r29, r24
     3ca:	c9 2f       	mov	r28, r25
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
  float_to_bytes.val = number;
     3cc:	86 2f       	mov	r24, r22
     3ce:	97 2f       	mov	r25, r23
     3d0:	ad 2f       	mov	r26, r29
     3d2:	bc 2f       	mov	r27, r28
     3d4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <float_to_bytes>
     3d8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <float_to_bytes+0x1>
     3dc:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <float_to_bytes+0x2>
     3e0:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <float_to_bytes+0x3>
/media/D/Data/Powerwall/cellModule/b_functions.ino:91

  Wire.write(float_to_bytes.b[0]);
     3e4:	a7 de       	rcall	.-690    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:92
  Wire.write(float_to_bytes.b[1]);
     3e6:	81 2f       	mov	r24, r17
     3e8:	a5 de       	rcall	.-694    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:93
  Wire.write(float_to_bytes.b[2]);
     3ea:	8d 2f       	mov	r24, r29
     3ec:	a3 de       	rcall	.-698    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:94
  Wire.write(float_to_bytes.b[3]);
     3ee:	8c 2f       	mov	r24, r28
/media/D/Data/Powerwall/cellModule/b_functions.ino:95
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
/media/D/Data/Powerwall/cellModule/b_functions.ino:94
  float_to_bytes.val = number;

  Wire.write(float_to_bytes.b[0]);
  Wire.write(float_to_bytes.b[1]);
  Wire.write(float_to_bytes.b[2]);
  Wire.write(float_to_bytes.b[3]);
     3f6:	9e ce       	rjmp	.-708    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>

000003f8 <sendUnsignedInt(unsigned int)>:
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:79
  //Infinity
  while (1) {}
}


void sendUnsignedInt(uint16_t number) {
     3f8:	cf 93       	push	r28
     3fa:	c8 2f       	mov	r28, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:80
  Wire.write((byte)((number >> 8) & 0xFF));
     3fc:	89 2f       	mov	r24, r25
     3fe:	9a de       	rcall	.-716    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:81
  Wire.write((byte)(number & 0xFF));
     400:	8c 2f       	mov	r24, r28
/media/D/Data/Powerwall/cellModule/b_functions.ino:82
}
     402:	cf 91       	pop	r28
/media/D/Data/Powerwall/cellModule/b_functions.ino:81
}


void sendUnsignedInt(uint16_t number) {
  Wire.write((byte)((number >> 8) & 0xFF));
  Wire.write((byte)(number & 0xFF));
     404:	97 ce       	rjmp	.-722    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>

00000406 <requestEvent()>:
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:4
//cellModule -> cellController
// function that executes whenever data is requested by master (this answers requestFrom command)
void requestEvent() {
  switch (cmdByte) {
     406:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <cmdByte>
     40a:	ea 50       	subi	r30, 0x0A	; 10
     40c:	e9 30       	cpi	r30, 0x09	; 9
     40e:	d8 f4       	brcc	.+54     	; 0x446 <requestEvent()+0x40>
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	e4 5f       	subi	r30, 0xF4	; 244
     414:	fd 4f       	sbci	r31, 0xFD	; 253
     416:	09 94       	ijmp
     418:	08 c0       	rjmp	.+16     	; 0x42a <requestEvent()+0x24>
     41a:	29 c0       	rjmp	.+82     	; 0x46e <requestEvent()+0x68>
     41c:	3b c0       	rjmp	.+118    	; 0x494 <requestEvent()+0x8e>
     41e:	44 c0       	rjmp	.+136    	; 0x4a8 <requestEvent()+0xa2>
     420:	18 c0       	rjmp	.+48     	; 0x452 <requestEvent()+0x4c>
     422:	1c c0       	rjmp	.+56     	; 0x45c <requestEvent()+0x56>
     424:	20 c0       	rjmp	.+64     	; 0x466 <requestEvent()+0x60>
     426:	05 c0       	rjmp	.+10     	; 0x432 <requestEvent()+0x2c>
     428:	48 c0       	rjmp	.+144    	; 0x4ba <requestEvent()+0xb4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:6
    case READOUT_voltage:
      if (bypassEnabled) {
     42a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <bypassEnabled>
     42e:	88 23       	and	r24, r24
     430:	29 f0       	breq	.+10     	; 0x43c <requestEvent()+0x36>
/media/D/Data/Powerwall/cellModule/c_comm.ino:14
        sendUnsignedInt(voltageMeasurement);
      }

      break;
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
     432:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <voltageMeasurement_bypass>
     436:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <voltageMeasurement_bypass+0x1>
     43a:	04 c0       	rjmp	.+8      	; 0x444 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:9
  switch (cmdByte) {
    case READOUT_voltage:
      if (bypassEnabled) {
        sendUnsignedInt(voltageMeasurement_bypass);
      } else {
        sendUnsignedInt(voltageMeasurement);
     43c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <voltageMeasurement>
     440:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <voltageMeasurement+0x1>
     444:	d9 df       	rcall	.-78     	; 0x3f8 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:51
      //Dont do anything - timeout
      break;
  }

  //Clear cmdByte
  cmdByte = 0;
     446:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:54

  //if this times out, master has stopped communicating with module
  i2cTmr = 80;//150
     44a:	80 e5       	ldi	r24, 0x50	; 80
     44c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <i2cTmr>
/media/D/Data/Powerwall/cellModule/c_comm.ino:55
}
     450:	08 95       	ret
/media/D/Data/Powerwall/cellModule/c_comm.ino:18
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
      break;
      
    case READOUT_raw_voltage:
      sendUnsignedInt(last_raw_adc);
     452:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <last_raw_adc>
     456:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <last_raw_adc+0x1>
     45a:	f4 cf       	rjmp	.-24     	; 0x444 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:22
      break;

    case READOUT_error_counter:
      sendUnsignedInt(error_counter);
     45c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <error_counter>
     460:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <error_counter+0x1>
     464:	ef cf       	rjmp	.-34     	; 0x444 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:26
      break;

    case READOUT_bypass_state:
      sendByte(bypassEnabled);
     466:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <bypassEnabled>
sendByte():
/media/D/Data/Powerwall/cellModule/b_functions.ino:85
}

void sendByte(uint8_t number) {
  Wire.write(number);
     46a:	64 de       	rcall	.-824    	; 0x134 <TwoWire::write(unsigned char) [clone .constprop.8]>
     46c:	ec cf       	rjmp	.-40     	; 0x446 <requestEvent()+0x40>
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:30
      break;

    case READOUT_temperature:
      sendUnsignedInt((uint16_t)((float)tempSensorValue * currentConfig.tempSensorCalibration));
     46e:	60 91 bf 00 	lds	r22, 0x00BF	; 0x8000bf <tempSensorValue>
     472:	70 91 c0 00 	lds	r23, 0x00C0	; 0x8000c0 <tempSensorValue+0x1>
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 d5       	rcall	.+2576   	; 0xe8c <__floatunsisf>
     47c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <currentConfig+0x5>
     480:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <currentConfig+0x6>
     484:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <currentConfig+0x7>
     488:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <currentConfig+0x8>
     48c:	89 d5       	rcall	.+2834   	; 0xfa0 <__mulsf3>
     48e:	d2 d4       	rcall	.+2468   	; 0xe34 <__fixunssfsi>
     490:	cb 01       	movw	r24, r22
     492:	d8 cf       	rjmp	.-80     	; 0x444 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:34
      break;

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
     494:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <currentConfig+0x1>
     498:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <currentConfig+0x2>
     49c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentConfig+0x3>
     4a0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:38
      break;

    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
     4a4:	8d df       	rcall	.-230    	; 0x3c0 <sendFloat(float)>
     4a6:	cf cf       	rjmp	.-98     	; 0x446 <requestEvent()+0x40>
     4a8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <currentConfig+0x5>
     4ac:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <currentConfig+0x6>
     4b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <currentConfig+0x7>
     4b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <currentConfig+0x8>
     4b8:	f5 cf       	rjmp	.-22     	; 0x4a4 <requestEvent()+0x9e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:41
      break;
    case READOUT_burningCounter:
      sendUnsignedInt(iBurningCounter);
     4ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <iBurningCounter>
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9b df       	rcall	.-202    	; 0x3f8 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:42
      iBurningCounter = 0;//resest after it is read
     4c2:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <iBurningCounter>
     4c6:	bf cf       	rjmp	.-130    	; 0x446 <requestEvent()+0x40>

000004c8 <ledOFF()>:
_Z6ledOFFv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:8
  DDRB |= (1 << DDB1);
  PORTB |=  (1 << PB1);
}

inline void ledOFF() {
  DDRB |= (1 << DDB1);
     4c8:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:9
  PORTB &= ~(1 << PB1);
     4ca:	c1 98       	cbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:10
}
     4cc:	08 95       	ret

000004ce <ledON()>:
_Z5ledONv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:3

inline void ledON() {
  DDRB |= (1 << DDB1);
     4ce:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:4
  PORTB |=  (1 << PB1);
     4d0:	c1 9a       	sbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:5
}
     4d2:	08 95       	ret

000004d4 <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
     4e0:	f6 2e       	mov	r15, r22
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     4e2:	08 81       	ld	r16, Y
     4e4:	19 81       	ldd	r17, Y+1	; 0x01
     4e6:	c8 01       	movw	r24, r16
     4e8:	8b d4       	rcall	.+2326   	; 0xe00 <eeprom_read_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4ea:	f8 16       	cp	r15, r24
     4ec:	19 f0       	breq	.+6      	; 0x4f4 <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     4ee:	6f 2d       	mov	r22, r15
     4f0:	c8 01       	movw	r24, r16
     4f2:	8e d4       	rcall	.+2332   	; 0xe10 <eeprom_write_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4f4:	ce 01       	movw	r24, r28
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	08 95       	ret

00000502 <WriteConfigToEEPROM()>:
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:31
    }
  }
  return crc;
}

void WriteConfigToEEPROM() {
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	00 d0       	rcall	.+0      	; 0x510 <WriteConfigToEEPROM()+0xe>
     510:	00 d0       	rcall	.+0      	; 0x512 <WriteConfigToEEPROM()+0x10>
     512:	00 d0       	rcall	.+0      	; 0x514 <WriteConfigToEEPROM()+0x12>
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	81 e6       	ldi	r24, 0x61	; 97
     51a:	e8 2e       	mov	r14, r24
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	f8 2e       	mov	r15, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     520:	04 e1       	ldi	r16, 0x14	; 20
     522:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     524:	1a 83       	std	Y+2, r17	; 0x02
     526:	09 83       	std	Y+1, r16	; 0x01
     528:	f7 01       	movw	r30, r14
     52a:	61 91       	ld	r22, Z+
     52c:	7f 01       	movw	r14, r30
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	d0 df       	rcall	.-96     	; 0x4d4 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     534:	0f 5f       	subi	r16, 0xFF	; 255
     536:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     538:	0d 31       	cpi	r16, 0x1D	; 29
     53a:	11 05       	cpc	r17, r1
     53c:	99 f7       	brne	.-26     	; 0x524 <WriteConfigToEEPROM()+0x22>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:33
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
     53e:	81 e6       	ldi	r24, 0x61	; 97
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	98 dd       	rcall	.-1232   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	8e 01       	movw	r16, r28
     54e:	0f 5f       	subi	r16, 0xFF	; 255
     550:	1f 4f       	sbci	r17, 0xFF	; 255
     552:	f1 2c       	mov	r15, r1
     554:	e1 2c       	mov	r14, r1
_ZN11EEPROMClass3putImEERKT_iS3_.isra.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     556:	fe 82       	std	Y+6, r15	; 0x06
     558:	ed 82       	std	Y+5, r14	; 0x05
     55a:	f8 01       	movw	r30, r16
     55c:	61 91       	ld	r22, Z+
     55e:	8f 01       	movw	r16, r30
     560:	ce 01       	movw	r24, r28
     562:	05 96       	adiw	r24, 0x05	; 5
     564:	b7 df       	rcall	.-146    	; 0x4d4 <EERef::update(unsigned char)>
     566:	ff ef       	ldi	r31, 0xFF	; 255
     568:	ef 1a       	sub	r14, r31
     56a:	ff 0a       	sbc	r15, r31
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	e8 16       	cp	r14, r24
     570:	f1 04       	cpc	r15, r1
     572:	89 f7       	brne	.-30     	; 0x556 <WriteConfigToEEPROM()+0x54>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:34
}
     574:	26 96       	adiw	r28, 0x06	; 6
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	08 95       	ret

0000058e <receiveEvent(int)>:
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:60
}


//cellController -> cellModule
// function that executes whenever data is received from master
void receiveEvent(int bytesCnt) {
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <receiveEvent(int)+0x12>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
/media/D/Data/Powerwall/cellModule/c_comm.ino:61
  if (bytesCnt <= 0) return;
     5a4:	18 16       	cp	r1, r24
     5a6:	19 06       	cpc	r1, r25
     5a8:	0c f0       	brlt	.+2      	; 0x5ac <receiveEvent(int)+0x1e>
     5aa:	ea c0       	rjmp	.+468    	; 0x780 <receiveEvent(int)+0x1f2>
/media/D/Data/Powerwall/cellModule/c_comm.ino:65

  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;
     5ac:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <cmdByte>
     5b0:	22 23       	and	r18, r18
     5b2:	51 f0       	breq	.+20     	; 0x5c8 <receiveEvent(int)+0x3a>
     5b4:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <error_counter>
     5b8:	30 91 d9 00 	lds	r19, 0x00D9	; 0x8000d9 <error_counter+0x1>
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <error_counter+0x1>
     5c4:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <error_counter>
     5c8:	8c 01       	movw	r16, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:67

  cmdByte = Wire.read();
     5ca:	62 de       	rcall	.-828    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     5cc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:71
  bytesCnt--;

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {
     5d0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <cmdByte>
     5d4:	86 ff       	sbrs	r24, 6
     5d6:	c2 c0       	rjmp	.+388    	; 0x75c <receiveEvent(int)+0x1ce>
/media/D/Data/Powerwall/cellModule/c_comm.ino:68
  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;

  cmdByte = Wire.read();
  bytesCnt--;
     5d8:	01 50       	subi	r16, 0x01	; 1
     5da:	11 09       	sbc	r17, r1
/media/D/Data/Powerwall/cellModule/c_comm.ino:73

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {

    bitClear(cmdByte, COMMAND_BIT);
     5dc:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <cmdByte>
     5e0:	2f 7b       	andi	r18, 0xBF	; 191
     5e2:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:75

    switch (cmdByte) {
     5e6:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <cmdByte>
     5ea:	e1 50       	subi	r30, 0x01	; 1
     5ec:	e8 30       	cpi	r30, 0x08	; 8
     5ee:	90 f4       	brcc	.+36     	; 0x614 <receiveEvent(int)+0x86>
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	e4 50       	subi	r30, 0x04	; 4
     5f4:	fd 4f       	sbci	r31, 0xFD	; 253
     5f6:	09 94       	ijmp
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <receiveEvent(int)+0x7a>
     5fa:	0c c0       	rjmp	.+24     	; 0x614 <receiveEvent(int)+0x86>
     5fc:	1b c0       	rjmp	.+54     	; 0x634 <receiveEvent(int)+0xa6>
     5fe:	9b c0       	rjmp	.+310    	; 0x736 <receiveEvent(int)+0x1a8>
     600:	97 c0       	rjmp	.+302    	; 0x730 <receiveEvent(int)+0x1a2>
     602:	27 c0       	rjmp	.+78     	; 0x652 <receiveEvent(int)+0xc4>
     604:	41 c0       	rjmp	.+130    	; 0x688 <receiveEvent(int)+0xfa>
     606:	5b c0       	rjmp	.+182    	; 0x6be <receiveEvent(int)+0x130>
/media/D/Data/Powerwall/cellModule/c_comm.ino:77
      case COMMAND_green_led_pattern:
        if (bytesCnt == 1) {
     608:	01 30       	cpi	r16, 0x01	; 1
     60a:	11 05       	cpc	r17, r1
     60c:	19 f4       	brne	.+6      	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:78
          green_pattern = Wire.read();
     60e:	40 de       	rcall	.-896    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     610:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:147
        }
        break;

    }

    cmdByte = 0;
     614:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <cmdByte>
available():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:545

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     618:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <TwoWire::BufferLength>
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <receiveEvent(int)+0x94>
     620:	ac c0       	rjmp	.+344    	; 0x77a <receiveEvent(int)+0x1ec>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:546
    return BufferLength - BufferIndex;
     622:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <TwoWire::BufferIndex>
     626:	89 1b       	sub	r24, r25
     628:	99 0b       	sbc	r25, r25
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:160
        break;
    }
  }

  // clear rx buffer
  while (Wire.available()) Wire.read();
     62a:	89 2b       	or	r24, r25
     62c:	09 f4       	brne	.+2      	; 0x630 <receiveEvent(int)+0xa2>
     62e:	a8 c0       	rjmp	.+336    	; 0x780 <receiveEvent(int)+0x1f2>
     630:	2f de       	rcall	.-930    	; 0x290 <TwoWire::read() [clone .constprop.6]>
     632:	f2 cf       	rjmp	.-28     	; 0x618 <receiveEvent(int)+0x8a>
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     634:	1a 82       	std	Y+2, r1	; 0x02
     636:	19 82       	std	Y+1, r1	; 0x01
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	4a df       	rcall	.-364    	; 0x4d4 <EERef::update(unsigned char)>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	42 df       	rcall	.-380    	; 0x4d4 <EERef::update(unsigned char)>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:140
          uint8_t newAddress = Wire.read();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
            currentConfig.SLAVE_ADDR = newAddress;
            WriteConfigToEEPROM();
            Reboot();
     650:	cd d2       	rcall	.+1434   	; 0xbec <Reboot()>
/media/D/Data/Powerwall/cellModule/c_comm.ino:92
        factory_default();
        Reboot();
        break;

      case COMMAND_set_voltage_calibration:
        if (bytesCnt == sizeof(float)) {
     652:	04 30       	cpi	r16, 0x04	; 4
     654:	11 05       	cpc	r17, r1
     656:	f1 f6       	brne	.-68     	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:93
          float newValue = readFloat();
     658:	a0 de       	rcall	.-704    	; 0x39a <readFloat()>
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:95
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration) {
     65e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <currentConfig+0x1>
     662:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <currentConfig+0x2>
     666:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <currentConfig+0x3>
     66a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <currentConfig+0x4>
     66e:	de d3       	rcall	.+1980   	; 0xe2c <__cmpsf2>
     670:	88 23       	and	r24, r24
     672:	81 f2       	breq	.-96     	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:96
            currentConfig.voltageCalibration = newValue;
     674:	c0 92 62 00 	sts	0x0062, r12	; 0x800062 <currentConfig+0x1>
     678:	d0 92 63 00 	sts	0x0063, r13	; 0x800063 <currentConfig+0x2>
     67c:	e0 92 64 00 	sts	0x0064, r14	; 0x800064 <currentConfig+0x3>
     680:	f0 92 65 00 	sts	0x0065, r15	; 0x800065 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:108
        if (bytesCnt == sizeof(float)) {
          float newValue = readFloat();
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
            currentConfig.tempSensorCalibration = newValue;
            WriteConfigToEEPROM();
     684:	3e df       	rcall	.-388    	; 0x502 <WriteConfigToEEPROM()>
     686:	c6 cf       	rjmp	.-116    	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:103
          }
        }
        break;

      case COMMAND_set_temperature_calibration:
        if (bytesCnt == sizeof(float)) {
     688:	04 30       	cpi	r16, 0x04	; 4
     68a:	11 05       	cpc	r17, r1
     68c:	19 f6       	brne	.-122    	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:104
          float newValue = readFloat();
     68e:	85 de       	rcall	.-758    	; 0x39a <readFloat()>
     690:	6b 01       	movw	r12, r22
     692:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:106
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
     694:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <currentConfig+0x5>
     698:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <currentConfig+0x6>
     69c:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <currentConfig+0x7>
     6a0:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <currentConfig+0x8>
     6a4:	c3 d3       	rcall	.+1926   	; 0xe2c <__cmpsf2>
     6a6:	88 23       	and	r24, r24
     6a8:	09 f4       	brne	.+2      	; 0x6ac <receiveEvent(int)+0x11e>
     6aa:	b4 cf       	rjmp	.-152    	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:107
            currentConfig.tempSensorCalibration = newValue;
     6ac:	c0 92 66 00 	sts	0x0066, r12	; 0x800066 <currentConfig+0x5>
     6b0:	d0 92 67 00 	sts	0x0067, r13	; 0x800067 <currentConfig+0x6>
     6b4:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <currentConfig+0x7>
     6b8:	f0 92 69 00 	sts	0x0069, r15	; 0x800069 <currentConfig+0x8>
     6bc:	e3 cf       	rjmp	.-58     	; 0x684 <receiveEvent(int)+0xf6>
/media/D/Data/Powerwall/cellModule/c_comm.ino:114
          }
        }
        break;

      case COMMAND_set_bypass_voltage:
        if (bytesCnt == sizeof(uint16_t)) {
     6be:	02 30       	cpi	r16, 0x02	; 2
     6c0:	11 05       	cpc	r17, r1
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <receiveEvent(int)+0x138>
     6c4:	a7 cf       	rjmp	.-178    	; 0x614 <receiveEvent(int)+0x86>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:106
  float_to_bytes.b[3] = Wire.read();

  return float_to_bytes.val;
}
uint16_t readUINT16() {
  uint16_t_to_bytes.b[0] = Wire.read();
     6c6:	e4 dd       	rcall	.-1080   	; 0x290 <TwoWire::read() [clone .constprop.6]>
     6c8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <uint16_t_to_bytes>
/media/D/Data/Powerwall/cellModule/b_functions.ino:107
  uint16_t_to_bytes.b[1] = Wire.read();
     6cc:	e1 dd       	rcall	.-1086   	; 0x290 <TwoWire::read() [clone .constprop.6]>
     6ce:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <uint16_t_to_bytes+0x1>
/media/D/Data/Powerwall/cellModule/b_functions.ino:108
  return uint16_t_to_bytes.val;
     6d2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <uint16_t_to_bytes>
     6d6:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <uint16_t_to_bytes+0x1>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:117
          uint16_t newValue = readUINT16();
          //Only accept if its a realistic value and the value is LESS than the last voltage reading
          if (newValue >= MIN_BYPASS_VOLTAGE && newValue <= MAX_BYPASS_VOLTAGE && newValue < voltageMeasurement) {
     6da:	9c 01       	movw	r18, r24
     6dc:	2c 52       	subi	r18, 0x2C	; 44
     6de:	31 40       	sbci	r19, 0x01	; 1
     6e0:	29 37       	cpi	r18, 0x79	; 121
     6e2:	31 05       	cpc	r19, r1
     6e4:	e8 f4       	brcc	.+58     	; 0x720 <receiveEvent(int)+0x192>
     6e6:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <voltageMeasurement>
     6ea:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <voltageMeasurement+0x1>
     6ee:	82 17       	cp	r24, r18
     6f0:	93 07       	cpc	r25, r19
     6f2:	b0 f4       	brcc	.+44     	; 0x720 <receiveEvent(int)+0x192>
/media/D/Data/Powerwall/cellModule/c_comm.ino:118
            targetBypassVoltage = newValue;
     6f4:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <targetBypassVoltage+0x1>
     6f8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/c_comm.ino:119
            voltageMeasurement_bypass = voltageMeasurement;//init bypass voltage
     6fc:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <voltageMeasurement>
     700:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <voltageMeasurement+0x1>
     704:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <voltageMeasurement_bypass+0x1>
     708:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/c_comm.ino:120
            bypassCnt = BYPASS_COUNTER_MAX;
     70c:	80 ef       	ldi	r24, 0xF0	; 240
     70e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <bypassCnt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:121
            green_pattern = GREEN_LED_PATTERN_BYPASS;
     712:	8c e6       	ldi	r24, 0x6C	; 108
     714:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:122
            bypassEnabled = true;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <bypassEnabled>
     71e:	7a cf       	rjmp	.-268    	; 0x614 <receiveEvent(int)+0x86>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
}

void bypass_off() {
  targetBypassVoltage = 0;
     720:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <targetBypassVoltage+0x1>
     724:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     728:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     72c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <bypassEnabled>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:126
          } else {
            //Disable
            bypass_off();
            green_pattern = GREEN_LED_PATTERN_STANDARD;
     730:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     734:	6f cf       	rjmp	.-290    	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:134
        break;


      case COMMAND_set_slave_address:
        //Set i2c slave address and write to EEPROM, then reboot
        if (bytesCnt == 1 ) {
     736:	01 30       	cpi	r16, 0x01	; 1
     738:	11 05       	cpc	r17, r1
     73a:	09 f0       	breq	.+2      	; 0x73e <receiveEvent(int)+0x1b0>
     73c:	6b cf       	rjmp	.-298    	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:135
          uint8_t newAddress = Wire.read();
     73e:	a8 dd       	rcall	.-1200   	; 0x290 <TwoWire::read() [clone .constprop.6]>
/media/D/Data/Powerwall/cellModule/c_comm.ino:137
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
     740:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <currentConfig>
     744:	89 17       	cp	r24, r25
     746:	09 f4       	brne	.+2      	; 0x74a <receiveEvent(int)+0x1bc>
     748:	65 cf       	rjmp	.-310    	; 0x614 <receiveEvent(int)+0x86>
     74a:	98 ee       	ldi	r25, 0xE8	; 232
     74c:	98 0f       	add	r25, r24
     74e:	9d 30       	cpi	r25, 0x0D	; 13
     750:	08 f0       	brcs	.+2      	; 0x754 <receiveEvent(int)+0x1c6>
     752:	60 cf       	rjmp	.-320    	; 0x614 <receiveEvent(int)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:138
            currentConfig.SLAVE_ADDR = newAddress;
     754:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentConfig>
/media/D/Data/Powerwall/cellModule/c_comm.ino:139
            WriteConfigToEEPROM();
     758:	d4 de       	rcall	.-600    	; 0x502 <WriteConfigToEEPROM()>
     75a:	7a cf       	rjmp	.-268    	; 0x650 <receiveEvent(int)+0xc2>
/media/D/Data/Powerwall/cellModule/c_comm.ino:151

    cmdByte = 0;
  } else {
    //Its a READ request

    switch (cmdByte) {
     75c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <cmdByte>
     760:	8a 30       	cpi	r24, 0x0A	; 10
     762:	09 f0       	breq	.+2      	; 0x766 <receiveEvent(int)+0x1d8>
     764:	59 cf       	rjmp	.-334    	; 0x618 <receiveEvent(int)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:153
      case READOUT_voltage:
        voltageMeasurement = getVoltageMeasurement();
     766:	eb dd       	rcall	.-1066   	; 0x33e <getVoltageMeasurement()>
     768:	65 d3       	rcall	.+1738   	; 0xe34 <__fixunssfsi>
     76a:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <voltageMeasurement+0x1>
     76e:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <voltageMeasurement>
/media/D/Data/Powerwall/cellModule/c_comm.ino:154
        ledFlash = true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <ledFlash>
     778:	4f cf       	rjmp	.-354    	; 0x618 <receiveEvent(int)+0x8a>
available():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/Wire.cpp:548
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     77a:	83 dd       	rcall	.-1274   	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	55 cf       	rjmp	.-342    	; 0x62a <receiveEvent(int)+0x9c>
_Z12receiveEventi():
/media/D/Data/Powerwall/cellModule/c_comm.ino:161
    }
  }

  // clear rx buffer
  while (Wire.available()) Wire.read();
}
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	08 95       	ret

00000796 <__vector_5>:
__vector_5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     796:	1f 92       	push	r1
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	0f 92       	push	r0
     79e:	11 24       	eor	r1, r1
     7a0:	2f 93       	push	r18
     7a2:	3f 93       	push	r19
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     7ac:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <millis_timer_millis>
     7b0:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <millis_timer_millis+0x1>
     7b4:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <millis_timer_millis+0x2>
     7b8:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
     7bc:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:145

    f += FRACT_INC;
     7c0:	26 e0       	ldi	r18, 0x06	; 6
     7c2:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:147

    if (f >= FRACT_MAX)
     7c4:	2d 37       	cpi	r18, 0x7D	; 125
     7c6:	68 f1       	brcs	.+90     	; 0x822 <__vector_5+0x8c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:149
    {
      f -= FRACT_MAX;
     7c8:	29 e8       	ldi	r18, 0x89	; 137
     7ca:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
     7cc:	03 96       	adiw	r24, 0x03	; 3
     7ce:	a1 1d       	adc	r26, r1
     7d0:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     7d2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:159
    millis_timer_millis = m;
     7d6:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <millis_timer_millis>
     7da:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <millis_timer_millis+0x1>
     7de:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <millis_timer_millis+0x2>
     7e2:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:160
    millis_timer_overflow_count++;
     7e6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis_timer_overflow_count>
     7ea:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis_timer_overflow_count+0x1>
     7ee:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis_timer_overflow_count+0x2>
     7f2:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x3>
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	a1 1d       	adc	r26, r1
     7fa:	b1 1d       	adc	r27, r1
     7fc:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <millis_timer_overflow_count>
     800:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <millis_timer_overflow_count+0x1>
     804:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <millis_timer_overflow_count+0x2>
     808:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:162

  }
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	3f 91       	pop	r19
     816:	2f 91       	pop	r18
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     822:	02 96       	adiw	r24, 0x02	; 2
     824:	a1 1d       	adc	r26, r1
     826:	b1 1d       	adc	r27, r1
     828:	d4 cf       	rjmp	.-88     	; 0x7d2 <__vector_5+0x3c>

0000082a <__vector_14>:
__vector_14():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	cf 93       	push	r28
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     852:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <USI_TWI_Overflow_State>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	09 f4       	brne	.+2      	; 0x85c <__vector_14+0x32>
     85a:	76 c0       	rjmp	.+236    	; 0x948 <__vector_14+0x11e>
     85c:	c8 f4       	brcc	.+50     	; 0x890 <__vector_14+0x66>
     85e:	88 23       	and	r24, r24
     860:	99 f1       	breq	.+102    	; 0x8c8 <__vector_14+0x9e>
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	09 f4       	brne	.+2      	; 0x868 <__vector_14+0x3e>
     866:	56 c0       	rjmp	.+172    	; 0x914 <__vector_14+0xea>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:310
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     868:	ff 91       	pop	r31
     86a:	ef 91       	pop	r30
     86c:	cf 91       	pop	r28
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     890:	84 30       	cpi	r24, 0x04	; 4
     892:	09 f4       	brne	.+2      	; 0x896 <__vector_14+0x6c>
     894:	5f c0       	rjmp	.+190    	; 0x954 <__vector_14+0x12a>
     896:	b8 f1       	brcs	.+110    	; 0x906 <__vector_14+0xdc>
     898:	85 30       	cpi	r24, 0x05	; 5
     89a:	31 f7       	brne	.-52     	; 0x868 <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     8a2:	9f b1       	in	r25, 0x0f	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:299
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     8a4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <TWI_RxHead>
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	8f 70       	andi	r24, 0x0F	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:300
    if (TWI_RxTail != tmpRxHead) {
     8ac:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <TWI_RxTail>
     8b0:	28 17       	cp	r18, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__vector_14+0x8c>
     8b4:	70 c0       	rjmp	.+224    	; 0x996 <__vector_14+0x16c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:301
      TWI_RxHead            = tmpRxHead;
     8b6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     8ba:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <TWI_RxHead>
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	ec 58       	subi	r30, 0x8C	; 140
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	90 83       	st	Z, r25
     8c6:	19 c0       	rjmp	.+50     	; 0x8fa <__vector_14+0xd0>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:221

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     8c8:	8f b1       	in	r24, 0x0f	; 15
     8ca:	88 23       	and	r24, r24
     8cc:	31 f0       	breq	.+12     	; 0x8da <__vector_14+0xb0>
     8ce:	8f b1       	in	r24, 0x0f	; 15
     8d0:	86 95       	lsr	r24
     8d2:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <TWI_slaveAddress>
     8d6:	89 13       	cpse	r24, r25
     8d8:	19 c0       	rjmp	.+50     	; 0x90c <__vector_14+0xe2>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:222
      if (USIDR & 0x01) {
     8da:	78 9b       	sbis	0x0f, 0	; 15
     8dc:	12 c0       	rjmp	.+36     	; 0x902 <__vector_14+0xd8>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:223
        if (USI_TWI_On_Slave_Transmit) {
     8de:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <USI_TWI_On_Slave_Transmit>
     8e2:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <USI_TWI_On_Slave_Transmit+0x1>
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <__vector_14+0xca>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:225
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
     8ea:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <TWI_TxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
     8ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:227
          USI_TWI_On_Slave_Transmit();
     8f2:	09 95       	icall
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:229
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:231
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     8f6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:233
      }
      SET_USI_TO_SEND_ACK();
     8fa:	1f b8       	out	0x0f, r1	; 15
     8fc:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     8fe:	8e e7       	ldi	r24, 0x7E	; 126
     900:	21 c0       	rjmp	.+66     	; 0x944 <__vector_14+0x11a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:231
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	f8 cf       	rjmp	.-16     	; 0x8f6 <__vector_14+0xcc>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:242
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     906:	8f b1       	in	r24, 0x0f	; 15
     908:	88 23       	and	r24, r24
     90a:	21 f0       	breq	.+8      	; 0x914 <__vector_14+0xea>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     90c:	b8 98       	cbi	0x17, 0	; 23
     90e:	88 ea       	ldi	r24, 0xA8	; 168
     910:	8d b9       	out	0x0d, r24	; 13
     912:	17 c0       	rjmp	.+46     	; 0x942 <__vector_14+0x118>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:253

  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     914:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:254
    if (TWI_TxHead != tmpTxTail) {
     918:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <TWI_TxHead>
     91c:	98 17       	cp	r25, r24
     91e:	b1 f3       	breq	.-20     	; 0x90c <__vector_14+0xe2>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     920:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <TWI_TxTail>
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <TWI_TxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:256
      USIDR      = TWI_TxBuf[TWI_TxTail];
     92c:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <TWI_TxTail>
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	ec 57       	subi	r30, 0x7C	; 124
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	80 81       	ld	r24, Z
     938:	8f b9       	out	0x0f, r24	; 15
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:262
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:263
    SET_USI_TO_SEND_DATA();
     940:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     942:	80 e7       	ldi	r24, 0x70	; 112
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     944:	8e b9       	out	0x0e, r24	; 14
     946:	90 cf       	rjmp	.-224    	; 0x868 <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:268
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:269
    SET_USI_TO_READ_ACK();
     94e:	b8 98       	cbi	0x17, 0	; 23
     950:	1f b8       	out	0x0f, r1	; 15
     952:	d5 cf       	rjmp	.-86     	; 0x8fe <__vector_14+0xd4>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:275
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     954:	85 e0       	ldi	r24, 0x05	; 5
     956:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:276
    SET_USI_TO_READ_DATA();
     95a:	b8 98       	cbi	0x17, 0	; 23
     95c:	80 e7       	ldi	r24, 0x70	; 112
     95e:	8e b9       	out	0x0e, r24	; 14
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:278
    // call slave receive callback on stop condition
    if (USI_TWI_On_Slave_Receive) {
     960:	00 91 c8 00 	lds	r16, 0x00C8	; 0x8000c8 <USI_TWI_On_Slave_Receive>
     964:	10 91 c9 00 	lds	r17, 0x00C9	; 0x8000c9 <USI_TWI_On_Slave_Receive+0x1>
     968:	01 15       	cp	r16, r1
     96a:	11 05       	cpc	r17, r1
     96c:	09 f4       	brne	.+2      	; 0x970 <__vector_14+0x146>
     96e:	7c cf       	rjmp	.-264    	; 0x868 <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:279
      tmpRxHead = TWI_RxHead;
     970:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:280
      if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     974:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <TWI_RxTail>
     978:	8c 17       	cp	r24, r28
     97a:	09 f4       	brne	.+2      	; 0x97e <__vector_14+0x154>
     97c:	75 cf       	rjmp	.-278    	; 0x868 <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:282
        // check for stop Condition
        while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
     97e:	8e b1       	in	r24, 0x0e	; 14
     980:	8e 7a       	andi	r24, 0xAE	; 174
     982:	e9 f3       	breq	.-6      	; 0x97e <__vector_14+0x154>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:285
          ;// wait for either Start or Stop Condition
          // cancel after one SCL cycle
        if (USISR & (1 << USIPF)) { // Stop Condition
     984:	75 9b       	sbis	0x0e, 5	; 14
     986:	70 cf       	rjmp	.-288    	; 0x868 <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:286
          USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     988:	7c dc       	rcall	.-1800   	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	f8 01       	movw	r30, r16
     98e:	09 95       	icall
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:288
          // reset rx buffer
          TWI_RxTail = tmpRxHead;
     990:	c0 93 e1 00 	sts	0x00E1, r28	; 0x8000e1 <TWI_RxTail>
     994:	69 cf       	rjmp	.-302    	; 0x868 <__vector_14+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     996:	b8 98       	cbi	0x17, 0	; 23
     998:	b2 cf       	rjmp	.-156    	; 0x8fe <__vector_14+0xd4>

0000099a <__vector_13>:
__vector_13():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	cf 93       	push	r28
     9be:	ef 93       	push	r30
     9c0:	ff 93       	push	r31
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:169
  unsigned char tmpPin; // Temporary variable for pin state
  unsigned char tmpRxHead; // Temporary variable to store volatile
  // call slave receive callback on repeated start
  if (USI_TWI_On_Slave_Receive) {
     9c2:	00 91 c8 00 	lds	r16, 0x00C8	; 0x8000c8 <USI_TWI_On_Slave_Receive>
     9c6:	10 91 c9 00 	lds	r17, 0x00C9	; 0x8000c9 <USI_TWI_On_Slave_Receive+0x1>
     9ca:	01 15       	cp	r16, r1
     9cc:	11 05       	cpc	r17, r1
     9ce:	61 f0       	breq	.+24     	; 0x9e8 <__vector_13+0x4e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:170
    tmpRxHead = TWI_RxHead;
     9d0:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <TWI_RxHead>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:171
    if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     9d4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <TWI_RxTail>
     9d8:	8c 17       	cp	r24, r28
     9da:	31 f0       	breq	.+12     	; 0x9e8 <__vector_13+0x4e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:172
      USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     9dc:	52 dc       	rcall	.-1884   	; 0x282 <USI_TWI_Data_In_Receive_Buffer>
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	f8 01       	movw	r30, r16
     9e2:	09 95       	icall
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:174
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
     9e4:	c0 93 e1 00 	sts	0x00E1, r28	; 0x8000e1 <TWI_RxTail>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     9e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <USI_TWI_Overflow_State>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     9ec:	b8 98       	cbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     9ee:	b2 9b       	sbis	0x16, 2	; 22
     9f0:	1a c0       	rjmp	.+52     	; 0xa26 <__vector_13+0x8c>
     9f2:	b0 9b       	sbis	0x16, 0	; 22
     9f4:	fc cf       	rjmp	.-8      	; 0x9ee <__vector_13+0x54>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     9f6:	88 ea       	ldi	r24, 0xA8	; 168
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     9f8:	8d b9       	out	0x0d, r24	; 13
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     9fa:	80 ef       	ldi	r24, 0xF0	; 240
     9fc:	8e b9       	out	0x0e, r24	; 14
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	cf 91       	pop	r28
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     a26:	88 ef       	ldi	r24, 0xF8	; 248
     a28:	e7 cf       	rjmp	.-50     	; 0x9f8 <__vector_13+0x5e>

00000a2a <__vector_3>:
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:42
  }
}


ISR(TIMER1_COMPA_vect) // timer interrupt
{
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	2f 93       	push	r18
     a36:	3f 93       	push	r19
     a38:	4f 93       	push	r20
     a3a:	5f 93       	push	r21
     a3c:	6f 93       	push	r22
     a3e:	7f 93       	push	r23
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
     a44:	af 93       	push	r26
     a46:	bf 93       	push	r27
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/z_main.ino:44
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
     a4c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a50:	81 11       	cpse	r24, r1
     a52:	60 c0       	rjmp	.+192    	; 0xb14 <__vector_3+0xea>
/media/D/Data/Powerwall/cellModule/z_main.ino:45
    if (ledFlash)  {
     a54:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <ledFlash>
     a58:	88 23       	and	r24, r24
     a5a:	09 f4       	brne	.+2      	; 0xa5e <__vector_3+0x34>
     a5c:	59 c0       	rjmp	.+178    	; 0xb10 <__vector_3+0xe6>
/media/D/Data/Powerwall/cellModule/z_main.ino:46
      ledON();
     a5e:	37 dd       	rcall	.-1426   	; 0x4ce <ledON()>
/media/D/Data/Powerwall/cellModule/z_main.ino:48
    }else ledOFF();
    ledFlash = false;
     a60:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <ledFlash>
/media/D/Data/Powerwall/cellModule/z_main.ino:60
      ledOFF();
    }
  }
  ///////////////////////////////////////////////////
  
  if (bypassEnabled) {// burning energy in resistor
     a64:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <bypassEnabled>
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__vector_3+0x44>
     a6c:	6a c0       	rjmp	.+212    	; 0xb42 <__vector_3+0x118>
/media/D/Data/Powerwall/cellModule/z_main.ino:61
    if(iBurningCounter<65535)iBurningCounter++;//counting burned Wh, reset by reading
     a6e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <iBurningCounter>
     a72:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <iBurningCounter>
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <iBurningCounter>
/media/D/Data/Powerwall/cellModule/z_main.ino:63
    
    if (bypassCnt == 0 && voltageBufferReady) {
     a7c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <bypassCnt>
     a80:	81 11       	cpse	r24, r1
     a82:	20 c0       	rjmp	.+64     	; 0xac4 <__vector_3+0x9a>
     a84:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <voltageBufferReady>
     a88:	88 23       	and	r24, r24
     a8a:	e1 f0       	breq	.+56     	; 0xac4 <__vector_3+0x9a>
/media/D/Data/Powerwall/cellModule/z_main.ino:65
      //We are in bypass and just filled in whole buffer with voltage measurements
      voltageMeasurement_bypass = getVoltageMeasurement();
     a8c:	58 dc       	rcall	.-1872   	; 0x33e <getVoltageMeasurement()>
     a8e:	d2 d1       	rcall	.+932    	; 0xe34 <__fixunssfsi>
     a90:	70 93 c4 00 	sts	0x00C4, r23	; 0x8000c4 <voltageMeasurement_bypass+0x1>
     a94:	60 93 c3 00 	sts	0x00C3, r22	; 0x8000c3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/z_main.ino:67

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
     a98:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <targetBypassVoltage>
     a9c:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <targetBypassVoltage+0x1>
     aa0:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <voltageMeasurement_bypass>
     aa4:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <voltageMeasurement_bypass+0x1>
     aa8:	28 17       	cp	r18, r24
     aaa:	39 07       	cpc	r19, r25
     aac:	08 f4       	brcc	.+2      	; 0xab0 <__vector_3+0x86>
     aae:	45 c0       	rjmp	.+138    	; 0xb3a <__vector_3+0x110>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = Wire.read();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     ab0:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <targetBypassVoltage+0x1>
     ab4:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     ab8:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     abc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <bypassEnabled>
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:69
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
     ac0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:75
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
      }
    }

    if (bypassCnt > 0)
     ac4:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <bypassCnt>
     ac8:	88 23       	and	r24, r24
     aca:	81 f0       	breq	.+32     	; 0xaec <__vector_3+0xc2>
/media/D/Data/Powerwall/cellModule/z_main.ino:78
    {
      //We are in ACTIVE BYPASS mode -> BURNING ENERGY in resistor
      bypassCnt--;
     acc:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <bypassCnt>
     ad0:	81 50       	subi	r24, 0x01	; 1
     ad2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <bypassCnt>
/media/D/Data/Powerwall/cellModule/z_main.ino:79
      digitalWrite(PB4, HIGH);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	4a db       	rcall	.-2412   	; 0x16e <digitalWrite.constprop.2>
/media/D/Data/Powerwall/cellModule/z_main.ino:81

      if (bypassCnt == 0)
     ada:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <bypassCnt>
     ade:	81 11       	cpse	r24, r1
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__vector_3+0xc2>
/media/D/Data/Powerwall/cellModule/z_main.ino:85
      {
        //We have just finished this timed ACTIVE BYPASS mode, disable resistor
        //and measure resting voltage now before possible re-enable.
        digitalWrite(PB4, LOW);
     ae2:	45 db       	rcall	.-2422   	; 0x16e <digitalWrite.constprop.2>
/media/D/Data/Powerwall/cellModule/z_main.ino:88

        //Reset voltage ADC buffer
        voltageBufIdx = 0;//we want whole one cycle
     ae4:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/z_main.ino:89
        voltageBufferReady = false;
     ae8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/z_main.ino:98
  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
  }

  //trigger ADC reading
  ADCSRA |= (1 << ADSC);
     aec:	36 9a       	sbi	0x06, 6	; 6
/media/D/Data/Powerwall/cellModule/z_main.ino:99
}
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti
/media/D/Data/Powerwall/cellModule/z_main.ino:47
{
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
    if (ledFlash)  {
      ledON();
    }else ledOFF();
     b10:	db dc       	rcall	.-1610   	; 0x4c8 <ledOFF()>
     b12:	a6 cf       	rjmp	.-180    	; 0xa60 <__vector_3+0x36>
/media/D/Data/Powerwall/cellModule/z_main.ino:50
    ledFlash = false;
  } else {
    green_pattern = (byte)(green_pattern << 1) | (green_pattern >> 7);//rotate pattern left
     b14:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b18:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b1c:	99 0f       	add	r25, r25
     b1e:	88 1f       	adc	r24, r24
     b20:	88 27       	eor	r24, r24
     b22:	88 1f       	adc	r24, r24
     b24:	89 2b       	or	r24, r25
     b26:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:52

    if (green_pattern & 0x01) {
     b2a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b2e:	80 ff       	sbrs	r24, 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <__vector_3+0x10c>
/media/D/Data/Powerwall/cellModule/z_main.ino:53
      ledON();
     b32:	cd dc       	rcall	.-1638   	; 0x4ce <ledON()>
     b34:	97 cf       	rjmp	.-210    	; 0xa64 <__vector_3+0x3a>
/media/D/Data/Powerwall/cellModule/z_main.ino:55
    } else {
      ledOFF();
     b36:	c8 dc       	rcall	.-1648   	; 0x4c8 <ledOFF()>
     b38:	95 cf       	rjmp	.-214    	; 0xa64 <__vector_3+0x3a>
/media/D/Data/Powerwall/cellModule/z_main.ino:71

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
     b3a:	80 ef       	ldi	r24, 0xF0	; 240
     b3c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <bypassCnt>
     b40:	c1 cf       	rjmp	.-126    	; 0xac4 <__vector_3+0x9a>
/media/D/Data/Powerwall/cellModule/z_main.ino:94
        voltageBufferReady = false;
      }
    }

  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	14 db       	rcall	.-2520   	; 0x16e <digitalWrite.constprop.2>
     b46:	d2 cf       	rjmp	.-92     	; 0xaec <__vector_3+0xc2>

00000b48 <__vector_8>:
__vector_8():
/media/D/Data/Powerwall/cellModule/d_adc.ino:16
// changed MUX
// skipping this ADC reading
// temperature = ADC; + changing MUX + next reading will be skipped


ISR(ADC_vect) {
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
     b52:	2f 93       	push	r18
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/d_adc.ino:21
  
  //uint8_t adcl = ADCL;
  //uint16_t value = ADCH << 8 | adcl;

  uint16_t value = ADCW;
     b5c:	84 b1       	in	r24, 0x04	; 4
     b5e:	95 b1       	in	r25, 0x05	; 5
/media/D/Data/Powerwall/cellModule/d_adc.ino:24

  //If we skip this ADC reading, quit ISR here
  if (skipNextADC) {
     b60:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <skipNextADC>
     b64:	22 23       	and	r18, r18
     b66:	61 f0       	breq	.+24     	; 0xb80 <__vector_8+0x38>
/media/D/Data/Powerwall/cellModule/d_adc.ino:25
    skipNextADC = false;
     b68:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <skipNextADC>
/media/D/Data/Powerwall/cellModule/d_adc.ino:71
      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
    }
  }

}
     b6c:	ff 91       	pop	r31
     b6e:	ef 91       	pop	r30
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti
/media/D/Data/Powerwall/cellModule/d_adc.ino:29
  if (skipNextADC) {
    skipNextADC = false;
    return;
  }

  if (tempReadingCnt == TEMP_READING_LOOP_FREQ ) {
     b80:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <tempReadingCnt>
     b84:	20 31       	cpi	r18, 0x10	; 16
     b86:	61 f4       	brne	.+24     	; 0xba0 <__vector_8+0x58>
/media/D/Data/Powerwall/cellModule/d_adc.ino:34
    //Use A0 (RESET PIN) to act as an analogue input
    //note that we cannot take the pin below 1.4V or the CPU resets
    //so we use the top half between 1.6V and 2.56V (voltage reference)
    //we avoid switching references (VCC vs 2.56V) so the capacitors dont have to keep draining and recharging
    tempReadingCnt = 0;
     b88:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:37

    //We reduce the value by 512 as we have a DC offset we need to remove
    tempSensorValue = value;
     b8c:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <tempSensorValue+0x1>
     b90:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <tempSensorValue>
/media/D/Data/Powerwall/cellModule/d_adc.ino:40

    // use ADC3 for input for next reading (voltage)
    ADMUX = B10010011;
     b94:	83 e9       	ldi	r24, 0x93	; 147
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
    tempReadingCnt++;
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     b96:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/d_adc.ino:67

      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <skipNextADC>
     b9e:	e6 cf       	rjmp	.-52     	; 0xb6c <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:48
    skipNextADC = true;

  } else {

    //Populate the rolling buffer with values from the ADC
    last_raw_adc = value;
     ba0:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <last_raw_adc+0x1>
     ba4:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <last_raw_adc>
/media/D/Data/Powerwall/cellModule/d_adc.ino:49
    voltageBuff[voltageBufIdx] = value;
     ba8:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <voltageBufIdx>
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e3 56       	subi	r30, 0x63	; 99
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	80 83       	st	Z, r24
/media/D/Data/Powerwall/cellModule/d_adc.ino:51

    voltageBufIdx++;
     bba:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <voltageBufIdx>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:53

    if (voltageBufIdx == OVERSAMPLE_LOOP) {
     bc4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <voltageBufIdx>
     bc8:	80 31       	cpi	r24, 0x10	; 16
     bca:	29 f4       	brne	.+10     	; 0xbd6 <__vector_8+0x8e>
/media/D/Data/Powerwall/cellModule/d_adc.ino:54
      voltageBufIdx = 0;
     bcc:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:55
      voltageBufferReady = 1;// indicates valid data, used in main logic
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/d_adc.ino:59
    }


    tempReadingCnt++;
     bd6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tempReadingCnt>
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:60
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
     be0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tempReadingCnt>
     be4:	80 31       	cpi	r24, 0x10	; 16
     be6:	11 f6       	brne	.-124    	; 0xb6c <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     be8:	80 e9       	ldi	r24, 0x90	; 144
     bea:	d5 cf       	rjmp	.-86     	; 0xb96 <__vector_8+0x4e>

00000bec <Reboot()>:
_Z6Rebootv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:62
void factory_default() {
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, 0);
}

void Reboot() {
  TCCR1 = 0;
     bec:	10 be       	out	0x30, r1	; 48
/media/D/Data/Powerwall/cellModule/b_functions.ino:63
  TIMSK |= (1 << OCIE1A); //Disable timer1
     bee:	89 b7       	in	r24, 0x39	; 57
     bf0:	80 64       	ori	r24, 0x40	; 64
     bf2:	89 bf       	out	0x39, r24	; 57
/media/D/Data/Powerwall/cellModule/b_functions.ino:66

  //Now power down loop until the watchdog timer kicks a reset
  ledON();
     bf4:	6c dc       	rcall	.-1832   	; 0x4ce <ledON()>
     bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <Reboot()+0xa>

00000bf8 <main>:
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	2d 97       	sbiw	r28, 0x0d	; 13
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	8a bd       	out	0x2a, r24	; 42
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     c10:	83 bf       	out	0x33, r24	; 51
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     c12:	78 94       	sei
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:933

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     c14:	89 b7       	in	r24, 0x39	; 57
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:594
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     c1a:	80 e4       	ldi	r24, 0x40	; 64
     c1c:	8c bd       	out	0x2c, r24	; 44
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:595
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	8d bd       	out	0x2d, r24	; 45
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:596
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     c22:	87 ec       	ldi	r24, 0xC7	; 199
     c24:	80 bf       	out	0x30, r24	; 48
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     c26:	86 b1       	in	r24, 0x06	; 6
     c28:	88 77       	andi	r24, 0x78	; 120
     c2a:	86 68       	ori	r24, 0x86	; 134
     c2c:	86 b9       	out	0x06, r24	; 6
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     c2e:	37 9a       	sbi	0x06, 7	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:18

void setup() {
  //Must be first line of setup()
  MCUSR &= ~(1 << WDRF); // reset status flag
     c30:	84 b7       	in	r24, 0x34	; 52
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	84 bf       	out	0x34, r24	; 52
wdt_disable():
/home/zz/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	a8 95       	wdr
     c3c:	81 b5       	in	r24, 0x21	; 33
     c3e:	88 61       	ori	r24, 0x18	; 24
     c40:	81 bd       	out	0x21, r24	; 33
     c42:	11 bc       	out	0x21, r1	; 33
     c44:	0f be       	out	0x3f, r0	; 63
pinMode():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:35
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     c46:	e4 e3       	ldi	r30, 0x34	; 52
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     c4c:	ee e2       	ldi	r30, 0x2E	; 46
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	84 91       	lpm	r24, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     c52:	88 23       	and	r24, r24
     c54:	99 f0       	breq	.+38     	; 0xc7c <main+0x84>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	fc 01       	movw	r30, r24
     c5e:	e2 5e       	subi	r30, 0xE2	; 226
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	a5 91       	lpm	r26, Z+
     c64:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     c66:	fc 01       	movw	r30, r24
     c68:	ec 5d       	subi	r30, 0xDC	; 220
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	85 91       	lpm	r24, Z+
     c6e:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     c70:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:58
                cli();
     c72:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:59
    *reg |= bit;
     c74:	ec 91       	ld	r30, X
     c76:	e2 2b       	or	r30, r18
     c78:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
     c7a:	8f bf       	out	0x3f, r24	; 63
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:35
    DDRB &= ~(1 << DDB5);
    PORTB &= ~(1 << PB5);
  */

  pinMode(PB4, OUTPUT); //bypass - burning resistor
  digitalWrite(PB4, LOW);
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	77 da       	rcall	.-2834   	; 0x16e <digitalWrite.constprop.2>
/media/D/Data/Powerwall/cellModule/e_setup.ino:37

  ledON();
     c80:	26 dc       	rcall	.-1972   	; 0x4ce <ledON()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:38
  delay(500);
     c82:	64 ef       	ldi	r22, 0xF4	; 244
     c84:	71 e0       	ldi	r23, 0x01	; 1
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	d1 da       	rcall	.-2654   	; 0x22e <delay>
/media/D/Data/Powerwall/cellModule/e_setup.ino:39
  ledOFF();
     c8c:	1d dc       	rcall	.-1990   	; 0x4c8 <ledOFF()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:41

  green_pattern = GREEN_LED_PATTERN_STANDARD;
     c8e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:37
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
}

bool LoadConfigFromEEPROM() {
  cell_module_config restoredConfig;
     c92:	89 e0       	ldi	r24, 0x09	; 9
     c94:	eb e6       	ldi	r30, 0x6B	; 107
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	de 01       	movw	r26, r28
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <main+0xa4>
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	7c 01       	movw	r14, r24
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     caa:	04 e1       	ldi	r16, 0x14	; 20
     cac:	10 e0       	ldi	r17, 0x00	; 0
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cae:	c8 01       	movw	r24, r16
     cb0:	a7 d0       	rcall	.+334    	; 0xe00 <eeprom_read_byte>
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cb2:	f7 01       	movw	r30, r14
     cb4:	81 93       	st	Z+, r24
     cb6:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     cb8:	0f 5f       	subi	r16, 0xFF	; 255
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cbc:	0d 31       	cpi	r16, 0x1D	; 29
     cbe:	11 05       	cpc	r17, r1
     cc0:	b1 f7       	brne	.-20     	; 0xcae <main+0xb6>
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	9c d0       	rcall	.+312    	; 0xe00 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cc8:	8a 87       	std	Y+10, r24	; 0x0a
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	98 d0       	rcall	.+304    	; 0xe00 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cd0:	8b 87       	std	Y+11, r24	; 0x0b
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	94 d0       	rcall	.+296    	; 0xe00 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cd8:	8c 87       	std	Y+12, r24	; 0x0c
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	90 d0       	rcall	.+288    	; 0xe00 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     ce0:	8d 87       	std	Y+13, r24	; 0x0d
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:44

  EEPROM.get(EEPROM_CONFIG_ADDRESS, restoredConfig);
  EEPROM.get(EEPROM_CHECKSUM_ADDRESS, existingChecksum);

  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	c6 d9       	rcall	.-3188   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.9]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:46

  if (checksum == existingChecksum) {
     ce8:	0a 85       	ldd	r16, Y+10	; 0x0a
     cea:	1b 85       	ldd	r17, Y+11	; 0x0b
     cec:	2c 85       	ldd	r18, Y+12	; 0x0c
     cee:	3d 85       	ldd	r19, Y+13	; 0x0d
     cf0:	60 17       	cp	r22, r16
     cf2:	71 07       	cpc	r23, r17
     cf4:	82 07       	cpc	r24, r18
     cf6:	93 07       	cpc	r25, r19
     cf8:	09 f4       	brne	.+2      	; 0xcfc <main+0x104>
     cfa:	78 c0       	rjmp	.+240    	; 0xdec <main+0x1f4>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:45
    
  //Load our EEPROM configuration
  if (!LoadConfigFromEEPROM()) {
    badConfiguration = true;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <badConfiguration>
/media/D/Data/Powerwall/cellModule/e_setup.ino:47
  }
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
     d02:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <badConfiguration>
     d06:	81 11       	cpse	r24, r1
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <main+0x11a>
     d0a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentConfig>
     d0e:	85 31       	cpi	r24, 0x15	; 21
     d10:	31 f4       	brne	.+12     	; 0xd1e <main+0x126>
/media/D/Data/Powerwall/cellModule/e_setup.ino:48
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
     d12:	8f ee       	ldi	r24, 0xEF	; 239
     d14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/e_setup.ino:49
    currentConfig.SLAVE_ADDR = DEFAULT_SLAVE_ADDR;//need to be here, compiler probably doesn't init struct properly
     d18:	85 e1       	ldi	r24, 0x15	; 21
     d1a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentConfig>
/media/D/Data/Powerwall/cellModule/e_setup.ino:52
  }

  cli();//stop interrupts
     d1e:	f8 94       	cli
/media/D/Data/Powerwall/cellModule/e_setup.ino:54

  voltageBufIdx = 0;
     d20:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <voltageBufIdx>
initTimer1():
/media/D/Data/Powerwall/cellModule/e_setup.ino:5
void initADC();

static inline void initTimer1(void)
{
  TCCR1 |= (1 << CTC1);  // clear timer on compare match
     d24:	80 b7       	in	r24, 0x30	; 48
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:6
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
     d2a:	80 b7       	in	r24, 0x30	; 48
     d2c:	8f 60       	ori	r24, 0x0F	; 15
     d2e:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:7
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	8d bd       	out	0x2d, r24	; 45
/media/D/Data/Powerwall/cellModule/e_setup.ino:8
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
     d34:	89 b7       	in	r24, 0x39	; 57
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	89 bf       	out	0x39, r24	; 57
initADC():
/media/D/Data/Powerwall/cellModule/e_setup.ino:107

  //REFS1 REFS0 ADLAR REFS2 MUX3 MUX2 MUX1 MUX0
  //Internal 2.56V Voltage Reference without external bypass capacitor, disconnected from PB0 (AREF)
  //ADLAR =0 and PB3 (B0011) for INPUT (A3)
  //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
  ADMUX = B10010011;
     d3a:	83 e9       	ldi	r24, 0x93	; 147
     d3c:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/e_setup.ino:130
      (1 << ADPS0);      // set prescaler bit 0
    #endif
  */
  //#if (F_CPU == 8000000)
  //8MHZ clock so set prescaler to 64 (B110)
  ADCSRA =
     d3e:	8e e8       	ldi	r24, 0x8E	; 142
     d40:	86 b9       	out	0x06, r24	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:61
  initTimer1();
  initADC();

  // WDTCSR configuration:     WDIE = 1: Interrupt Enable     WDE = 1 :Reset Enable
  // Enter Watchdog Configuration mode:
  WDTCR |= (1 << WDCE) | (1 << WDE);
     d42:	81 b5       	in	r24, 0x21	; 33
     d44:	88 61       	ori	r24, 0x18	; 24
     d46:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:64

  // Set Watchdog settings - 4000ms timeout
  WDTCR = (1 << WDIE) | (1 << WDE) | (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (0 << WDP0);
     d48:	88 e6       	ldi	r24, 0x68	; 104
     d4a:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:67

  // Enable Global Interrupts
  sei();
     d4c:	78 94       	sei
/media/D/Data/Powerwall/cellModule/e_setup.ino:69

  init_i2c();
     d4e:	ca da       	rcall	.-2668   	; 0x2e4 <init_i2c()>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:25
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests

    green_pattern = GREEN_LED_PANIC;
     d50:	15 e5       	ldi	r17, 0x55	; 85
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d52:	01 e0       	ldi	r16, 0x01	; 1
USI_TWI_Slave_Disable():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:92
void USI_TWI_Slave_Disable()
{
  DDR_USI_CL &= ~(1 << PORT_USI_SCL);  // Set SCL as input
  DDR_USI &= ~(1 << PORT_USI_SDA);  // Set SDA as input
  USICR = 0x00; // Disable USI
  USISR = 0xF0; // Clear all flags and reset overflow counter
     d54:	80 ef       	ldi	r24, 0xF0	; 240
     d56:	f8 2e       	mov	r15, r24
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:3

void loop() {
  wdt_reset();
     d58:	a8 95       	wdr
/media/D/Data/Powerwall/cellModule/z_main.ino:5
  
  if (i2cTmr > 0) {
     d5a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i2cTmr>
     d5e:	88 23       	and	r24, r24
     d60:	29 f0       	breq	.+10     	; 0xd6c <main+0x174>
/media/D/Data/Powerwall/cellModule/z_main.ino:7
    //Count down loop for requests to see if i2c bus hangs or controller stops talking
    i2cTmr--;
     d62:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i2cTmr>
     d66:	81 50       	subi	r24, 0x01	; 1
     d68:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <i2cTmr>
/media/D/Data/Powerwall/cellModule/z_main.ino:11
  }

  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
     d6c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <badConfiguration>
     d70:	81 11       	cpse	r24, r1
     d72:	2a c0       	rjmp	.+84     	; 0xdc8 <main+0x1d0>
     d74:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentConfig>
     d78:	85 31       	cpi	r24, 0x15	; 21
     d7a:	31 f1       	breq	.+76     	; 0xdc8 <main+0x1d0>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:23
  //Don't make this very large or watchdog will reset
  delay(250);
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
     d7c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i2cTmr>
     d80:	81 11       	cpse	r24, r1
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <main+0x1b8>
     d84:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <inPanicMode>
     d88:	81 11       	cpse	r24, r1
     d8a:	12 c0       	rjmp	.+36     	; 0xdb0 <main+0x1b8>
/media/D/Data/Powerwall/cellModule/z_main.ino:25

    green_pattern = GREEN_LED_PANIC;
     d8c:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d90:	00 93 de 00 	sts	0x00DE, r16	; 0x8000de <inPanicMode>
USI_TWI_Slave_Disable():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:89
}

// Disable USI for TWI Slave mode.
void USI_TWI_Slave_Disable()
{
  DDR_USI_CL &= ~(1 << PORT_USI_SCL);  // Set SCL as input
     d94:	ba 98       	cbi	0x17, 2	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:90
  DDR_USI &= ~(1 << PORT_USI_SDA);  // Set SDA as input
     d96:	b8 98       	cbi	0x17, 0	; 23
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:91
  USICR = 0x00; // Disable USI
     d98:	1d b8       	out	0x0d, r1	; 13
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:92
  USISR = 0xF0; // Clear all flags and reset overflow counter
     d9a:	fe b8       	out	0x0e, r15	; 14
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:29
    //Try resetting the i2c bus
    Wire.end();
    init_i2c();
     d9c:	a3 da       	rcall	.-2746   	; 0x2e4 <init_i2c()>
/media/D/Data/Powerwall/cellModule/z_main.ino:31

    error_counter++;
     d9e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <error_counter>
     da2:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <error_counter+0x1>
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <error_counter+0x1>
     dac:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <error_counter>
/media/D/Data/Powerwall/cellModule/z_main.ino:34
  }

  if (i2cTmr > 0 && inPanicMode == true) {//return from panic mode
     db0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i2cTmr>
     db4:	88 23       	and	r24, r24
     db6:	41 f0       	breq	.+16     	; 0xdc8 <main+0x1d0>
     db8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <inPanicMode>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <main+0x1d0>
/media/D/Data/Powerwall/cellModule/z_main.ino:35
    green_pattern = GREEN_LED_PATTERN_STANDARD;
     dc0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:36
    inPanicMode = false;
     dc4:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <inPanicMode>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:15
  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
    HandlePanicMode();//reset i2c bus if no communication going on for some time
  }

  if(inPanicMode)
     dc8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <inPanicMode>
     dcc:	88 23       	and	r24, r24
     dce:	41 f0       	breq	.+16     	; 0xde0 <main+0x1e8>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = Wire.read();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     dd0:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <targetBypassVoltage+0x1>
     dd4:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     dd8:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     ddc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <bypassEnabled>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:19
    bypass_off();

  //Don't make this very large or watchdog will reset
  delay(250);
     de0:	6a ef       	ldi	r22, 0xFA	; 250
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	22 da       	rcall	.-3004   	; 0x22e <delay>
     dea:	b6 cf       	rjmp	.-148    	; 0xd58 <main+0x160>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:48
  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));

  if (checksum == existingChecksum) {
    //Clone the config into our global variable and return all OK
    memcpy(&currentConfig, &restoredConfig, sizeof(cell_module_config));
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	fe 01       	movw	r30, r28
     df0:	31 96       	adiw	r30, 0x01	; 1
     df2:	a1 e6       	ldi	r26, 0x61	; 97
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	01 90       	ld	r0, Z+
     df8:	0d 92       	st	X+, r0
     dfa:	8a 95       	dec	r24
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <main+0x1fe>
     dfe:	81 cf       	rjmp	.-254    	; 0xd02 <main+0x10a>

00000e00 <eeprom_read_byte>:
eeprom_read_byte():
     e00:	e1 99       	sbic	0x1c, 1	; 28
     e02:	fe cf       	rjmp	.-4      	; 0xe00 <eeprom_read_byte>
     e04:	9f bb       	out	0x1f, r25	; 31
     e06:	8e bb       	out	0x1e, r24	; 30
     e08:	e0 9a       	sbi	0x1c, 0	; 28
     e0a:	99 27       	eor	r25, r25
     e0c:	8d b3       	in	r24, 0x1d	; 29
     e0e:	08 95       	ret

00000e10 <eeprom_write_byte>:
eeprom_write_byte():
     e10:	26 2f       	mov	r18, r22

00000e12 <eeprom_write_r18>:
     e12:	e1 99       	sbic	0x1c, 1	; 28
     e14:	fe cf       	rjmp	.-4      	; 0xe12 <eeprom_write_r18>
     e16:	1c ba       	out	0x1c, r1	; 28
     e18:	9f bb       	out	0x1f, r25	; 31
     e1a:	8e bb       	out	0x1e, r24	; 30
     e1c:	2d bb       	out	0x1d, r18	; 29
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	e2 9a       	sbi	0x1c, 2	; 28
     e24:	e1 9a       	sbi	0x1c, 1	; 28
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	08 95       	ret

00000e2c <__cmpsf2>:
__cmpsf2():
     e2c:	6c d0       	rcall	.+216    	; 0xf06 <__fp_cmp>
     e2e:	08 f4       	brcc	.+2      	; 0xe32 <__cmpsf2+0x6>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	08 95       	ret

00000e34 <__fixunssfsi>:
__fixunssfsi():
     e34:	94 d0       	rcall	.+296    	; 0xf5e <__fp_splitA>
     e36:	88 f0       	brcs	.+34     	; 0xe5a <__fixunssfsi+0x26>
     e38:	9f 57       	subi	r25, 0x7F	; 127
     e3a:	90 f0       	brcs	.+36     	; 0xe60 <__fixunssfsi+0x2c>
     e3c:	b9 2f       	mov	r27, r25
     e3e:	99 27       	eor	r25, r25
     e40:	b7 51       	subi	r27, 0x17	; 23
     e42:	a0 f0       	brcs	.+40     	; 0xe6c <__fixunssfsi+0x38>
     e44:	d1 f0       	breq	.+52     	; 0xe7a <__fixunssfsi+0x46>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	88 1f       	adc	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	1a f0       	brmi	.+6      	; 0xe56 <__fixunssfsi+0x22>
     e50:	ba 95       	dec	r27
     e52:	c9 f7       	brne	.-14     	; 0xe46 <__fixunssfsi+0x12>
     e54:	12 c0       	rjmp	.+36     	; 0xe7a <__fixunssfsi+0x46>
     e56:	b1 30       	cpi	r27, 0x01	; 1
     e58:	81 f0       	breq	.+32     	; 0xe7a <__fixunssfsi+0x46>
     e5a:	9b d0       	rcall	.+310    	; 0xf92 <__fp_zero>
     e5c:	b1 e0       	ldi	r27, 0x01	; 1
     e5e:	08 95       	ret
     e60:	98 c0       	rjmp	.+304    	; 0xf92 <__fp_zero>
     e62:	67 2f       	mov	r22, r23
     e64:	78 2f       	mov	r23, r24
     e66:	88 27       	eor	r24, r24
     e68:	b8 5f       	subi	r27, 0xF8	; 248
     e6a:	39 f0       	breq	.+14     	; 0xe7a <__fixunssfsi+0x46>
     e6c:	b9 3f       	cpi	r27, 0xF9	; 249
     e6e:	cc f3       	brlt	.-14     	; 0xe62 <__fixunssfsi+0x2e>
     e70:	86 95       	lsr	r24
     e72:	77 95       	ror	r23
     e74:	67 95       	ror	r22
     e76:	b3 95       	inc	r27
     e78:	d9 f7       	brne	.-10     	; 0xe70 <__fixunssfsi+0x3c>
     e7a:	3e f4       	brtc	.+14     	; 0xe8a <__fixunssfsi+0x56>
     e7c:	90 95       	com	r25
     e7e:	80 95       	com	r24
     e80:	70 95       	com	r23
     e82:	61 95       	neg	r22
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	8f 4f       	sbci	r24, 0xFF	; 255
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	08 95       	ret

00000e8c <__floatunsisf>:
__floatunsisf():
     e8c:	e8 94       	clt
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <__floatsisf+0x12>

00000e90 <__floatsisf>:
     e90:	97 fb       	bst	r25, 7
     e92:	3e f4       	brtc	.+14     	; 0xea2 <__floatsisf+0x12>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	99 23       	and	r25, r25
     ea4:	a9 f0       	breq	.+42     	; 0xed0 <__floatsisf+0x40>
     ea6:	f9 2f       	mov	r31, r25
     ea8:	96 e9       	ldi	r25, 0x96	; 150
     eaa:	bb 27       	eor	r27, r27
     eac:	93 95       	inc	r25
     eae:	f6 95       	lsr	r31
     eb0:	87 95       	ror	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b7 95       	ror	r27
     eb8:	f1 11       	cpse	r31, r1
     eba:	f8 cf       	rjmp	.-16     	; 0xeac <__floatsisf+0x1c>
     ebc:	fa f4       	brpl	.+62     	; 0xefc <__floatsisf+0x6c>
     ebe:	bb 0f       	add	r27, r27
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__floatsisf+0x36>
     ec2:	60 ff       	sbrs	r22, 0
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <__floatsisf+0x6c>
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	16 c0       	rjmp	.+44     	; 0xefc <__floatsisf+0x6c>
     ed0:	88 23       	and	r24, r24
     ed2:	11 f0       	breq	.+4      	; 0xed8 <__floatsisf+0x48>
     ed4:	96 e9       	ldi	r25, 0x96	; 150
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <__floatsisf+0x6a>
     ed8:	77 23       	and	r23, r23
     eda:	21 f0       	breq	.+8      	; 0xee4 <__floatsisf+0x54>
     edc:	9e e8       	ldi	r25, 0x8E	; 142
     ede:	87 2f       	mov	r24, r23
     ee0:	76 2f       	mov	r23, r22
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <__floatsisf+0x5e>
     ee4:	66 23       	and	r22, r22
     ee6:	71 f0       	breq	.+28     	; 0xf04 <__floatsisf+0x74>
     ee8:	96 e8       	ldi	r25, 0x86	; 134
     eea:	86 2f       	mov	r24, r22
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	2a f0       	brmi	.+10     	; 0xefc <__floatsisf+0x6c>
     ef2:	9a 95       	dec	r25
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	da f7       	brpl	.-10     	; 0xef2 <__floatsisf+0x62>
     efc:	88 0f       	add	r24, r24
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
     f02:	97 f9       	bld	r25, 7
     f04:	08 95       	ret

00000f06 <__fp_cmp>:
__fp_cmp():
     f06:	99 0f       	add	r25, r25
     f08:	00 08       	sbc	r0, r0
     f0a:	55 0f       	add	r21, r21
     f0c:	aa 0b       	sbc	r26, r26
     f0e:	e0 e8       	ldi	r30, 0x80	; 128
     f10:	fe ef       	ldi	r31, 0xFE	; 254
     f12:	16 16       	cp	r1, r22
     f14:	17 06       	cpc	r1, r23
     f16:	e8 07       	cpc	r30, r24
     f18:	f9 07       	cpc	r31, r25
     f1a:	c0 f0       	brcs	.+48     	; 0xf4c <__fp_cmp+0x46>
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	e4 07       	cpc	r30, r20
     f22:	f5 07       	cpc	r31, r21
     f24:	98 f0       	brcs	.+38     	; 0xf4c <__fp_cmp+0x46>
     f26:	62 1b       	sub	r22, r18
     f28:	73 0b       	sbc	r23, r19
     f2a:	84 0b       	sbc	r24, r20
     f2c:	95 0b       	sbc	r25, r21
     f2e:	39 f4       	brne	.+14     	; 0xf3e <__fp_cmp+0x38>
     f30:	0a 26       	eor	r0, r26
     f32:	61 f0       	breq	.+24     	; 0xf4c <__fp_cmp+0x46>
     f34:	23 2b       	or	r18, r19
     f36:	24 2b       	or	r18, r20
     f38:	25 2b       	or	r18, r21
     f3a:	21 f4       	brne	.+8      	; 0xf44 <__fp_cmp+0x3e>
     f3c:	08 95       	ret
     f3e:	0a 26       	eor	r0, r26
     f40:	09 f4       	brne	.+2      	; 0xf44 <__fp_cmp+0x3e>
     f42:	a1 40       	sbci	r26, 0x01	; 1
     f44:	a6 95       	lsr	r26
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	81 1d       	adc	r24, r1
     f4a:	81 1d       	adc	r24, r1
     f4c:	08 95       	ret

00000f4e <__fp_split3>:
__fp_split3():
     f4e:	57 fd       	sbrc	r21, 7
     f50:	90 58       	subi	r25, 0x80	; 128
     f52:	44 0f       	add	r20, r20
     f54:	55 1f       	adc	r21, r21
     f56:	59 f0       	breq	.+22     	; 0xf6e <__fp_splitA+0x10>
     f58:	5f 3f       	cpi	r21, 0xFF	; 255
     f5a:	71 f0       	breq	.+28     	; 0xf78 <__fp_splitA+0x1a>
     f5c:	47 95       	ror	r20

00000f5e <__fp_splitA>:
     f5e:	88 0f       	add	r24, r24
     f60:	97 fb       	bst	r25, 7
     f62:	99 1f       	adc	r25, r25
     f64:	61 f0       	breq	.+24     	; 0xf7e <__fp_splitA+0x20>
     f66:	9f 3f       	cpi	r25, 0xFF	; 255
     f68:	79 f0       	breq	.+30     	; 0xf88 <__fp_splitA+0x2a>
     f6a:	87 95       	ror	r24
     f6c:	08 95       	ret
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	55 1f       	adc	r21, r21
     f76:	f2 cf       	rjmp	.-28     	; 0xf5c <__fp_split3+0xe>
     f78:	46 95       	lsr	r20
     f7a:	f1 df       	rcall	.-30     	; 0xf5e <__fp_splitA>
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <__fp_splitA+0x30>
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	18 06       	cpc	r1, r24
     f84:	99 1f       	adc	r25, r25
     f86:	f1 cf       	rjmp	.-30     	; 0xf6a <__fp_splitA+0xc>
     f88:	86 95       	lsr	r24
     f8a:	71 05       	cpc	r23, r1
     f8c:	61 05       	cpc	r22, r1
     f8e:	08 94       	sec
     f90:	08 95       	ret

00000f92 <__fp_zero>:
__fp_zero():
     f92:	e8 94       	clt

00000f94 <__fp_szero>:
     f94:	bb 27       	eor	r27, r27
     f96:	66 27       	eor	r22, r22
     f98:	77 27       	eor	r23, r23
     f9a:	cb 01       	movw	r24, r22
     f9c:	97 f9       	bld	r25, 7
     f9e:	08 95       	ret

00000fa0 <__mulsf3>:
__mulsf3():
     fa0:	0a d0       	rcall	.+20     	; 0xfb6 <__mulsf3x>
     fa2:	80 c0       	rjmp	.+256    	; 0x10a4 <__fp_round>
     fa4:	71 d0       	rcall	.+226    	; 0x1088 <__fp_pscA>
     fa6:	28 f0       	brcs	.+10     	; 0xfb2 <__mulsf3+0x12>
     fa8:	76 d0       	rcall	.+236    	; 0x1096 <__fp_pscB>
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <__mulsf3+0x12>
     fac:	95 23       	and	r25, r21
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__mulsf3+0x12>
     fb0:	62 c0       	rjmp	.+196    	; 0x1076 <__fp_inf>
     fb2:	67 c0       	rjmp	.+206    	; 0x1082 <__fp_nan>
     fb4:	ef cf       	rjmp	.-34     	; 0xf94 <__fp_szero>

00000fb6 <__mulsf3x>:
__mulsf3x():
     fb6:	cb df       	rcall	.-106    	; 0xf4e <__fp_split3>
     fb8:	a8 f3       	brcs	.-22     	; 0xfa4 <__mulsf3+0x4>

00000fba <__mulsf3_pse>:
     fba:	99 23       	and	r25, r25
     fbc:	d9 f3       	breq	.-10     	; 0xfb4 <__mulsf3+0x14>
     fbe:	55 23       	and	r21, r21
     fc0:	c9 f3       	breq	.-14     	; 0xfb4 <__mulsf3+0x14>
     fc2:	95 0f       	add	r25, r21
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	55 1f       	adc	r21, r21
     fc8:	aa 27       	eor	r26, r26
     fca:	ee 27       	eor	r30, r30
     fcc:	ff 27       	eor	r31, r31
     fce:	bb 27       	eor	r27, r27
     fd0:	00 24       	eor	r0, r0
     fd2:	08 94       	sec
     fd4:	67 95       	ror	r22
     fd6:	20 f4       	brcc	.+8      	; 0xfe0 <__mulsf3_pse+0x26>
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	b4 1f       	adc	r27, r20
     fde:	0a 1e       	adc	r0, r26
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	44 1f       	adc	r20, r20
     fe6:	aa 1f       	adc	r26, r26
     fe8:	66 95       	lsr	r22
     fea:	a9 f7       	brne	.-22     	; 0xfd6 <__mulsf3_pse+0x1c>
     fec:	77 95       	ror	r23
     fee:	30 f4       	brcc	.+12     	; 0xffc <__mulsf3_pse+0x42>
     ff0:	f3 0f       	add	r31, r19
     ff2:	b4 1f       	adc	r27, r20
     ff4:	0a 1e       	adc	r0, r26
     ff6:	12 1e       	adc	r1, r18
     ff8:	08 f4       	brcc	.+2      	; 0xffc <__mulsf3_pse+0x42>
     ffa:	63 95       	inc	r22
     ffc:	33 0f       	add	r19, r19
     ffe:	44 1f       	adc	r20, r20
    1000:	aa 1f       	adc	r26, r26
    1002:	22 1f       	adc	r18, r18
    1004:	76 95       	lsr	r23
    1006:	99 f7       	brne	.-26     	; 0xfee <__mulsf3_pse+0x34>
    1008:	87 95       	ror	r24
    100a:	20 f4       	brcc	.+8      	; 0x1014 <__mulsf3_pse+0x5a>
    100c:	b4 0f       	add	r27, r20
    100e:	0a 1e       	adc	r0, r26
    1010:	12 1e       	adc	r1, r18
    1012:	63 1f       	adc	r22, r19
    1014:	44 0f       	add	r20, r20
    1016:	aa 1f       	adc	r26, r26
    1018:	22 1f       	adc	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	86 95       	lsr	r24
    101e:	a9 f7       	brne	.-22     	; 0x100a <__mulsf3_pse+0x50>
    1020:	86 2f       	mov	r24, r22
    1022:	71 2d       	mov	r23, r1
    1024:	60 2d       	mov	r22, r0
    1026:	11 24       	eor	r1, r1
    1028:	9f 57       	subi	r25, 0x7F	; 127
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	8a f0       	brmi	.+34     	; 0x1050 <__mulsf3_pse+0x96>
    102e:	e1 f0       	breq	.+56     	; 0x1068 <__mulsf3_pse+0xae>
    1030:	88 23       	and	r24, r24
    1032:	4a f0       	brmi	.+18     	; 0x1046 <__mulsf3_pse+0x8c>
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	bb 1f       	adc	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	91 50       	subi	r25, 0x01	; 1
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__mulsf3_pse+0x76>
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	51 05       	cpc	r21, r1
    104a:	70 f0       	brcs	.+28     	; 0x1068 <__mulsf3_pse+0xae>
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <__fp_inf>
    104e:	a2 cf       	rjmp	.-188    	; 0xf94 <__fp_szero>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	ec f3       	brlt	.-6      	; 0x104e <__mulsf3_pse+0x94>
    1054:	98 3e       	cpi	r25, 0xE8	; 232
    1056:	dc f3       	brlt	.-10     	; 0x104e <__mulsf3_pse+0x94>
    1058:	86 95       	lsr	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	b7 95       	ror	r27
    1060:	f7 95       	ror	r31
    1062:	e7 95       	ror	r30
    1064:	9f 5f       	subi	r25, 0xFF	; 255
    1066:	c1 f7       	brne	.-16     	; 0x1058 <__mulsf3_pse+0x9e>
    1068:	fe 2b       	or	r31, r30
    106a:	88 0f       	add	r24, r24
    106c:	91 1d       	adc	r25, r1
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	97 f9       	bld	r25, 7
    1074:	08 95       	ret

00001076 <__fp_inf>:
    1076:	97 f9       	bld	r25, 7
    1078:	9f 67       	ori	r25, 0x7F	; 127
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	08 95       	ret

00001082 <__fp_nan>:
    1082:	9f ef       	ldi	r25, 0xFF	; 255
    1084:	80 ec       	ldi	r24, 0xC0	; 192
    1086:	08 95       	ret

00001088 <__fp_pscA>:
__fp_pscA():
    1088:	00 24       	eor	r0, r0
    108a:	0a 94       	dec	r0
    108c:	16 16       	cp	r1, r22
    108e:	17 06       	cpc	r1, r23
    1090:	18 06       	cpc	r1, r24
    1092:	09 06       	cpc	r0, r25
    1094:	08 95       	ret

00001096 <__fp_pscB>:
__fp_pscB():
    1096:	00 24       	eor	r0, r0
    1098:	0a 94       	dec	r0
    109a:	12 16       	cp	r1, r18
    109c:	13 06       	cpc	r1, r19
    109e:	14 06       	cpc	r1, r20
    10a0:	05 06       	cpc	r0, r21
    10a2:	08 95       	ret

000010a4 <__fp_round>:
__fp_round():
    10a4:	09 2e       	mov	r0, r25
    10a6:	03 94       	inc	r0
    10a8:	00 0c       	add	r0, r0
    10aa:	11 f4       	brne	.+4      	; 0x10b0 <__fp_round+0xc>
    10ac:	88 23       	and	r24, r24
    10ae:	52 f0       	brmi	.+20     	; 0x10c4 <__fp_round+0x20>
    10b0:	bb 0f       	add	r27, r27
    10b2:	40 f4       	brcc	.+16     	; 0x10c4 <__fp_round+0x20>
    10b4:	bf 2b       	or	r27, r31
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__fp_round+0x18>
    10b8:	60 ff       	sbrs	r22, 0
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__fp_round+0x20>
    10bc:	6f 5f       	subi	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	08 95       	ret

000010c6 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    10c6:	f8 94       	cli

000010c8 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <__stop_program>
