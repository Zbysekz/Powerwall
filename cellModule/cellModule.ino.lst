
/tmp/arduino_build_413001/cellModule.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	0b c5       	rjmp	.+2582   	; 0xa1e <__vector_3>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	ec c3       	rjmp	.+2008   	; 0x7e4 <__vector_5>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	a6 c5       	rjmp	.+2892   	; 0xb5e <__vector_8>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	e4 c4       	rjmp	.+2504   	; 0x9e4 <__vector_13>
      1c:	2d c4       	rjmp	.+2138   	; 0x878 <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
      2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
      30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
      36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf e5       	ldi	r28, 0x5F	; 95
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      48:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      4e:	e2 ee       	ldi	r30, 0xE2	; 226
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      50:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      54:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      56:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      58:	a4 38       	cpi	r26, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      5a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      5e:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      60:	a4 e8       	ldi	r26, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      62:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      68:	ab 3f       	cpi	r26, 0xFB	; 251
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      6a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
      6e:	cf d5       	rcall	.+2974   	; 0xc0e <main>
      70:	b6 c8       	rjmp	.-3732   	; 0xfffff1de <__eeprom_end+0xff7ef1de>

00000072 <__bad_interrupt>:
__vector_1():
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>:
_Z14calculateCRC32PKhj.constprop.8():
/media/D/Data/Powerwall/cellModule/b_functions.ino:12
inline void ledOFF() {
  DDRB |= (1 << DDB1);
  PORTB &= ~(1 << PB1);
}

uint32_t calculateCRC32(const uint8_t *data, size_t length)
      74:	4f 92       	push	r4
      76:	5f 92       	push	r5
      78:	6f 92       	push	r6
      7a:	7f 92       	push	r7
      7c:	8f 92       	push	r8
      7e:	9f 92       	push	r9
      80:	af 92       	push	r10
      82:	bf 92       	push	r11
      84:	cf 92       	push	r12
      86:	df 92       	push	r13
      88:	ef 92       	push	r14
      8a:	ff 92       	push	r15
      8c:	fc 01       	movw	r30, r24
      8e:	71 96       	adiw	r30, 0x11	; 17
/media/D/Data/Powerwall/cellModule/b_functions.ino:14
{
  uint32_t crc = 0xffffffff;
      90:	cc 24       	eor	r12, r12
      92:	ca 94       	dec	r12
      94:	dc 2c       	mov	r13, r12
      96:	76 01       	movw	r14, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:15
  while (length--) {
      98:	8e 17       	cp	r24, r30
      9a:	9f 07       	cpc	r25, r31
      9c:	e1 f1       	breq	.+120    	; 0x116 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0xa2>
/media/D/Data/Powerwall/cellModule/b_functions.ino:16
    uint8_t c = *data++;
      9e:	dc 01       	movw	r26, r24
      a0:	4d 90       	ld	r4, X+
      a2:	cd 01       	movw	r24, r26
      a4:	28 e0       	ldi	r18, 0x08	; 8
      a6:	30 e0       	ldi	r19, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      a8:	40 e8       	ldi	r20, 0x80	; 128
      aa:	84 2e       	mov	r8, r20
      ac:	91 2c       	mov	r9, r1
      ae:	a1 2c       	mov	r10, r1
      b0:	b1 2c       	mov	r11, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:19
      bool bit = crc & 0x80000000;
      if (c & i) {
      b2:	51 2c       	mov	r5, r1
      b4:	71 2c       	mov	r7, r1
      b6:	61 2c       	mov	r6, r1
      b8:	b3 01       	movw	r22, r6
      ba:	a2 01       	movw	r20, r4
      bc:	48 21       	and	r20, r8
      be:	59 21       	and	r21, r9
      c0:	6a 21       	and	r22, r10
      c2:	7b 21       	and	r23, r11
      c4:	45 2b       	or	r20, r21
      c6:	46 2b       	or	r20, r22
      c8:	47 2b       	or	r20, r23
      ca:	f1 f4       	brne	.+60     	; 0x108 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x94>
/media/D/Data/Powerwall/cellModule/b_functions.ino:18
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      bool bit = crc & 0x80000000;
      cc:	b7 01       	movw	r22, r14
      ce:	a6 01       	movw	r20, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      if (c & i) {
        bit = !bit;
      d0:	44 27       	eor	r20, r20
      d2:	77 fd       	sbrc	r23, 7
      d4:	43 95       	inc	r20
      d6:	55 27       	eor	r21, r21
      d8:	66 27       	eor	r22, r22
      da:	77 27       	eor	r23, r23
/media/D/Data/Powerwall/cellModule/b_functions.ino:22
      }
      crc <<= 1;
      dc:	cc 0c       	add	r12, r12
      de:	dd 1c       	adc	r13, r13
      e0:	ee 1c       	adc	r14, r14
      e2:	ff 1c       	adc	r15, r15
/media/D/Data/Powerwall/cellModule/b_functions.ino:23
      if (bit) {
      e4:	44 23       	and	r20, r20
      e6:	41 f0       	breq	.+16     	; 0xf8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x84>
/media/D/Data/Powerwall/cellModule/b_functions.ino:24
        crc ^= 0x04c11db7;
      e8:	b7 eb       	ldi	r27, 0xB7	; 183
      ea:	cb 26       	eor	r12, r27
      ec:	bd e1       	ldi	r27, 0x1D	; 29
      ee:	db 26       	eor	r13, r27
      f0:	b1 ec       	ldi	r27, 0xC1	; 193
      f2:	eb 26       	eor	r14, r27
      f4:	b4 e0       	ldi	r27, 0x04	; 4
      f6:	fb 26       	eor	r15, r27
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
uint32_t calculateCRC32(const uint8_t *data, size_t length)
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      f8:	b6 94       	lsr	r11
      fa:	a7 94       	ror	r10
      fc:	97 94       	ror	r9
      fe:	87 94       	ror	r8
     100:	21 50       	subi	r18, 0x01	; 1
     102:	31 09       	sbc	r19, r1
     104:	c9 f6       	brne	.-78     	; 0xb8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x44>
     106:	c8 cf       	rjmp	.-112    	; 0x98 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x24>
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      bool bit = crc & 0x80000000;
      if (c & i) {
        bit = !bit;
     108:	b7 01       	movw	r22, r14
     10a:	a6 01       	movw	r20, r12
     10c:	40 95       	com	r20
     10e:	50 95       	com	r21
     110:	60 95       	com	r22
     112:	70 95       	com	r23
     114:	dd cf       	rjmp	.-70     	; 0xd0 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x5c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:29
        crc ^= 0x04c11db7;
      }
    }
  }
  return crc;
}
     116:	c7 01       	movw	r24, r14
     118:	b6 01       	movw	r22, r12
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	9f 90       	pop	r9
     128:	8f 90       	pop	r8
     12a:	7f 90       	pop	r7
     12c:	6f 90       	pop	r6
     12e:	5f 90       	pop	r5
     130:	4f 90       	pop	r4
     132:	08 95       	ret

00000134 <digitalWrite.constprop.1>:
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     134:	ea e3       	ldi	r30, 0x3A	; 58
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
     13a:	e4 e3       	ldi	r30, 0x34	; 52
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
     140:	ee e2       	ldi	r30, 0x2E	; 46
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	e4 91       	lpm	r30, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     146:	ee 23       	and	r30, r30
     148:	c1 f0       	breq	.+48     	; 0x17a <digitalWrite.constprop.1+0x46>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     14a:	22 23       	and	r18, r18
     14c:	29 f0       	breq	.+10     	; 0x158 <digitalWrite.constprop.1+0x24>
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
     14e:	21 30       	cpi	r18, 0x01	; 1
     150:	a9 f4       	brne	.+42     	; 0x17c <digitalWrite.constprop.1+0x48>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
     152:	2a b5       	in	r18, 0x2a	; 42
     154:	2f 77       	andi	r18, 0x7F	; 127
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
     156:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ec 5d       	subi	r30, 0xDC	; 220
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	a5 91       	lpm	r26, Z+
     164:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:151

  if (val == LOW) {
     166:	81 11       	cpse	r24, r1
     168:	1a c0       	rjmp	.+52     	; 0x19e <digitalWrite.constprop.1+0x6a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:152
    uint8_t oldSREG = SREG;
     16a:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:153
    cli();
     16c:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:154
    *out &= ~bit;
     16e:	2c 91       	ld	r18, X
     170:	e9 2f       	mov	r30, r25
     172:	e0 95       	com	r30
     174:	e2 23       	and	r30, r18
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     176:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
     178:	8f bf       	out	0x3f, r24	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:162
  }
}
     17a:	08 95       	ret
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
     17c:	22 30       	cpi	r18, 0x02	; 2
     17e:	19 f4       	brne	.+6      	; 0x186 <digitalWrite.constprop.1+0x52>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
     180:	2a b5       	in	r18, 0x2a	; 42
     182:	2f 7d       	andi	r18, 0xDF	; 223
     184:	e8 cf       	rjmp	.-48     	; 0x156 <digitalWrite.constprop.1+0x22>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
     186:	23 30       	cpi	r18, 0x03	; 3
     188:	21 f4       	brne	.+8      	; 0x192 <digitalWrite.constprop.1+0x5e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
     18a:	20 b7       	in	r18, 0x30	; 48
     18c:	2f 7d       	andi	r18, 0xDF	; 223
     18e:	20 bf       	out	0x30, r18	; 48
     190:	e3 cf       	rjmp	.-58     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
     192:	24 30       	cpi	r18, 0x04	; 4
     194:	09 f7       	brne	.-62     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
     196:	2c b5       	in	r18, 0x2c	; 44
     198:	2f 7d       	andi	r18, 0xDF	; 223
     19a:	2c bd       	out	0x2c, r18	; 44
     19c:	dd cf       	rjmp	.-70     	; 0x158 <digitalWrite.constprop.1+0x24>
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:157
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     19e:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:158
    cli();
     1a0:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    *out |= bit;
     1a2:	ec 91       	ld	r30, X
     1a4:	e9 2b       	or	r30, r25
     1a6:	e7 cf       	rjmp	.-50     	; 0x176 <digitalWrite.constprop.1+0x42>

000001a8 <micros>:
micros():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
     1a8:	3f b7       	in	r19, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:183

    cli();
     1aa:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:184
    m = millis_timer_overflow_count;
     1ac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <millis_timer_overflow_count>
     1b0:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <millis_timer_overflow_count+0x1>
     1b4:	a0 91 ed 00 	lds	r26, 0x00ED	; 0x8000ed <millis_timer_overflow_count+0x2>
     1b8:	b0 91 ee 00 	lds	r27, 0x00EE	; 0x8000ee <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     1bc:	22 b7       	in	r18, 0x32	; 50
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:201

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     1be:	08 b6       	in	r0, 0x38	; 56
     1c0:	01 fe       	sbrs	r0, 1
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <micros+0x26>
     1c4:	2f 3f       	cpi	r18, 0xFF	; 255
     1c6:	19 f0       	breq	.+6      	; 0x1ce <micros+0x26>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:202
      m++;
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	a1 1d       	adc	r26, r1
     1cc:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
     1ce:	3f bf       	out	0x3f, r19	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     1d0:	ba 2f       	mov	r27, r26
     1d2:	a9 2f       	mov	r26, r25
     1d4:	98 2f       	mov	r25, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	bc 01       	movw	r22, r24
     1da:	cd 01       	movw	r24, r26
     1dc:	62 0f       	add	r22, r18
     1de:	71 1d       	adc	r23, r1
     1e0:	81 1d       	adc	r24, r1
     1e2:	91 1d       	adc	r25, r1
     1e4:	43 e0       	ldi	r20, 0x03	; 3
     1e6:	66 0f       	add	r22, r22
     1e8:	77 1f       	adc	r23, r23
     1ea:	88 1f       	adc	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	4a 95       	dec	r20
     1f0:	d1 f7       	brne	.-12     	; 0x1e6 <micros+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
     1f2:	08 95       	ret

000001f4 <usiTwiReceiveByte>:
usiTwiReceiveByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:443
)
{
  uint8_t rtn_byte;

  // wait for Rx data
  while ( !rxCount );
     1f4:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rxCount>
     1f8:	88 23       	and	r24, r24
     1fa:	e1 f3       	breq	.-8      	; 0x1f4 <usiTwiReceiveByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:445

  rtn_byte = rxBuf [ rxTail ];
     1fc:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <rxTail>
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	e2 54       	subi	r30, 0x42	; 66
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	80 81       	ld	r24, Z
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:447
  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
     208:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <rxTail>
     20c:	9f 5f       	subi	r25, 0xFF	; 255
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:448
  rxCount--;
     214:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <rxCount>
     218:	91 50       	subi	r25, 0x01	; 1
     21a:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:453

  // return data from the buffer.
  return rtn_byte;

} // end usiTwiReceiveByte
     21e:	08 95       	ret

00000220 <usiTwiTransmitByte>:
usiTwiTransmitByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:420
{

  uint8_t tmphead;

  // wait for free space in buffer
  while ( txCount == TWI_TX_BUFFER_SIZE) ;
     220:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <txCount>
     224:	90 31       	cpi	r25, 0x10	; 16
     226:	e1 f3       	breq	.-8      	; 0x220 <usiTwiTransmitByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:423

  // store data in buffer
  txBuf[ txHead ] = data;
     228:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <txHead>
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	e1 53       	subi	r30, 0x31	; 49
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:424
  txHead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
     234:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <txHead>
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	8f 70       	andi	r24, 0x0F	; 15
     23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:425
  txCount++;
     240:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <txCount>
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:427

} // end usiTwiTransmitByte
     24a:	08 95       	ret

0000024c <init_i2c()>:
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:11
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
}
void init_i2c() {
  TinyWireS.begin(currentConfig.SLAVE_ADDR);
     24c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
flushTwiBuffers():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:333
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
     250:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:334
  rxHead = 0;
     254:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:335
  rxCount = 0;
     258:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:336
  txTail = 0;
     25c:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:337
  txHead = 0;
     260:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:338
  txCount = 0;
     264:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <txCount>
usiTwiSlaveInit():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:361
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
     268:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <slaveAddress>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:369
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
     26c:	87 b3       	in	r24, 0x17	; 23
     26e:	85 60       	ori	r24, 0x05	; 5
     270:	87 bb       	out	0x17, r24	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:372

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
     272:	c2 9a       	sbi	0x18, 2	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:375

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
     274:	c0 9a       	sbi	0x18, 0	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:378

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
     276:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:380

  USICR =
     278:	88 ea       	ldi	r24, 0xA8	; 168
     27a:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:395
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
     27c:	80 ef       	ldi	r24, 0xF0	; 240
     27e:	8e b9       	out	0x0e, r24	; 14
onReceive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:53
}

// sets function called on slave write
void USI_TWI_S::onReceive( void (*function)(uint8_t) )
{
  usi_onReceiverPtr = function;
     280:	89 ed       	ldi	r24, 0xD9	; 217
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <usi_onReceiverPtr+0x1>
     288:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <usi_onReceiverPtr>
onRequest():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:59
}

// sets function called on slave read
void USI_TWI_S::onRequest( void (*function)(void) )
{
  usi_onRequestPtr = function;
     28c:	8a eb       	ldi	r24, 0xBA	; 186
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <usi_onRequestPtr+0x1>
     294:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <usi_onRequestPtr>
_Z8init_i2cv():
/media/D/Data/Powerwall/cellModule/e_setup.ino:14
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}
     298:	08 95       	ret

0000029a <getVoltageMeasurement()>:
_Z21getVoltageMeasurementv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	20 e0       	ldi	r18, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:120
}


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	dc 01       	movw	r26, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:122
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
    sum += voltageBuff[k];
     2a4:	f9 01       	movw	r30, r18
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	e0 57       	subi	r30, 0x70	; 112
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	40 81       	ld	r20, Z
     2b0:	51 81       	ldd	r21, Z+1	; 0x01
     2b2:	84 0f       	add	r24, r20
     2b4:	95 1f       	adc	r25, r21
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	20 31       	cpi	r18, 0x10	; 16
     2c0:	31 05       	cpc	r19, r1
     2c2:	81 f7       	brne	.-32     	; 0x2a4 <getVoltageMeasurement()+0xa>
/media/D/Data/Powerwall/cellModule/b_functions.ino:127
    sum += voltageBuff[k];
  }
  //Shift the bits to match OVERSAMPLE_LOOP size (buffer size of 8=3 shifts, 16=4 shifts)
  //Assume perfect reference of 2560mV for reference - we will correct for this with voltageCalibration

  uint16_t raw = (uint16_t)(sum / OVERSAMPLE_LOOP);
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	b6 95       	lsr	r27
     2c8:	a7 95       	ror	r26
     2ca:	97 95       	ror	r25
     2cc:	87 95       	ror	r24
     2ce:	2a 95       	dec	r18
     2d0:	d1 f7       	brne	.-12     	; 0x2c6 <getVoltageMeasurement()+0x2c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:129

  return (uint16_t)((float)raw * currentConfig.voltageCalibration + currentConfig.voltageCalibration2);
     2d2:	bc 01       	movw	r22, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	65 d6       	rcall	.+3274   	; 0xfa4 <__floatunsisf>
     2da:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
     2de:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
     2e2:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
     2e6:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
     2ea:	0e d7       	rcall	.+3612   	; 0x1108 <__mulsf3>
     2ec:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
     2f0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
     2f4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
     2f8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
     2fc:	bf d5       	rcall	.+2942   	; 0xe7c <__addsf3>
     2fe:	26 d6       	rcall	.+3148   	; 0xf4c <__fixunssfsi>
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	4f d6       	rcall	.+3230   	; 0xfa4 <__floatunsisf>
/media/D/Data/Powerwall/cellModule/b_functions.ino:130
}
     306:	08 95       	ret

00000308 <readFloat()>:
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:97
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}

float readFloat() {
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
     30c:	73 df       	rcall	.-282    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:98
  float_to_bytes.b[0] = TinyWireS.receive();
     30e:	c4 e8       	ldi	r28, 0x84	; 132
     310:	d0 e0       	ldi	r29, 0x00	; 0
     312:	88 83       	st	Y, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     314:	6f df       	rcall	.-290    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:99
  float_to_bytes.b[1] = TinyWireS.receive();
     316:	89 83       	std	Y+1, r24	; 0x01
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     318:	6d df       	rcall	.-294    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:100
  float_to_bytes.b[2] = TinyWireS.receive();
     31a:	8a 83       	std	Y+2, r24	; 0x02
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     31c:	6b df       	rcall	.-298    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:101
  float_to_bytes.b[3] = TinyWireS.receive();
     31e:	8b 83       	std	Y+3, r24	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:103

  return float_to_bytes.val;
     320:	68 81       	ld	r22, Y
     322:	79 81       	ldd	r23, Y+1	; 0x01
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	9b 81       	ldd	r25, Y+3	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:104
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <sendFloat(float)>:
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:88

void sendByte(uint8_t number) {
  TinyWireS.send(number);
}

void sendFloat(float number) {
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	17 2f       	mov	r17, r23
     336:	d8 2f       	mov	r29, r24
     338:	c9 2f       	mov	r28, r25
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
  float_to_bytes.val = number;
     33a:	86 2f       	mov	r24, r22
     33c:	97 2f       	mov	r25, r23
     33e:	ad 2f       	mov	r26, r29
     340:	bc 2f       	mov	r27, r28
     342:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
     346:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
     34a:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <__data_end+0x2>
     34e:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <__data_end+0x3>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
void USI_TWI_S::begin(uint8_t slaveAddr){ // initialize I2C lib
  usiTwiSlaveInit(slaveAddr); 
}

void USI_TWI_S::send(uint8_t data){  // send it back to master
  usiTwiTransmitByte(data);
     352:	66 df       	rcall	.-308    	; 0x220 <usiTwiTransmitByte>
     354:	81 2f       	mov	r24, r17
     356:	64 df       	rcall	.-312    	; 0x220 <usiTwiTransmitByte>
     358:	8d 2f       	mov	r24, r29
     35a:	62 df       	rcall	.-316    	; 0x220 <usiTwiTransmitByte>
     35c:	8c 2f       	mov	r24, r28
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:95

  TinyWireS.send(float_to_bytes.b[0]);
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     364:	5d cf       	rjmp	.-326    	; 0x220 <usiTwiTransmitByte>

00000366 <sendUnsignedInt(unsigned int)>:
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:79
  //Infinity
  while (1) {}
}


void sendUnsignedInt(uint16_t number) {
     366:	cf 93       	push	r28
     368:	c8 2f       	mov	r28, r24
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     36a:	89 2f       	mov	r24, r25
     36c:	59 df       	rcall	.-334    	; 0x220 <usiTwiTransmitByte>
     36e:	8c 2f       	mov	r24, r28
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:82
  TinyWireS.send((byte)((number >> 8) & 0xFF));
  TinyWireS.send((byte)(number & 0xFF));
}
     370:	cf 91       	pop	r28
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     372:	56 cf       	rjmp	.-340    	; 0x220 <usiTwiTransmitByte>

00000374 <requestEvent()>:
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:4
//cellModule -> cellController
// function that executes whenever data is requested by master (this answers requestFrom command)
void requestEvent() {
  switch (cmdByte) {
     374:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <cmdByte>
     378:	ea 50       	subi	r30, 0x0A	; 10
     37a:	ec 30       	cpi	r30, 0x0C	; 12
     37c:	38 f5       	brcc	.+78     	; 0x3cc <requestEvent()+0x58>
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ed 53       	subi	r30, 0x3D	; 61
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	09 94       	ijmp
     386:	0b c0       	rjmp	.+22     	; 0x39e <requestEvent()+0x2a>
     388:	4f c0       	rjmp	.+158    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     38a:	7e c0       	rjmp	.+252    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     38c:	90 c0       	rjmp	.+288    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     38e:	3e c0       	rjmp	.+124    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     390:	42 c0       	rjmp	.+132    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     392:	46 c0       	rjmp	.+140    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     394:	35 c0       	rjmp	.+106    	; 0x400 <__LOCK_REGION_LENGTH__>
     396:	9d c0       	rjmp	.+314    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     398:	81 c0       	rjmp	.+258    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     39a:	92 c0       	rjmp	.+292    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     39c:	a4 c0       	rjmp	.+328    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
/media/D/Data/Powerwall/cellModule/c_comm.ino:6
    case READOUT_voltage:
      ledFlash = true;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <ledFlash>
/media/D/Data/Powerwall/cellModule/c_comm.ino:7
      if (bypassEnabled) {
     3a4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <bypassEnabled>
     3a8:	88 23       	and	r24, r24
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <requestEvent()+0x64>
/media/D/Data/Powerwall/cellModule/c_comm.ino:8
        sendUnsignedInt(voltageMeasurement_bypass);
     3ac:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <voltageMeasurement_bypass>
     3b0:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <voltageMeasurement_bypass+0x1>
     3b4:	d8 df       	rcall	.-80     	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:9
        CRC_tempVolt = uint8_t(voltageMeasurement_bypass&0xFF)+uint8_t((voltageMeasurement_bypass&0xFF00) >> 8);
     3b6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <voltageMeasurement_bypass>
     3ba:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <voltageMeasurement_bypass+0x1>
     3be:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <voltageMeasurement_bypass>
     3c2:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <voltageMeasurement_bypass+0x1>
/media/D/Data/Powerwall/cellModule/c_comm.ino:13
      } else {
        voltageMeasurement = getVoltageMeasurement();
        sendUnsignedInt(voltageMeasurement);
        CRC_tempVolt = uint8_t(voltageMeasurement&0xFF)+uint8_t((voltageMeasurement&0xFF00) >> 8);
     3c6:	83 0f       	add	r24, r19
     3c8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <CRC_tempVolt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:64
      //Dont do anything - timeout
      break;
  }

  //Clear cmdByte
  cmdByte = 0;
     3cc:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:67

  //if this times out, master has stopped communicating with module
  i2cTmr = 80;//150
     3d0:	80 e5       	ldi	r24, 0x50	; 80
     3d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/c_comm.ino:68
}
     3d6:	08 95       	ret
/media/D/Data/Powerwall/cellModule/c_comm.ino:11
      ledFlash = true;
      if (bypassEnabled) {
        sendUnsignedInt(voltageMeasurement_bypass);
        CRC_tempVolt = uint8_t(voltageMeasurement_bypass&0xFF)+uint8_t((voltageMeasurement_bypass&0xFF00) >> 8);
      } else {
        voltageMeasurement = getVoltageMeasurement();
     3d8:	60 df       	rcall	.-320    	; 0x29a <getVoltageMeasurement()>
     3da:	b8 d5       	rcall	.+2928   	; 0xf4c <__fixunssfsi>
     3dc:	70 93 8e 00 	sts	0x008E, r23	; 0x80008e <voltageMeasurement+0x1>
     3e0:	60 93 8d 00 	sts	0x008D, r22	; 0x80008d <voltageMeasurement>
/media/D/Data/Powerwall/cellModule/c_comm.ino:12
        sendUnsignedInt(voltageMeasurement);
     3e4:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <voltageMeasurement>
     3e8:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <voltageMeasurement+0x1>
     3ec:	bc df       	rcall	.-136    	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:13
        CRC_tempVolt = uint8_t(voltageMeasurement&0xFF)+uint8_t((voltageMeasurement&0xFF00) >> 8);
     3ee:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <voltageMeasurement>
     3f2:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <voltageMeasurement+0x1>
     3f6:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <voltageMeasurement>
     3fa:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <voltageMeasurement+0x1>
     3fe:	e3 cf       	rjmp	.-58     	; 0x3c6 <requestEvent()+0x52>
/media/D/Data/Powerwall/cellModule/c_comm.ino:18
      }

      break;
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
     400:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <voltageMeasurement_bypass>
     404:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <voltageMeasurement_bypass+0x1>
/media/D/Data/Powerwall/cellModule/c_comm.ino:22
      break;
      
    case READOUT_raw_voltage:
      sendUnsignedInt(last_raw_adc);
     408:	ae df       	rcall	.-164    	; 0x366 <sendUnsignedInt(unsigned int)>
     40a:	e0 cf       	rjmp	.-64     	; 0x3cc <requestEvent()+0x58>
     40c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <last_raw_adc>
     410:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <last_raw_adc+0x1>
     414:	f9 cf       	rjmp	.-14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
/media/D/Data/Powerwall/cellModule/c_comm.ino:26
      break;

    case READOUT_error_counter:
      sendUnsignedInt(error_counter);
     416:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <error_counter>
     41a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <error_counter+0x1>
     41e:	f4 cf       	rjmp	.-24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
/media/D/Data/Powerwall/cellModule/c_comm.ino:29
      break;
    case READOUT_bypass_state:
      sendByte(bypassEnabled);
     420:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <bypassEnabled>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
     424:	fd de       	rcall	.-518    	; 0x220 <usiTwiTransmitByte>
     426:	d2 cf       	rjmp	.-92     	; 0x3cc <requestEvent()+0x58>
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:33
      break;

    case READOUT_temperature:
      actualTemperature = (uint16_t)((float)tempSensorValue * currentConfig.tempSensorCalibration + currentConfig.tempSensorCalibration2);
     428:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <tempSensorValue>
     42c:	70 91 b3 00 	lds	r23, 0x00B3	; 0x8000b3 <tempSensorValue+0x1>
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	b7 d5       	rcall	.+2926   	; 0xfa4 <__floatunsisf>
     436:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <currentConfig+0x9>
     43a:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <currentConfig+0xa>
     43e:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <currentConfig+0xb>
     442:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <currentConfig+0xc>
     446:	60 d6       	rcall	.+3264   	; 0x1108 <__mulsf3>
     448:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <currentConfig+0xd>
     44c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentConfig+0xe>
     450:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentConfig+0xf>
     454:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentConfig+0x10>
     458:	11 d5       	rcall	.+2594   	; 0xe7c <__addsf3>
     45a:	78 d5       	rcall	.+2800   	; 0xf4c <__fixunssfsi>
     45c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <actualTemperature+0x1>
     460:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <actualTemperature>
/media/D/Data/Powerwall/cellModule/c_comm.ino:34
      sendUnsignedInt(actualTemperature);
     464:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <actualTemperature>
     468:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <actualTemperature+0x1>
     46c:	7c df       	rcall	.-264    	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:35
      CRC_tempVolt += uint8_t(actualTemperature&0xFF)+uint8_t((actualTemperature&0xFF00) >> 8);
     46e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <actualTemperature>
     472:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <actualTemperature+0x1>
     476:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <actualTemperature>
     47a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <actualTemperature+0x1>
     47e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <CRC_tempVolt>
     482:	89 0f       	add	r24, r25
     484:	82 0f       	add	r24, r18
     486:	a0 cf       	rjmp	.-192    	; 0x3c8 <requestEvent()+0x54>
/media/D/Data/Powerwall/cellModule/c_comm.ino:39
      break;

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
     488:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <currentConfig+0x1>
     48c:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <currentConfig+0x2>
     490:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <currentConfig+0x3>
     494:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:48
      break;
    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
      break;
    case READOUT_temperature_calibration2:
      sendFloat(currentConfig.tempSensorCalibration2);
     498:	4a df       	rcall	.-364    	; 0x32e <sendFloat(float)>
     49a:	98 cf       	rjmp	.-208    	; 0x3cc <requestEvent()+0x58>
/media/D/Data/Powerwall/cellModule/c_comm.ino:42

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
      break;
    case READOUT_voltage_calibration2:
      sendFloat(currentConfig.voltageCalibration2);
     49c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentConfig+0x5>
     4a0:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <currentConfig+0x6>
     4a4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <currentConfig+0x7>
     4a8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <currentConfig+0x8>
     4ac:	f5 cf       	rjmp	.-22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
/media/D/Data/Powerwall/cellModule/c_comm.ino:45
      break;
    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
     4ae:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <currentConfig+0x9>
     4b2:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <currentConfig+0xa>
     4b6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <currentConfig+0xb>
     4ba:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <currentConfig+0xc>
     4be:	ec cf       	rjmp	.-40     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
/media/D/Data/Powerwall/cellModule/c_comm.ino:48
      break;
    case READOUT_temperature_calibration2:
      sendFloat(currentConfig.tempSensorCalibration2);
     4c0:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <currentConfig+0xd>
     4c4:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <currentConfig+0xe>
     4c8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <currentConfig+0xf>
     4cc:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <currentConfig+0x10>
     4d0:	e3 cf       	rjmp	.-58     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
/media/D/Data/Powerwall/cellModule/c_comm.ino:51
      break;
    case READOUT_burningCounter:
      sendUnsignedInt(iBurningCounter);
     4d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <iBurningCounter>
     4d6:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <iBurningCounter+0x1>
     4da:	45 df       	rcall	.-374    	; 0x366 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:52
      iBurningCounter = 0;//resest after it is read
     4dc:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <iBurningCounter+0x1>
     4e0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <iBurningCounter>
     4e4:	73 cf       	rjmp	.-282    	; 0x3cc <requestEvent()+0x58>
/media/D/Data/Powerwall/cellModule/c_comm.ino:55
      break;
    case READOUT_CRC:
      sendByte(CRC_tempVolt);
     4e6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <CRC_tempVolt>
     4ea:	9c cf       	rjmp	.-200    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

000004ec <ledOFF()>:
_Z6ledOFFv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:8
  DDRB |= (1 << DDB1);
  PORTB |=  (1 << PB1);
}

inline void ledOFF() {
  DDRB |= (1 << DDB1);
     4ec:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:9
  PORTB &= ~(1 << PB1);
     4ee:	c1 98       	cbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:10
}
     4f0:	08 95       	ret

000004f2 <ledON()>:
_Z5ledONv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:3

inline void ledON() {
  DDRB |= (1 << DDB1);
     4f2:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:4
  PORTB |=  (1 << PB1);
     4f4:	c1 9a       	sbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:5
}
     4f6:	08 95       	ret

000004f8 <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
     504:	f6 2e       	mov	r15, r22
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     506:	08 81       	ld	r16, Y
     508:	19 81       	ldd	r17, Y+1	; 0x01
     50a:	c8 01       	movw	r24, r16
     50c:	a0 d4       	rcall	.+2368   	; 0xe4e <eeprom_read_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     50e:	f8 16       	cp	r15, r24
     510:	19 f0       	breq	.+6      	; 0x518 <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     512:	6f 2d       	mov	r22, r15
     514:	c8 01       	movw	r24, r16
     516:	a3 d4       	rcall	.+2374   	; 0xe5e <eeprom_write_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     518:	ce 01       	movw	r24, r28
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	08 95       	ret

00000526 <WriteConfigToEEPROM()>:
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:31
    }
  }
  return crc;
}

void WriteConfigToEEPROM() {
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 d0       	rcall	.+0      	; 0x534 <WriteConfigToEEPROM()+0xe>
     534:	00 d0       	rcall	.+0      	; 0x536 <WriteConfigToEEPROM()+0x10>
     536:	00 d0       	rcall	.+0      	; 0x538 <WriteConfigToEEPROM()+0x12>
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	82 e6       	ldi	r24, 0x62	; 98
     53e:	e8 2e       	mov	r14, r24
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	f8 2e       	mov	r15, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     544:	04 e1       	ldi	r16, 0x14	; 20
     546:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     548:	1a 83       	std	Y+2, r17	; 0x02
     54a:	09 83       	std	Y+1, r16	; 0x01
     54c:	f7 01       	movw	r30, r14
     54e:	61 91       	ld	r22, Z+
     550:	7f 01       	movw	r14, r30
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	d0 df       	rcall	.-96     	; 0x4f8 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     558:	0f 5f       	subi	r16, 0xFF	; 255
     55a:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     55c:	05 32       	cpi	r16, 0x25	; 37
     55e:	11 05       	cpc	r17, r1
     560:	99 f7       	brne	.-26     	; 0x548 <WriteConfigToEEPROM()+0x22>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:33
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
     562:	82 e6       	ldi	r24, 0x62	; 98
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	86 dd       	rcall	.-1268   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
     568:	69 83       	std	Y+1, r22	; 0x01
     56a:	7a 83       	std	Y+2, r23	; 0x02
     56c:	8b 83       	std	Y+3, r24	; 0x03
     56e:	9c 83       	std	Y+4, r25	; 0x04
     570:	8e 01       	movw	r16, r28
     572:	0f 5f       	subi	r16, 0xFF	; 255
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	f1 2c       	mov	r15, r1
     578:	e1 2c       	mov	r14, r1
_ZN11EEPROMClass3putImEERKT_iS3_.isra.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     57a:	fe 82       	std	Y+6, r15	; 0x06
     57c:	ed 82       	std	Y+5, r14	; 0x05
     57e:	f8 01       	movw	r30, r16
     580:	61 91       	ld	r22, Z+
     582:	8f 01       	movw	r16, r30
     584:	ce 01       	movw	r24, r28
     586:	05 96       	adiw	r24, 0x05	; 5
     588:	b7 df       	rcall	.-146    	; 0x4f8 <EERef::update(unsigned char)>
     58a:	ff ef       	ldi	r31, 0xFF	; 255
     58c:	ef 1a       	sub	r14, r31
     58e:	ff 0a       	sbc	r15, r31
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	e8 16       	cp	r14, r24
     594:	f1 04       	cpc	r15, r1
     596:	89 f7       	brne	.-30     	; 0x57a <WriteConfigToEEPROM()+0x54>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:34
}
     598:	26 96       	adiw	r28, 0x06	; 6
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <receiveEvent(unsigned char)>:
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:78
 * The I2C data received handler
 *
 * This needs to complete before the next incoming transaction (start, data, restart/stop) on the bus does
 * so be quick, set flags for long running tasks to be called from the mainloop instead of running them directly
 */
void receiveEvent(uint8_t bytesCnt) {
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <receiveEvent(unsigned char)+0x10>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
/media/D/Data/Powerwall/cellModule/c_comm.ino:79
  if (bytesCnt <= 0) return;
     5c6:	88 23       	and	r24, r24
     5c8:	09 f4       	brne	.+2      	; 0x5cc <receiveEvent(unsigned char)+0x1a>
     5ca:	38 c0       	rjmp	.+112    	; 0x63c <receiveEvent(unsigned char)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:83

  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;
     5cc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <cmdByte>
     5d0:	99 23       	and	r25, r25
     5d2:	51 f0       	breq	.+20     	; 0x5e8 <receiveEvent(unsigned char)+0x36>
     5d4:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <error_counter>
     5d8:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <error_counter+0x1>
     5dc:	2f 5f       	subi	r18, 0xFF	; 255
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <error_counter+0x1>
     5e4:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <error_counter>
     5e8:	18 2f       	mov	r17, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
     5ea:	04 de       	rcall	.-1016   	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:85

  cmdByte = TinyWireS.receive();
     5ec:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:89
  bytesCnt--;

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {
     5f0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <cmdByte>
     5f4:	86 ff       	sbrs	r24, 6
     5f6:	22 c0       	rjmp	.+68     	; 0x63c <receiveEvent(unsigned char)+0x8a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:86
  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;

  cmdByte = TinyWireS.receive();
  bytesCnt--;
     5f8:	11 50       	subi	r17, 0x01	; 1
/media/D/Data/Powerwall/cellModule/c_comm.ino:91

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {

    bitClear(cmdByte, COMMAND_BIT);
     5fa:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <cmdByte>
     5fe:	9f 7b       	andi	r25, 0xBF	; 191
     600:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:93
    
    switch (cmdByte) {
     604:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <cmdByte>
     608:	e1 50       	subi	r30, 0x01	; 1
     60a:	ec 30       	cpi	r30, 0x0C	; 12
     60c:	a8 f4       	brcc	.+42     	; 0x638 <receiveEvent(unsigned char)+0x86>
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	e5 5f       	subi	r30, 0xF5	; 245
     612:	fc 4f       	sbci	r31, 0xFC	; 252
     614:	09 94       	ijmp
     616:	0b c0       	rjmp	.+22     	; 0x62e <receiveEvent(unsigned char)+0x7c>
     618:	0f c0       	rjmp	.+30     	; 0x638 <receiveEvent(unsigned char)+0x86>
     61a:	1a c0       	rjmp	.+52     	; 0x650 <receiveEvent(unsigned char)+0x9e>
     61c:	cd c0       	rjmp	.+410    	; 0x7b8 <receiveEvent(unsigned char)+0x206>
     61e:	c9 c0       	rjmp	.+402    	; 0x7b2 <receiveEvent(unsigned char)+0x200>
     620:	26 c0       	rjmp	.+76     	; 0x66e <receiveEvent(unsigned char)+0xbc>
     622:	59 c0       	rjmp	.+178    	; 0x6d6 <receiveEvent(unsigned char)+0x124>
     624:	8e c0       	rjmp	.+284    	; 0x742 <receiveEvent(unsigned char)+0x190>
     626:	08 c0       	rjmp	.+16     	; 0x638 <receiveEvent(unsigned char)+0x86>
     628:	3c c0       	rjmp	.+120    	; 0x6a2 <receiveEvent(unsigned char)+0xf0>
     62a:	70 c0       	rjmp	.+224    	; 0x70c <receiveEvent(unsigned char)+0x15a>
     62c:	d7 c0       	rjmp	.+430    	; 0x7dc <receiveEvent(unsigned char)+0x22a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:95
      case COMMAND_green_led_pattern:
        if (bytesCnt == 1) {
     62e:	11 30       	cpi	r17, 0x01	; 1
     630:	19 f4       	brne	.+6      	; 0x638 <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     632:	e0 dd       	rcall	.-1088   	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:96
          green_pattern = TinyWireS.receive();
     634:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:187
        disable_i2c();
        init_i2c();
       break;
    }

    cmdByte = 0;
     638:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:200
        ledFlash = true;
        break;
    }*/
  }

}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
     650:	1a 82       	std	Y+2, r1	; 0x02
     652:	19 82       	std	Y+1, r1	; 0x01
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	4e df       	rcall	.-356    	; 0x4f8 <EERef::update(unsigned char)>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	ce 01       	movw	r24, r28
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	46 df       	rcall	.-372    	; 0x4f8 <EERef::update(unsigned char)>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:177
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
            currentConfig.SLAVE_ADDR = newAddress;
            WriteConfigToEEPROM();
            Reboot();
     66c:	ca d2       	rcall	.+1428   	; 0xc02 <Reboot()>
/media/D/Data/Powerwall/cellModule/c_comm.ino:110
        factory_default();
        Reboot();
        break;

      case COMMAND_set_voltage_calibration:
        if (bytesCnt == sizeof(float)) {
     66e:	14 30       	cpi	r17, 0x04	; 4
     670:	19 f7       	brne	.-58     	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:111
          float newValue = readFloat();
     672:	4a de       	rcall	.-876    	; 0x308 <readFloat()>
     674:	6b 01       	movw	r12, r22
     676:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:113
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration) {
     678:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
     67c:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
     680:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
     684:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
     688:	5d d4       	rcall	.+2234   	; 0xf44 <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	a9 f2       	breq	.-86     	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:114
            currentConfig.voltageCalibration = newValue;
     68e:	c0 92 63 00 	sts	0x0063, r12	; 0x800063 <currentConfig+0x1>
     692:	d0 92 64 00 	sts	0x0064, r13	; 0x800064 <currentConfig+0x2>
     696:	e0 92 65 00 	sts	0x0065, r14	; 0x800065 <currentConfig+0x3>
     69a:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:146
        if (bytesCnt == sizeof(float)) {
          float newValue = readFloat();
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration2) {
            currentConfig.tempSensorCalibration2 = newValue;
            WriteConfigToEEPROM();
     69e:	43 df       	rcall	.-378    	; 0x526 <WriteConfigToEEPROM()>
     6a0:	cb cf       	rjmp	.-106    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:120
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_voltage_calibration2:
        if (bytesCnt == sizeof(float)) {
     6a2:	14 30       	cpi	r17, 0x04	; 4
     6a4:	49 f6       	brne	.-110    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:121
          float newValue = readFloat();
     6a6:	30 de       	rcall	.-928    	; 0x308 <readFloat()>
     6a8:	6b 01       	movw	r12, r22
     6aa:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:123
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration2) {
     6ac:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
     6b0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
     6b4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
     6b8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
     6bc:	43 d4       	rcall	.+2182   	; 0xf44 <__cmpsf2>
     6be:	88 23       	and	r24, r24
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <receiveEvent(unsigned char)+0x112>
     6c2:	ba cf       	rjmp	.-140    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:124
            currentConfig.voltageCalibration2 = newValue;
     6c4:	c0 92 67 00 	sts	0x0067, r12	; 0x800067 <currentConfig+0x5>
     6c8:	d0 92 68 00 	sts	0x0068, r13	; 0x800068 <currentConfig+0x6>
     6cc:	e0 92 69 00 	sts	0x0069, r14	; 0x800069 <currentConfig+0x7>
     6d0:	f0 92 6a 00 	sts	0x006A, r15	; 0x80006a <currentConfig+0x8>
     6d4:	e4 cf       	rjmp	.-56     	; 0x69e <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:131
          }
        }
        break;

      case COMMAND_set_temperature_calibration:
        if (bytesCnt == sizeof(float)) {
     6d6:	14 30       	cpi	r17, 0x04	; 4
     6d8:	09 f0       	breq	.+2      	; 0x6dc <receiveEvent(unsigned char)+0x12a>
     6da:	ae cf       	rjmp	.-164    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:132
          float newValue = readFloat();
     6dc:	15 de       	rcall	.-982    	; 0x308 <readFloat()>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:134
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
     6e2:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <currentConfig+0x9>
     6e6:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <currentConfig+0xa>
     6ea:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <currentConfig+0xb>
     6ee:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <currentConfig+0xc>
     6f2:	28 d4       	rcall	.+2128   	; 0xf44 <__cmpsf2>
     6f4:	88 23       	and	r24, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <receiveEvent(unsigned char)+0x148>
     6f8:	9f cf       	rjmp	.-194    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:135
            currentConfig.tempSensorCalibration = newValue;
     6fa:	c0 92 6b 00 	sts	0x006B, r12	; 0x80006b <currentConfig+0x9>
     6fe:	d0 92 6c 00 	sts	0x006C, r13	; 0x80006c <currentConfig+0xa>
     702:	e0 92 6d 00 	sts	0x006D, r14	; 0x80006d <currentConfig+0xb>
     706:	f0 92 6e 00 	sts	0x006E, r15	; 0x80006e <currentConfig+0xc>
     70a:	c9 cf       	rjmp	.-110    	; 0x69e <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:141
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_temperature_calibration2:
        if (bytesCnt == sizeof(float)) {
     70c:	14 30       	cpi	r17, 0x04	; 4
     70e:	09 f0       	breq	.+2      	; 0x712 <receiveEvent(unsigned char)+0x160>
     710:	93 cf       	rjmp	.-218    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:142
          float newValue = readFloat();
     712:	fa dd       	rcall	.-1036   	; 0x308 <readFloat()>
     714:	6b 01       	movw	r12, r22
     716:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:144
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration2) {
     718:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <currentConfig+0xd>
     71c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <currentConfig+0xe>
     720:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <currentConfig+0xf>
     724:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <currentConfig+0x10>
     728:	0d d4       	rcall	.+2074   	; 0xf44 <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	09 f4       	brne	.+2      	; 0x730 <receiveEvent(unsigned char)+0x17e>
     72e:	84 cf       	rjmp	.-248    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:145
            currentConfig.tempSensorCalibration2 = newValue;
     730:	c0 92 6f 00 	sts	0x006F, r12	; 0x80006f <currentConfig+0xd>
     734:	d0 92 70 00 	sts	0x0070, r13	; 0x800070 <currentConfig+0xe>
     738:	e0 92 71 00 	sts	0x0071, r14	; 0x800071 <currentConfig+0xf>
     73c:	f0 92 72 00 	sts	0x0072, r15	; 0x800072 <currentConfig+0x10>
     740:	ae cf       	rjmp	.-164    	; 0x69e <receiveEvent(unsigned char)+0xec>
/media/D/Data/Powerwall/cellModule/c_comm.ino:151
            WriteConfigToEEPROM();
          }
        }
        break;
      case COMMAND_set_bypass_voltage:
        if (bytesCnt == sizeof(uint16_t)) {
     742:	12 30       	cpi	r17, 0x02	; 2
     744:	09 f0       	breq	.+2      	; 0x748 <receiveEvent(unsigned char)+0x196>
     746:	78 cf       	rjmp	.-272    	; 0x638 <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     748:	55 dd       	rcall	.-1366   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:106
  float_to_bytes.b[3] = TinyWireS.receive();

  return float_to_bytes.val;
}
uint16_t readUINT16() {
  uint16_t_to_bytes.b[0] = TinyWireS.receive();
     74a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <uint16_t_to_bytes>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     74e:	52 dd       	rcall	.-1372   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:107
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
     750:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <uint16_t_to_bytes+0x1>
/media/D/Data/Powerwall/cellModule/b_functions.ino:108
  return uint16_t_to_bytes.val;
     754:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <uint16_t_to_bytes>
     758:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <uint16_t_to_bytes+0x1>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:154
          uint16_t newValue = readUINT16();
          //Only accept if its a realistic value and the value is LESS than the last voltage reading
          if (newValue >= MIN_BYPASS_VOLTAGE && newValue <= MAX_BYPASS_VOLTAGE && newValue < voltageMeasurement) {
     75c:	9c 01       	movw	r18, r24
     75e:	2c 52       	subi	r18, 0x2C	; 44
     760:	31 40       	sbci	r19, 0x01	; 1
     762:	29 37       	cpi	r18, 0x79	; 121
     764:	31 05       	cpc	r19, r1
     766:	e8 f4       	brcc	.+58     	; 0x7a2 <receiveEvent(unsigned char)+0x1f0>
     768:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <voltageMeasurement>
     76c:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <voltageMeasurement+0x1>
     770:	82 17       	cp	r24, r18
     772:	93 07       	cpc	r25, r19
     774:	b0 f4       	brcc	.+44     	; 0x7a2 <receiveEvent(unsigned char)+0x1f0>
/media/D/Data/Powerwall/cellModule/c_comm.ino:155
            targetBypassVoltage = newValue;
     776:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <targetBypassVoltage+0x1>
     77a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/c_comm.ino:156
            voltageMeasurement_bypass = voltageMeasurement;//init bypass voltage
     77e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <voltageMeasurement>
     782:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <voltageMeasurement+0x1>
     786:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <voltageMeasurement_bypass+0x1>
     78a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/c_comm.ino:157
            bypassCnt = BYPASS_COUNTER_MAX;
     78e:	80 ef       	ldi	r24, 0xF0	; 240
     790:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <bypassCnt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:158
            green_pattern = GREEN_LED_PATTERN_BYPASS;
     794:	8c e6       	ldi	r24, 0x6C	; 108
     796:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:159
            bypassEnabled = true;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <bypassEnabled>
     7a0:	4b cf       	rjmp	.-362    	; 0x638 <receiveEvent(unsigned char)+0x86>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
}

void bypass_off() {
  targetBypassVoltage = 0;
     7a2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <targetBypassVoltage+0x1>
     7a6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     7aa:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     7ae:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <bypassEnabled>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:163
          } else {
            //Disable
            bypass_off();
            green_pattern = GREEN_LED_PATTERN_STANDARD;
     7b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     7b6:	40 cf       	rjmp	.-384    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:171
        break;


      case COMMAND_set_slave_address:
        //Set i2c slave address and write to EEPROM, then reboot
        if (bytesCnt == 1 ) {
     7b8:	11 30       	cpi	r17, 0x01	; 1
     7ba:	09 f0       	breq	.+2      	; 0x7be <receiveEvent(unsigned char)+0x20c>
     7bc:	3d cf       	rjmp	.-390    	; 0x638 <receiveEvent(unsigned char)+0x86>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
     7be:	1a dd       	rcall	.-1484   	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:174
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
     7c0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <currentConfig>
     7c4:	98 17       	cp	r25, r24
     7c6:	09 f4       	brne	.+2      	; 0x7ca <receiveEvent(unsigned char)+0x218>
     7c8:	37 cf       	rjmp	.-402    	; 0x638 <receiveEvent(unsigned char)+0x86>
     7ca:	98 ee       	ldi	r25, 0xE8	; 232
     7cc:	98 0f       	add	r25, r24
     7ce:	9d 30       	cpi	r25, 0x0D	; 13
     7d0:	08 f0       	brcs	.+2      	; 0x7d4 <receiveEvent(unsigned char)+0x222>
     7d2:	32 cf       	rjmp	.-412    	; 0x638 <receiveEvent(unsigned char)+0x86>
/media/D/Data/Powerwall/cellModule/c_comm.ino:175
            currentConfig.SLAVE_ADDR = newAddress;
     7d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/c_comm.ino:176
            WriteConfigToEEPROM();
     7d8:	a6 de       	rcall	.-692    	; 0x526 <WriteConfigToEEPROM()>
     7da:	48 cf       	rjmp	.-368    	; 0x66c <receiveEvent(unsigned char)+0xba>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17

void disable_i2c(){
  USICR = 0; //control register
     7dc:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
     7de:	1e b8       	out	0x0e, r1	; 14
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:183
          }
        }
        break;
      case COMMAND_resetI2c://controller requests this module to reset i2c
        disable_i2c();
        init_i2c();
     7e0:	35 dd       	rcall	.-1430   	; 0x24c <init_i2c()>
     7e2:	2a cf       	rjmp	.-428    	; 0x638 <receiveEvent(unsigned char)+0x86>

000007e4 <__vector_5>:
__vector_5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     7fa:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis_timer_millis>
     7fe:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis_timer_millis+0x1>
     802:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis_timer_millis+0x2>
     806:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
     80a:	30 91 e6 00 	lds	r19, 0x00E6	; 0x8000e6 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:145

    f += FRACT_INC;
     80e:	26 e0       	ldi	r18, 0x06	; 6
     810:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:147

    if (f >= FRACT_MAX)
     812:	2d 37       	cpi	r18, 0x7D	; 125
     814:	68 f1       	brcs	.+90     	; 0x870 <__vector_5+0x8c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:149
    {
      f -= FRACT_MAX;
     816:	29 e8       	ldi	r18, 0x89	; 137
     818:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
     81a:	03 96       	adiw	r24, 0x03	; 3
     81c:	a1 1d       	adc	r26, r1
     81e:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     820:	20 93 e6 00 	sts	0x00E6, r18	; 0x8000e6 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:159
    millis_timer_millis = m;
     824:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <millis_timer_millis>
     828:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <millis_timer_millis+0x1>
     82c:	a0 93 e9 00 	sts	0x00E9, r26	; 0x8000e9 <millis_timer_millis+0x2>
     830:	b0 93 ea 00 	sts	0x00EA, r27	; 0x8000ea <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:160
    millis_timer_overflow_count++;
     834:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <millis_timer_overflow_count>
     838:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <millis_timer_overflow_count+0x1>
     83c:	a0 91 ed 00 	lds	r26, 0x00ED	; 0x8000ed <millis_timer_overflow_count+0x2>
     840:	b0 91 ee 00 	lds	r27, 0x00EE	; 0x8000ee <millis_timer_overflow_count+0x3>
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
     84a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <millis_timer_overflow_count>
     84e:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <millis_timer_overflow_count+0x1>
     852:	a0 93 ed 00 	sts	0x00ED, r26	; 0x8000ed <millis_timer_overflow_count+0x2>
     856:	b0 93 ee 00 	sts	0x00EE, r27	; 0x8000ee <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:162

  }
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	3f 91       	pop	r19
     864:	2f 91       	pop	r18
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
     870:	02 96       	adiw	r24, 0x02	; 2
     872:	a1 1d       	adc	r26, r1
     874:	b1 1d       	adc	r27, r1
     876:	d4 cf       	rjmp	.-88     	; 0x820 <__vector_5+0x3c>

00000878 <__vector_14>:
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:564
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566

  switch ( overflowState )
     89a:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <overflowState>
     89e:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <overflowState+0x1>
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	91 05       	cpc	r25, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <__vector_14+0x32>
     8a8:	8b c0       	rjmp	.+278    	; 0x9c0 <__vector_14+0x148>
     8aa:	b0 f4       	brcc	.+44     	; 0x8d8 <__vector_14+0x60>
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a9 f1       	breq	.+106    	; 0x91a <__vector_14+0xa2>
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__vector_14+0x3e>
     8b4:	60 c0       	rjmp	.+192    	; 0x976 <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:659
      SET_USI_TO_SEND_ACK( );
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	91 05       	cpc	r25, r1
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <__vector_14+0x68>
     8de:	7a c0       	rjmp	.+244    	; 0x9d4 <__vector_14+0x15c>
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <__vector_14+0x6c>
     8e2:	43 c0       	rjmp	.+134    	; 0x96a <__vector_14+0xf2>
     8e4:	05 97       	sbiw	r24, 0x05	; 5
     8e6:	39 f7       	brne	.-50     	; 0x8b6 <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:643
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // check buffer size
      if ( rxCount < TWI_RX_BUFFER_SIZE )
     8e8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rxCount>
     8ec:	80 31       	cpi	r24, 0x10	; 16
     8ee:	90 f4       	brcc	.+36     	; 0x914 <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:645
      {
        rxBuf[ rxHead ] = USIDR;
     8f0:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <rxHead>
     8f4:	8f b1       	in	r24, 0x0f	; 15
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	e2 54       	subi	r30, 0x42	; 66
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:646
        rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
     8fe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <rxHead>
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:647
        rxCount++;
     90a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rxCount>
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	21 c0       	rjmp	.+66     	; 0x95c <__vector_14+0xe4>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:572
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
     91a:	8f b1       	in	r24, 0x0f	; 15
     91c:	88 23       	and	r24, r24
     91e:	31 f0       	breq	.+12     	; 0x92c <__vector_14+0xb4>
     920:	8f b1       	in	r24, 0x0f	; 15
     922:	86 95       	lsr	r24
     924:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <slaveAddress>
     928:	89 13       	cpse	r24, r25
     92a:	22 c0       	rjmp	.+68     	; 0x970 <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:574
      {
        if ( USIDR & 0x01 )
     92c:	78 9b       	sbis	0x0f, 0	; 15
     92e:	f2 cf       	rjmp	.-28     	; 0x914 <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
        {
          USI_REQUEST_CALLBACK();
     930:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <usi_onReceiverPtr>
     934:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <usi_onReceiverPtr+0x1>
     938:	30 97       	sbiw	r30, 0x00	; 0
     93a:	39 f0       	breq	.+14     	; 0x94a <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     93c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
     940:	88 23       	and	r24, r24
     942:	19 f0       	breq	.+6      	; 0x94a <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     944:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
     948:	09 95       	icall
     94a:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <usi_onRequestPtr>
     94e:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <usi_onRequestPtr+0x1>
     952:	30 97       	sbiw	r30, 0x00	; 0
     954:	09 f0       	breq	.+2      	; 0x958 <__vector_14+0xe0>
     956:	09 95       	icall
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:577
          overflowState = USI_SLAVE_SEND_DATA;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
     95c:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <overflowState+0x1>
     960:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
      SET_USI_TO_SEND_ACK( );
     964:	1f b8       	out	0x0f, r1	; 15
     966:	b8 9a       	sbi	0x17, 0	; 23
     968:	33 c0       	rjmp	.+102    	; 0x9d0 <__vector_14+0x158>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:594
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
     96a:	8f b1       	in	r24, 0x0f	; 15
     96c:	88 23       	and	r24, r24
     96e:	19 f0       	breq	.+6      	; 0x976 <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:617
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
     970:	88 ea       	ldi	r24, 0xA8	; 168
     972:	8d b9       	out	0x0d, r24	; 13
     974:	1d c0       	rjmp	.+58     	; 0x9b0 <__vector_14+0x138>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:607

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txCount )
     976:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <txCount>
     97a:	88 23       	and	r24, r24
     97c:	e1 f0       	breq	.+56     	; 0x9b6 <__vector_14+0x13e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:609
      {
        USIDR = txBuf[ txTail ];
     97e:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <txTail>
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	e1 53       	subi	r30, 0x31	; 49
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	80 81       	ld	r24, Z
     98a:	8f b9       	out	0x0f, r24	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:610
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
     98c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <txTail>
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	8f 70       	andi	r24, 0x0F	; 15
     994:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:611
        txCount--;
     998:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <txCount>
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:620
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <overflowState+0x1>
     9aa:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:621
      SET_USI_TO_SEND_DATA( );
     9ae:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
      SET_USI_TO_READ_DATA( );
     9b0:	80 e7       	ldi	r24, 0x70	; 112
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
     9b2:	8e b9       	out	0x0e, r24	; 14
     9b4:	80 cf       	rjmp	.-256    	; 0x8b6 <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:616
        txCount--;
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
     9b6:	b8 98       	cbi	0x17, 0	; 23
     9b8:	1f b8       	out	0x0f, r1	; 15
     9ba:	8e e7       	ldi	r24, 0x7E	; 126
     9bc:	8e b9       	out	0x0e, r24	; 14
     9be:	d8 cf       	rjmp	.-80     	; 0x970 <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:627
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <overflowState+0x1>
     9c8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:628
      SET_USI_TO_READ_ACK( );
     9cc:	b8 98       	cbi	0x17, 0	; 23
     9ce:	1f b8       	out	0x0f, r1	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
     9d0:	8e e7       	ldi	r24, 0x7E	; 126
     9d2:	ef cf       	rjmp	.-34     	; 0x9b2 <__vector_14+0x13a>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:634
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     9d4:	85 e0       	ldi	r24, 0x05	; 5
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <overflowState+0x1>
     9dc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635
      SET_USI_TO_READ_DATA( );
     9e0:	b8 98       	cbi	0x17, 0	; 23
     9e2:	e6 cf       	rjmp	.-52     	; 0x9b0 <__vector_14+0x138>

000009e4 <__vector_13>:
__vector_13():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:472
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	8f 93       	push	r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:484
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
     9f0:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <overflowState+0x1>
     9f4:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:487

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
     9f8:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:494
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
     9fa:	b2 9b       	sbis	0x16, 2	; 22
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <__vector_13+0x1e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:496
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
     9fe:	b0 9b       	sbis	0x16, 0	; 22
     a00:	fc cf       	rjmp	.-8      	; 0x9fa <__vector_13+0x16>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:502
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
     a02:	b0 99       	sbic	0x16, 0	; 22
     a04:	0a c0       	rjmp	.+20     	; 0xa1a <__vector_13+0x36>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:507
  {

    // a Stop Condition did not occur

    USICR =
     a06:	88 ef       	ldi	r24, 0xF8	; 248
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
     a08:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:540
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
     a0a:	80 ef       	ldi	r24, 0xF0	; 240
     a0c:	8e b9       	out	0x0e, r24	; 14
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:549
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
     a0e:	8f 91       	pop	r24
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
     a1a:	88 ea       	ldi	r24, 0xA8	; 168
     a1c:	f5 cf       	rjmp	.-22     	; 0xa08 <__vector_13+0x24>

00000a1e <__vector_3>:
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:42
  }
}


ISR(TIMER1_COMPA_vect) // timer interrupt
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/z_main.ino:44

  if (i2cTmr > 0) {
     a40:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     a44:	88 23       	and	r24, r24
     a46:	29 f0       	breq	.+10     	; 0xa52 <__vector_3+0x34>
/media/D/Data/Powerwall/cellModule/z_main.ino:46
    //Count down loop for requests to see if i2c bus hangs or controller stops talking
    i2cTmr--;
     a48:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     a4c:	81 50       	subi	r24, 0x01	; 1
     a4e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/z_main.ino:50
  }
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
     a52:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a56:	81 11       	cpse	r24, r1
     a58:	68 c0       	rjmp	.+208    	; 0xb2a <__vector_3+0x10c>
/media/D/Data/Powerwall/cellModule/z_main.ino:51
    if (ledFlash)  {
     a5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <ledFlash>
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <__vector_3+0x46>
     a62:	61 c0       	rjmp	.+194    	; 0xb26 <__vector_3+0x108>
/media/D/Data/Powerwall/cellModule/z_main.ino:52
      ledON();
     a64:	46 dd       	rcall	.-1396   	; 0x4f2 <ledON()>
/media/D/Data/Powerwall/cellModule/z_main.ino:54
    }else ledOFF();
    ledFlash = false;
     a66:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <ledFlash>
/media/D/Data/Powerwall/cellModule/z_main.ino:66
      ledOFF();
    }
  }
  ///////////////////////////////////////////////////
  
  if (bypassEnabled) {// burning energy in resistor
     a6a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <bypassEnabled>
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <__vector_3+0x56>
     a72:	72 c0       	rjmp	.+228    	; 0xb58 <__vector_3+0x13a>
/media/D/Data/Powerwall/cellModule/z_main.ino:67
    if(iBurningCounter<65535)iBurningCounter++;//counting burned Wh, reset by reading
     a74:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <iBurningCounter>
     a78:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <iBurningCounter+0x1>
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	49 f0       	breq	.+18     	; 0xa92 <__vector_3+0x74>
     a80:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <iBurningCounter>
     a84:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <iBurningCounter+0x1>
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <iBurningCounter+0x1>
     a8e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <iBurningCounter>
/media/D/Data/Powerwall/cellModule/z_main.ino:69
    
    if (bypassCnt == 0 && voltageBufferReady) {
     a92:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <bypassCnt>
     a96:	81 11       	cpse	r24, r1
     a98:	20 c0       	rjmp	.+64     	; 0xada <__vector_3+0xbc>
     a9a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <voltageBufferReady>
     a9e:	88 23       	and	r24, r24
     aa0:	e1 f0       	breq	.+56     	; 0xada <__vector_3+0xbc>
/media/D/Data/Powerwall/cellModule/z_main.ino:71
      //We are in bypass and just filled in whole buffer with voltage measurements
      voltageMeasurement_bypass = getVoltageMeasurement();
     aa2:	fb db       	rcall	.-2058   	; 0x29a <getVoltageMeasurement()>
     aa4:	53 d2       	rcall	.+1190   	; 0xf4c <__fixunssfsi>
     aa6:	70 93 b7 00 	sts	0x00B7, r23	; 0x8000b7 <voltageMeasurement_bypass+0x1>
     aaa:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/z_main.ino:73

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
     aae:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <targetBypassVoltage>
     ab2:	30 91 f5 00 	lds	r19, 0x00F5	; 0x8000f5 <targetBypassVoltage+0x1>
     ab6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <voltageMeasurement_bypass>
     aba:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <voltageMeasurement_bypass+0x1>
     abe:	28 17       	cp	r18, r24
     ac0:	39 07       	cpc	r19, r25
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <__vector_3+0xa8>
     ac4:	45 c0       	rjmp	.+138    	; 0xb50 <__vector_3+0x132>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     ac6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <targetBypassVoltage+0x1>
     aca:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     ace:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     ad2:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <bypassEnabled>
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:75
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
     ad6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:81
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
      }
    }

    if (bypassCnt > 0)
     ada:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <bypassCnt>
     ade:	88 23       	and	r24, r24
     ae0:	81 f0       	breq	.+32     	; 0xb02 <__vector_3+0xe4>
/media/D/Data/Powerwall/cellModule/z_main.ino:84
    {
      //We are in ACTIVE BYPASS mode -> BURNING ENERGY in resistor
      bypassCnt--;
     ae2:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <bypassCnt>
     ae6:	81 50       	subi	r24, 0x01	; 1
     ae8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <bypassCnt>
/media/D/Data/Powerwall/cellModule/z_main.ino:85
      digitalWrite(PB4, HIGH);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	22 db       	rcall	.-2492   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:87

      if (bypassCnt == 0)
     af0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <bypassCnt>
     af4:	81 11       	cpse	r24, r1
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <__vector_3+0xe4>
/media/D/Data/Powerwall/cellModule/z_main.ino:91
      {
        //We have just finished this timed ACTIVE BYPASS mode, disable resistor
        //and measure resting voltage now before possible re-enable.
        digitalWrite(PB4, LOW);
     af8:	1d db       	rcall	.-2502   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:94

        //Reset voltage ADC buffer
        voltageBufIdx = 0;//we want whole one cycle
     afa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/z_main.ino:95
        voltageBufferReady = false;
     afe:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/z_main.ino:104
  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
  }

  //trigger ADC reading
  ADCSRA |= (1 << ADSC);
     b02:	36 9a       	sbi	0x06, 6	; 6
/media/D/Data/Powerwall/cellModule/z_main.ino:105
}
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti
/media/D/Data/Powerwall/cellModule/z_main.ino:53
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
    if (ledFlash)  {
      ledON();
    }else ledOFF();
     b26:	e2 dc       	rcall	.-1596   	; 0x4ec <ledOFF()>
     b28:	9e cf       	rjmp	.-196    	; 0xa66 <__vector_3+0x48>
/media/D/Data/Powerwall/cellModule/z_main.ino:56
    ledFlash = false;
  } else {
    green_pattern = (byte)(green_pattern << 1) | (green_pattern >> 7);//rotate pattern left
     b2a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b2e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b32:	99 0f       	add	r25, r25
     b34:	88 1f       	adc	r24, r24
     b36:	88 27       	eor	r24, r24
     b38:	88 1f       	adc	r24, r24
     b3a:	89 2b       	or	r24, r25
     b3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:58

    if (green_pattern & 0x01) {
     b40:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b44:	80 ff       	sbrs	r24, 0
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__vector_3+0x12e>
/media/D/Data/Powerwall/cellModule/z_main.ino:59
      ledON();
     b48:	d4 dc       	rcall	.-1624   	; 0x4f2 <ledON()>
     b4a:	8f cf       	rjmp	.-226    	; 0xa6a <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:61
    } else {
      ledOFF();
     b4c:	cf dc       	rcall	.-1634   	; 0x4ec <ledOFF()>
     b4e:	8d cf       	rjmp	.-230    	; 0xa6a <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:77

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
     b50:	80 ef       	ldi	r24, 0xF0	; 240
     b52:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <bypassCnt>
     b56:	c1 cf       	rjmp	.-126    	; 0xada <__vector_3+0xbc>
/media/D/Data/Powerwall/cellModule/z_main.ino:100
        voltageBufferReady = false;
      }
    }

  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	ec da       	rcall	.-2600   	; 0x134 <digitalWrite.constprop.1>
     b5c:	d2 cf       	rjmp	.-92     	; 0xb02 <__vector_3+0xe4>

00000b5e <__vector_8>:
__vector_8():
/media/D/Data/Powerwall/cellModule/d_adc.ino:16
// changed MUX
// skipping this ADC reading
// temperature = ADC; + changing MUX + next reading will be skipped


ISR(ADC_vect) {
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/d_adc.ino:21
  
  //uint8_t adcl = ADCL;
  //uint16_t value = ADCH << 8 | adcl;

  uint16_t value = ADCW;
     b72:	84 b1       	in	r24, 0x04	; 4
     b74:	95 b1       	in	r25, 0x05	; 5
/media/D/Data/Powerwall/cellModule/d_adc.ino:24

  //If we skip this ADC reading, quit ISR here
  if (skipNextADC) {
     b76:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <skipNextADC>
     b7a:	22 23       	and	r18, r18
     b7c:	61 f0       	breq	.+24     	; 0xb96 <__vector_8+0x38>
/media/D/Data/Powerwall/cellModule/d_adc.ino:25
    skipNextADC = false;
     b7e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <skipNextADC>
/media/D/Data/Powerwall/cellModule/d_adc.ino:71
      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
    }
  }

}
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	2f 91       	pop	r18
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti
/media/D/Data/Powerwall/cellModule/d_adc.ino:29
  if (skipNextADC) {
    skipNextADC = false;
    return;
  }

  if (tempReadingCnt == TEMP_READING_LOOP_FREQ ) {
     b96:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <tempReadingCnt>
     b9a:	20 31       	cpi	r18, 0x10	; 16
     b9c:	61 f4       	brne	.+24     	; 0xbb6 <__vector_8+0x58>
/media/D/Data/Powerwall/cellModule/d_adc.ino:34
    //Use A0 (RESET PIN) to act as an analogue input
    //note that we cannot take the pin below 1.4V or the CPU resets
    //so we use the top half between 1.6V and 2.56V (voltage reference)
    //we avoid switching references (VCC vs 2.56V) so the capacitors dont have to keep draining and recharging
    tempReadingCnt = 0;
     b9e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:37

    //We reduce the value by 512 as we have a DC offset we need to remove
    tempSensorValue = value;
     ba2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <tempSensorValue+0x1>
     ba6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <tempSensorValue>
/media/D/Data/Powerwall/cellModule/d_adc.ino:40

    // use ADC3 for input for next reading (voltage)
    ADMUX = B10010011;
     baa:	83 e9       	ldi	r24, 0x93	; 147
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
    tempReadingCnt++;
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     bac:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/d_adc.ino:67

      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <skipNextADC>
     bb4:	e6 cf       	rjmp	.-52     	; 0xb82 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:48
    skipNextADC = true;

  } else {

    //Populate the rolling buffer with values from the ADC
    last_raw_adc = value;
     bb6:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <last_raw_adc+0x1>
     bba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <last_raw_adc>
/media/D/Data/Powerwall/cellModule/d_adc.ino:49
    voltageBuff[voltageBufIdx] = value;
     bbe:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <voltageBufIdx>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e0 57       	subi	r30, 0x70	; 112
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	80 83       	st	Z, r24
/media/D/Data/Powerwall/cellModule/d_adc.ino:51

    voltageBufIdx++;
     bd0:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <voltageBufIdx>
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:53

    if (voltageBufIdx == OVERSAMPLE_LOOP) {
     bda:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <voltageBufIdx>
     bde:	80 31       	cpi	r24, 0x10	; 16
     be0:	29 f4       	brne	.+10     	; 0xbec <__vector_8+0x8e>
/media/D/Data/Powerwall/cellModule/d_adc.ino:54
      voltageBufIdx = 0;
     be2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:55
      voltageBufferReady = 1;// indicates valid data, used in main logic
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/d_adc.ino:59
    }


    tempReadingCnt++;
     bec:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <tempReadingCnt>
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:60
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
     bf6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <tempReadingCnt>
     bfa:	80 31       	cpi	r24, 0x10	; 16
     bfc:	11 f6       	brne	.-124    	; 0xb82 <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
     bfe:	80 e9       	ldi	r24, 0x90	; 144
     c00:	d5 cf       	rjmp	.-86     	; 0xbac <__vector_8+0x4e>

00000c02 <Reboot()>:
_Z6Rebootv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:62
void factory_default() {
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, 0);
}

void Reboot() {
  TCCR1 = 0;
     c02:	10 be       	out	0x30, r1	; 48
/media/D/Data/Powerwall/cellModule/b_functions.ino:63
  TIMSK |= (1 << OCIE1A); //Disable timer1
     c04:	89 b7       	in	r24, 0x39	; 57
     c06:	80 64       	ori	r24, 0x40	; 64
     c08:	89 bf       	out	0x39, r24	; 57
/media/D/Data/Powerwall/cellModule/b_functions.ino:66

  //Now power down loop until the watchdog timer kicks a reset
  ledON();
     c0a:	73 dc       	rcall	.-1818   	; 0x4f2 <ledON()>
     c0c:	ff cf       	rjmp	.-2      	; 0xc0c <Reboot()+0xa>

00000c0e <main>:
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	65 97       	sbiw	r28, 0x15	; 21
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	8a bd       	out	0x2a, r24	; 42
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     c26:	83 bf       	out	0x33, r24	; 51
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     c28:	78 94       	sei
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:933

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     c2a:	89 b7       	in	r24, 0x39	; 57
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:594
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	8c bd       	out	0x2c, r24	; 44
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:595
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	8d bd       	out	0x2d, r24	; 45
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:596
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     c38:	87 ec       	ldi	r24, 0xC7	; 199
     c3a:	80 bf       	out	0x30, r24	; 48
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     c3c:	86 b1       	in	r24, 0x06	; 6
     c3e:	88 77       	andi	r24, 0x78	; 120
     c40:	86 68       	ori	r24, 0x86	; 134
     c42:	86 b9       	out	0x06, r24	; 6
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
     c44:	37 9a       	sbi	0x06, 7	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:23
}

void setup() {
  //Must be first line of setup()
  MCUSR &= ~(1 << WDRF); // reset status flag
     c46:	84 b7       	in	r24, 0x34	; 52
     c48:	87 7f       	andi	r24, 0xF7	; 247
     c4a:	84 bf       	out	0x34, r24	; 52
wdt_disable():
/home/zz/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	a8 95       	wdr
     c52:	81 b5       	in	r24, 0x21	; 33
     c54:	88 61       	ori	r24, 0x18	; 24
     c56:	81 bd       	out	0x21, r24	; 33
     c58:	11 bc       	out	0x21, r1	; 33
     c5a:	0f be       	out	0x3f, r0	; 63
pinMode():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:35
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     c5c:	e4 e3       	ldi	r30, 0x34	; 52
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     c62:	ee e2       	ldi	r30, 0x2E	; 46
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	84 91       	lpm	r24, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     c68:	88 23       	and	r24, r24
     c6a:	99 f0       	breq	.+38     	; 0xc92 <main+0x84>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	fc 01       	movw	r30, r24
     c74:	e2 5e       	subi	r30, 0xE2	; 226
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	a5 91       	lpm	r26, Z+
     c7a:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     c7c:	fc 01       	movw	r30, r24
     c7e:	ec 5d       	subi	r30, 0xDC	; 220
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	85 91       	lpm	r24, Z+
     c84:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     c86:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:58
                cli();
     c88:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:59
    *reg |= bit;
     c8a:	ec 91       	ld	r30, X
     c8c:	e2 2b       	or	r30, r18
     c8e:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
     c90:	8f bf       	out	0x3f, r24	; 63
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:40
    DDRB &= ~(1 << DDB5);
    PORTB &= ~(1 << PB5);
  */

  pinMode(PB4, OUTPUT); //bypass - burning resistor
  digitalWrite(PB4, LOW);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	4f da       	rcall	.-2914   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/e_setup.ino:42

  ledON();
     c96:	2d dc       	rcall	.-1958   	; 0x4f2 <ledON()>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:278
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     c98:	87 da       	rcall	.-2802   	; 0x1a8 <micros>
     c9a:	8b 01       	movw	r16, r22
     c9c:	84 ef       	ldi	r24, 0xF4	; 244
     c9e:	c8 2e       	mov	r12, r24
     ca0:	dd 24       	eor	r13, r13
     ca2:	d3 94       	inc	r13
     ca4:	e1 2c       	mov	r14, r1
     ca6:	f1 2c       	mov	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     ca8:	7f da       	rcall	.-2818   	; 0x1a8 <micros>
     caa:	60 1b       	sub	r22, r16
     cac:	71 0b       	sbc	r23, r17
     cae:	68 3e       	cpi	r22, 0xE8	; 232
     cb0:	73 40       	sbci	r23, 0x03	; 3
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <main+0xa8>
     cb4:	bb c0       	rjmp	.+374    	; 0xe2c <main+0x21e>
     cb6:	c1 14       	cp	r12, r1
     cb8:	d1 04       	cpc	r13, r1
     cba:	e1 04       	cpc	r14, r1
     cbc:	f1 04       	cpc	r15, r1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <main+0xb4>
     cc0:	ad c0       	rjmp	.+346    	; 0xe1c <main+0x20e>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:44
  delay(500);
  ledOFF();
     cc2:	14 dc       	rcall	.-2008   	; 0x4ec <ledOFF()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:46

  green_pattern = GREEN_LED_PATTERN_STANDARD;
     cc4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:37
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
}

bool LoadConfigFromEEPROM() {
  cell_module_config restoredConfig;
     cc8:	81 e1       	ldi	r24, 0x11	; 17
     cca:	e3 e7       	ldi	r30, 0x73	; 115
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	de 01       	movw	r26, r28
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	01 90       	ld	r0, Z+
     cd4:	0d 92       	st	X+, r0
     cd6:	8a 95       	dec	r24
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <main+0xc4>
     cda:	fe 01       	movw	r30, r28
     cdc:	31 96       	adiw	r30, 0x01	; 1
     cde:	7f 01       	movw	r14, r30
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
     ce0:	04 e1       	ldi	r16, 0x14	; 20
     ce2:	10 e0       	ldi	r17, 0x00	; 0
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ce4:	c8 01       	movw	r24, r16
     ce6:	b3 d0       	rcall	.+358    	; 0xe4e <eeprom_read_byte>
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     ce8:	f7 01       	movw	r30, r14
     cea:	81 93       	st	Z+, r24
     cec:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
     cee:	0f 5f       	subi	r16, 0xFF	; 255
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cf2:	05 32       	cpi	r16, 0x25	; 37
     cf4:	11 05       	cpc	r17, r1
     cf6:	b1 f7       	brne	.-20     	; 0xce4 <main+0xd6>
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	a8 d0       	rcall	.+336    	; 0xe4e <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     cfe:	8a 8b       	std	Y+18, r24	; 0x12
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	a4 d0       	rcall	.+328    	; 0xe4e <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     d06:	8b 8b       	std	Y+19, r24	; 0x13
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a0 d0       	rcall	.+320    	; 0xe4e <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     d0e:	8c 8b       	std	Y+20, r24	; 0x14
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c d0       	rcall	.+312    	; 0xe4e <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     d16:	8d 8b       	std	Y+21, r24	; 0x15
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:44

  EEPROM.get(EEPROM_CONFIG_ADDRESS, restoredConfig);
  EEPROM.get(EEPROM_CHECKSUM_ADDRESS, existingChecksum);

  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	ab d9       	rcall	.-3242   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:46

  if (checksum == existingChecksum) {
     d1e:	0a 89       	ldd	r16, Y+18	; 0x12
     d20:	1b 89       	ldd	r17, Y+19	; 0x13
     d22:	2c 89       	ldd	r18, Y+20	; 0x14
     d24:	3d 89       	ldd	r19, Y+21	; 0x15
     d26:	60 17       	cp	r22, r16
     d28:	71 07       	cpc	r23, r17
     d2a:	82 07       	cpc	r24, r18
     d2c:	93 07       	cpc	r25, r19
     d2e:	09 f4       	brne	.+2      	; 0xd32 <main+0x124>
     d30:	84 c0       	rjmp	.+264    	; 0xe3a <main+0x22c>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:50
    
  //Load our EEPROM configuration
  if (!LoadConfigFromEEPROM()) {
    badConfiguration = true;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <badConfiguration>
/media/D/Data/Powerwall/cellModule/e_setup.ino:52
  }
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
     d38:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <badConfiguration>
     d3c:	81 11       	cpse	r24, r1
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <main+0x13a>
     d40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
     d44:	85 31       	cpi	r24, 0x15	; 21
     d46:	31 f4       	brne	.+12     	; 0xd54 <main+0x146>
/media/D/Data/Powerwall/cellModule/e_setup.ino:53
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
     d48:	8f ee       	ldi	r24, 0xEF	; 239
     d4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/e_setup.ino:54
    currentConfig.SLAVE_ADDR = DEFAULT_SLAVE_ADDR;//need to be here, compiler probably doesn't init struct properly
     d4e:	85 e1       	ldi	r24, 0x15	; 21
     d50:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/e_setup.ino:57
  }

  cli();//stop interrupts
     d54:	f8 94       	cli
/media/D/Data/Powerwall/cellModule/e_setup.ino:59

  voltageBufIdx = 0;
     d56:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <voltageBufIdx>
initTimer1():
/media/D/Data/Powerwall/cellModule/e_setup.ino:5
void initADC();

static inline void initTimer1(void)
{
  TCCR1 |= (1 << CTC1);  // clear timer on compare match
     d5a:	80 b7       	in	r24, 0x30	; 48
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:6
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
     d60:	80 b7       	in	r24, 0x30	; 48
     d62:	8f 60       	ori	r24, 0x0F	; 15
     d64:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:7
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	8d bd       	out	0x2d, r24	; 45
/media/D/Data/Powerwall/cellModule/e_setup.ino:8
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
     d6a:	89 b7       	in	r24, 0x39	; 57
     d6c:	80 64       	ori	r24, 0x40	; 64
     d6e:	89 bf       	out	0x39, r24	; 57
initADC():
/media/D/Data/Powerwall/cellModule/e_setup.ino:112

  //REFS1 REFS0 ADLAR REFS2 MUX3 MUX2 MUX1 MUX0
  //Internal 2.56V Voltage Reference without external bypass capacitor, disconnected from PB0 (AREF)
  //ADLAR =0 and PB3 (B0011) for INPUT (A3)
  //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
  ADMUX = B10010011;
     d70:	83 e9       	ldi	r24, 0x93	; 147
     d72:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/e_setup.ino:135
      (1 << ADPS0);      // set prescaler bit 0
    #endif
  */
  //#if (F_CPU == 8000000)
  //8MHZ clock so set prescaler to 64 (B110)
  ADCSRA =
     d74:	8e e8       	ldi	r24, 0x8E	; 142
     d76:	86 b9       	out	0x06, r24	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:66
  initTimer1();
  initADC();

  // WDTCSR configuration:     WDIE = 1: Interrupt Enable     WDE = 1 :Reset Enable
  // Enter Watchdog Configuration mode:
  WDTCR |= (1 << WDCE) | (1 << WDE);
     d78:	81 b5       	in	r24, 0x21	; 33
     d7a:	88 61       	ori	r24, 0x18	; 24
     d7c:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:69

  // Set Watchdog settings - 4000ms timeout
  WDTCR = (1 << WDIE) | (1 << WDE) | (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (0 << WDP0);
     d7e:	88 e6       	ldi	r24, 0x68	; 104
     d80:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:72

  // Enable Global Interrupts
  sei();
     d82:	78 94       	sei
/media/D/Data/Powerwall/cellModule/e_setup.ino:74

  init_i2c();
     d84:	63 da       	rcall	.-2874   	; 0x24c <init_i2c()>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:25
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests

    green_pattern = GREEN_LED_PANIC;
     d86:	15 e5       	ldi	r17, 0x55	; 85
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     d88:	01 e0       	ldi	r16, 0x01	; 1
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:3

void loop() {
  wdt_reset();
     d8a:	a8 95       	wdr
/media/D/Data/Powerwall/cellModule/z_main.ino:6

  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
     d8c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <badConfiguration>
     d90:	81 11       	cpse	r24, r1
     d92:	28 c0       	rjmp	.+80     	; 0xde4 <main+0x1d6>
     d94:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
     d98:	85 31       	cpi	r24, 0x15	; 21
     d9a:	21 f1       	breq	.+72     	; 0xde4 <main+0x1d6>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:23
     */
  TinyWireS_stop_check();
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
     d9c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     da0:	81 11       	cpse	r24, r1
     da2:	14 c0       	rjmp	.+40     	; 0xdcc <main+0x1be>
     da4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <inPanicMode>
     da8:	81 11       	cpse	r24, r1
     daa:	10 c0       	rjmp	.+32     	; 0xdcc <main+0x1be>
/media/D/Data/Powerwall/cellModule/z_main.ino:25

    green_pattern = GREEN_LED_PANIC;
     dac:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
     db0:	00 93 f9 00 	sts	0x00F9, r16	; 0x8000f9 <inPanicMode>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}

void disable_i2c(){
  USICR = 0; //control register
     db4:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
     db6:	1e b8       	out	0x0e, r1	; 14
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:29
    //Try resetting the i2c bus
    disable_i2c();
    init_i2c();
     db8:	49 da       	rcall	.-2926   	; 0x24c <init_i2c()>
/media/D/Data/Powerwall/cellModule/z_main.ino:31

    error_counter++;
     dba:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <error_counter>
     dbe:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <error_counter+0x1>
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <error_counter+0x1>
     dc8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <error_counter>
/media/D/Data/Powerwall/cellModule/z_main.ino:34
  }

  if (i2cTmr > 0 && inPanicMode == true) {//return from panic mode
     dcc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
     dd0:	88 23       	and	r24, r24
     dd2:	41 f0       	breq	.+16     	; 0xde4 <main+0x1d6>
     dd4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <inPanicMode>
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	21 f4       	brne	.+8      	; 0xde4 <main+0x1d6>
/media/D/Data/Powerwall/cellModule/z_main.ino:35
    green_pattern = GREEN_LED_PATTERN_STANDARD;
     ddc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:36
    inPanicMode = false;
     de0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <inPanicMode>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:10
  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
    HandlePanicMode();//reset i2c bus if no communication going on for some time
  }

  if(inPanicMode)
     de4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <inPanicMode>
     de8:	88 23       	and	r24, r24
     dea:	41 f0       	breq	.+16     	; 0xdfc <main+0x1ee>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
     dec:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <targetBypassVoltage+0x1>
     df0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
     df4:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
     df8:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <bypassEnabled>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:64
  usi_onRequestPtr = function;
}

void TinyWireS_stop_check()
{
    if (!usi_onReceiverPtr)
     dfc:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <usi_onReceiverPtr>
     e00:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <usi_onReceiverPtr+0x1>
     e04:	30 97       	sbiw	r30, 0x00	; 0
     e06:	09 f4       	brne	.+2      	; 0xe0a <main+0x1fc>
     e08:	c0 cf       	rjmp	.-128    	; 0xd8a <main+0x17c>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:69
    {
        // no onReceive callback, nothing to do...
        return;
    }
    if (!(USISR & ( 1 << USIPF )))
     e0a:	75 9b       	sbis	0x0e, 5	; 14
     e0c:	be cf       	rjmp	.-132    	; 0xd8a <main+0x17c>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
     e0e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rxCount>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:75
    {
        // Stop not detected
        return;
    }
    uint8_t amount = usiTwiAmountDataInReceiveBuffer();
    if (amount == 0)
     e12:	88 23       	and	r24, r24
     e14:	09 f4       	brne	.+2      	; 0xe18 <main+0x20a>
     e16:	b9 cf       	rjmp	.-142    	; 0xd8a <main+0x17c>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:80
    {
        // no data in buffer
        return;
    }
    usi_onReceiverPtr(amount);
     e18:	09 95       	icall
     e1a:	b7 cf       	rjmp	.-146    	; 0xd8a <main+0x17c>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:283
        ms--;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	c8 1a       	sub	r12, r24
     e20:	d1 08       	sbc	r13, r1
     e22:	e1 08       	sbc	r14, r1
     e24:	f1 08       	sbc	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:284
        start += 1000;
     e26:	08 51       	subi	r16, 0x18	; 24
     e28:	1c 4f       	sbci	r17, 0xFC	; 252
     e2a:	3e cf       	rjmp	.-388    	; 0xca8 <main+0x9a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     e2c:	c1 14       	cp	r12, r1
     e2e:	d1 04       	cpc	r13, r1
     e30:	e1 04       	cpc	r14, r1
     e32:	f1 04       	cpc	r15, r1
     e34:	09 f0       	breq	.+2      	; 0xe38 <main+0x22a>
     e36:	38 cf       	rjmp	.-400    	; 0xca8 <main+0x9a>
     e38:	44 cf       	rjmp	.-376    	; 0xcc2 <main+0xb4>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:48
  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));

  if (checksum == existingChecksum) {
    //Clone the config into our global variable and return all OK
    memcpy(&currentConfig, &restoredConfig, sizeof(cell_module_config));
     e3a:	81 e1       	ldi	r24, 0x11	; 17
     e3c:	fe 01       	movw	r30, r28
     e3e:	31 96       	adiw	r30, 0x01	; 1
     e40:	a2 e6       	ldi	r26, 0x62	; 98
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	01 90       	ld	r0, Z+
     e46:	0d 92       	st	X+, r0
     e48:	8a 95       	dec	r24
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <main+0x236>
     e4c:	75 cf       	rjmp	.-278    	; 0xd38 <main+0x12a>

00000e4e <eeprom_read_byte>:
eeprom_read_byte():
     e4e:	e1 99       	sbic	0x1c, 1	; 28
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <eeprom_read_byte>
     e52:	9f bb       	out	0x1f, r25	; 31
     e54:	8e bb       	out	0x1e, r24	; 30
     e56:	e0 9a       	sbi	0x1c, 0	; 28
     e58:	99 27       	eor	r25, r25
     e5a:	8d b3       	in	r24, 0x1d	; 29
     e5c:	08 95       	ret

00000e5e <eeprom_write_byte>:
eeprom_write_byte():
     e5e:	26 2f       	mov	r18, r22

00000e60 <eeprom_write_r18>:
     e60:	e1 99       	sbic	0x1c, 1	; 28
     e62:	fe cf       	rjmp	.-4      	; 0xe60 <eeprom_write_r18>
     e64:	1c ba       	out	0x1c, r1	; 28
     e66:	9f bb       	out	0x1f, r25	; 31
     e68:	8e bb       	out	0x1e, r24	; 30
     e6a:	2d bb       	out	0x1d, r18	; 29
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	e2 9a       	sbi	0x1c, 2	; 28
     e72:	e1 9a       	sbi	0x1c, 1	; 28
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	08 95       	ret

00000e7a <__subsf3>:
__subsf3():
     e7a:	50 58       	subi	r21, 0x80	; 128

00000e7c <__addsf3>:
     e7c:	bb 27       	eor	r27, r27
     e7e:	aa 27       	eor	r26, r26
     e80:	0e d0       	rcall	.+28     	; 0xe9e <__addsf3x>
     e82:	08 c1       	rjmp	.+528    	; 0x1094 <__fp_round>
__addsf3():
     e84:	f9 d0       	rcall	.+498    	; 0x1078 <__fp_pscA>
     e86:	30 f0       	brcs	.+12     	; 0xe94 <__addsf3+0x18>
     e88:	fe d0       	rcall	.+508    	; 0x1086 <__fp_pscB>
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <__addsf3+0x18>
     e8c:	31 f4       	brne	.+12     	; 0xe9a <__addsf3+0x1e>
     e8e:	9f 3f       	cpi	r25, 0xFF	; 255
     e90:	11 f4       	brne	.+4      	; 0xe96 <__addsf3+0x1a>
     e92:	1e f4       	brtc	.+6      	; 0xe9a <__addsf3+0x1e>
     e94:	ee c0       	rjmp	.+476    	; 0x1072 <__fp_nan>
     e96:	0e f4       	brtc	.+2      	; 0xe9a <__addsf3+0x1e>
     e98:	e0 95       	com	r30
     e9a:	e7 fb       	bst	r30, 7
     e9c:	e4 c0       	rjmp	.+456    	; 0x1066 <__fp_inf>

00000e9e <__addsf3x>:
__addsf3x():
     e9e:	e9 2f       	mov	r30, r25
     ea0:	0a d1       	rcall	.+532    	; 0x10b6 <__fp_split3>
     ea2:	80 f3       	brcs	.-32     	; 0xe84 <__addsf3+0x8>
     ea4:	ba 17       	cp	r27, r26
     ea6:	62 07       	cpc	r22, r18
     ea8:	73 07       	cpc	r23, r19
     eaa:	84 07       	cpc	r24, r20
     eac:	95 07       	cpc	r25, r21
     eae:	18 f0       	brcs	.+6      	; 0xeb6 <__addsf3x+0x18>
     eb0:	71 f4       	brne	.+28     	; 0xece <__addsf3x+0x30>
     eb2:	9e f5       	brtc	.+102    	; 0xf1a <__addsf3x+0x7c>
     eb4:	22 c1       	rjmp	.+580    	; 0x10fa <__fp_zero>
     eb6:	0e f4       	brtc	.+2      	; 0xeba <__addsf3x+0x1c>
     eb8:	e0 95       	com	r30
     eba:	0b 2e       	mov	r0, r27
     ebc:	ba 2f       	mov	r27, r26
     ebe:	a0 2d       	mov	r26, r0
     ec0:	0b 01       	movw	r0, r22
     ec2:	b9 01       	movw	r22, r18
     ec4:	90 01       	movw	r18, r0
     ec6:	0c 01       	movw	r0, r24
     ec8:	ca 01       	movw	r24, r20
     eca:	a0 01       	movw	r20, r0
     ecc:	11 24       	eor	r1, r1
     ece:	ff 27       	eor	r31, r31
     ed0:	59 1b       	sub	r21, r25
     ed2:	99 f0       	breq	.+38     	; 0xefa <__addsf3x+0x5c>
     ed4:	59 3f       	cpi	r21, 0xF9	; 249
     ed6:	50 f4       	brcc	.+20     	; 0xeec <__addsf3x+0x4e>
     ed8:	50 3e       	cpi	r21, 0xE0	; 224
     eda:	68 f1       	brcs	.+90     	; 0xf36 <__addsf3x+0x98>
     edc:	1a 16       	cp	r1, r26
     ede:	f0 40       	sbci	r31, 0x00	; 0
     ee0:	a2 2f       	mov	r26, r18
     ee2:	23 2f       	mov	r18, r19
     ee4:	34 2f       	mov	r19, r20
     ee6:	44 27       	eor	r20, r20
     ee8:	58 5f       	subi	r21, 0xF8	; 248
     eea:	f3 cf       	rjmp	.-26     	; 0xed2 <__addsf3x+0x34>
     eec:	46 95       	lsr	r20
     eee:	37 95       	ror	r19
     ef0:	27 95       	ror	r18
     ef2:	a7 95       	ror	r26
     ef4:	f0 40       	sbci	r31, 0x00	; 0
     ef6:	53 95       	inc	r21
     ef8:	c9 f7       	brne	.-14     	; 0xeec <__addsf3x+0x4e>
     efa:	7e f4       	brtc	.+30     	; 0xf1a <__addsf3x+0x7c>
     efc:	1f 16       	cp	r1, r31
     efe:	ba 0b       	sbc	r27, r26
     f00:	62 0b       	sbc	r22, r18
     f02:	73 0b       	sbc	r23, r19
     f04:	84 0b       	sbc	r24, r20
     f06:	ba f0       	brmi	.+46     	; 0xf36 <__addsf3x+0x98>
     f08:	91 50       	subi	r25, 0x01	; 1
     f0a:	a1 f0       	breq	.+40     	; 0xf34 <__addsf3x+0x96>
     f0c:	ff 0f       	add	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	c2 f7       	brpl	.-16     	; 0xf08 <__addsf3x+0x6a>
     f18:	0e c0       	rjmp	.+28     	; 0xf36 <__addsf3x+0x98>
     f1a:	ba 0f       	add	r27, r26
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 1f       	adc	r23, r19
     f20:	84 1f       	adc	r24, r20
     f22:	48 f4       	brcc	.+18     	; 0xf36 <__addsf3x+0x98>
     f24:	87 95       	ror	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f7 95       	ror	r31
     f2e:	9e 3f       	cpi	r25, 0xFE	; 254
     f30:	08 f0       	brcs	.+2      	; 0xf34 <__addsf3x+0x96>
     f32:	b3 cf       	rjmp	.-154    	; 0xe9a <__addsf3+0x1e>
     f34:	93 95       	inc	r25
     f36:	88 0f       	add	r24, r24
     f38:	08 f0       	brcs	.+2      	; 0xf3c <__addsf3x+0x9e>
     f3a:	99 27       	eor	r25, r25
     f3c:	ee 0f       	add	r30, r30
     f3e:	97 95       	ror	r25
     f40:	87 95       	ror	r24
     f42:	08 95       	ret

00000f44 <__cmpsf2>:
     f44:	6c d0       	rcall	.+216    	; 0x101e <__fp_cmp>
     f46:	08 f4       	brcc	.+2      	; 0xf4a <__cmpsf2+0x6>
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	08 95       	ret

00000f4c <__fixunssfsi>:
     f4c:	bc d0       	rcall	.+376    	; 0x10c6 <__fp_splitA>
     f4e:	88 f0       	brcs	.+34     	; 0xf72 <__fixunssfsi+0x26>
     f50:	9f 57       	subi	r25, 0x7F	; 127
     f52:	90 f0       	brcs	.+36     	; 0xf78 <__fixunssfsi+0x2c>
     f54:	b9 2f       	mov	r27, r25
     f56:	99 27       	eor	r25, r25
     f58:	b7 51       	subi	r27, 0x17	; 23
     f5a:	a0 f0       	brcs	.+40     	; 0xf84 <__fixunssfsi+0x38>
     f5c:	d1 f0       	breq	.+52     	; 0xf92 <__fixunssfsi+0x46>
__fixunssfsi():
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	1a f0       	brmi	.+6      	; 0xf6e <__fixunssfsi+0x22>
     f68:	ba 95       	dec	r27
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <__fixunssfsi+0x12>
     f6c:	12 c0       	rjmp	.+36     	; 0xf92 <__fixunssfsi+0x46>
     f6e:	b1 30       	cpi	r27, 0x01	; 1
     f70:	81 f0       	breq	.+32     	; 0xf92 <__fixunssfsi+0x46>
     f72:	c3 d0       	rcall	.+390    	; 0x10fa <__fp_zero>
     f74:	b1 e0       	ldi	r27, 0x01	; 1
     f76:	08 95       	ret
     f78:	c0 c0       	rjmp	.+384    	; 0x10fa <__fp_zero>
     f7a:	67 2f       	mov	r22, r23
     f7c:	78 2f       	mov	r23, r24
     f7e:	88 27       	eor	r24, r24
     f80:	b8 5f       	subi	r27, 0xF8	; 248
     f82:	39 f0       	breq	.+14     	; 0xf92 <__fixunssfsi+0x46>
     f84:	b9 3f       	cpi	r27, 0xF9	; 249
     f86:	cc f3       	brlt	.-14     	; 0xf7a <__fixunssfsi+0x2e>
     f88:	86 95       	lsr	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b3 95       	inc	r27
     f90:	d9 f7       	brne	.-10     	; 0xf88 <__fixunssfsi+0x3c>
     f92:	3e f4       	brtc	.+14     	; 0xfa2 <__fixunssfsi+0x56>
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	61 95       	neg	r22
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__floatunsisf>:
__floatunsisf():
     fa4:	e8 94       	clt
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <__floatsisf+0x12>

00000fa8 <__floatsisf>:
     fa8:	97 fb       	bst	r25, 7
     faa:	3e f4       	brtc	.+14     	; 0xfba <__floatsisf+0x12>
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	99 23       	and	r25, r25
     fbc:	a9 f0       	breq	.+42     	; 0xfe8 <__floatsisf+0x40>
     fbe:	f9 2f       	mov	r31, r25
     fc0:	96 e9       	ldi	r25, 0x96	; 150
     fc2:	bb 27       	eor	r27, r27
     fc4:	93 95       	inc	r25
     fc6:	f6 95       	lsr	r31
     fc8:	87 95       	ror	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f1 11       	cpse	r31, r1
     fd2:	f8 cf       	rjmp	.-16     	; 0xfc4 <__floatsisf+0x1c>
     fd4:	fa f4       	brpl	.+62     	; 0x1014 <__floatsisf+0x6c>
     fd6:	bb 0f       	add	r27, r27
     fd8:	11 f4       	brne	.+4      	; 0xfde <__floatsisf+0x36>
     fda:	60 ff       	sbrs	r22, 0
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <__floatsisf+0x6c>
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	16 c0       	rjmp	.+44     	; 0x1014 <__floatsisf+0x6c>
     fe8:	88 23       	and	r24, r24
     fea:	11 f0       	breq	.+4      	; 0xff0 <__floatsisf+0x48>
     fec:	96 e9       	ldi	r25, 0x96	; 150
     fee:	11 c0       	rjmp	.+34     	; 0x1012 <__floatsisf+0x6a>
     ff0:	77 23       	and	r23, r23
     ff2:	21 f0       	breq	.+8      	; 0xffc <__floatsisf+0x54>
     ff4:	9e e8       	ldi	r25, 0x8E	; 142
     ff6:	87 2f       	mov	r24, r23
     ff8:	76 2f       	mov	r23, r22
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <__floatsisf+0x5e>
     ffc:	66 23       	and	r22, r22
     ffe:	71 f0       	breq	.+28     	; 0x101c <__floatsisf+0x74>
    1000:	96 e8       	ldi	r25, 0x86	; 134
    1002:	86 2f       	mov	r24, r22
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	2a f0       	brmi	.+10     	; 0x1014 <__floatsisf+0x6c>
    100a:	9a 95       	dec	r25
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	da f7       	brpl	.-10     	; 0x100a <__floatsisf+0x62>
    1014:	88 0f       	add	r24, r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__fp_cmp>:
__fp_cmp():
    101e:	99 0f       	add	r25, r25
    1020:	00 08       	sbc	r0, r0
    1022:	55 0f       	add	r21, r21
    1024:	aa 0b       	sbc	r26, r26
    1026:	e0 e8       	ldi	r30, 0x80	; 128
    1028:	fe ef       	ldi	r31, 0xFE	; 254
    102a:	16 16       	cp	r1, r22
    102c:	17 06       	cpc	r1, r23
    102e:	e8 07       	cpc	r30, r24
    1030:	f9 07       	cpc	r31, r25
    1032:	c0 f0       	brcs	.+48     	; 0x1064 <__fp_cmp+0x46>
    1034:	12 16       	cp	r1, r18
    1036:	13 06       	cpc	r1, r19
    1038:	e4 07       	cpc	r30, r20
    103a:	f5 07       	cpc	r31, r21
    103c:	98 f0       	brcs	.+38     	; 0x1064 <__fp_cmp+0x46>
    103e:	62 1b       	sub	r22, r18
    1040:	73 0b       	sbc	r23, r19
    1042:	84 0b       	sbc	r24, r20
    1044:	95 0b       	sbc	r25, r21
    1046:	39 f4       	brne	.+14     	; 0x1056 <__fp_cmp+0x38>
    1048:	0a 26       	eor	r0, r26
    104a:	61 f0       	breq	.+24     	; 0x1064 <__fp_cmp+0x46>
    104c:	23 2b       	or	r18, r19
    104e:	24 2b       	or	r18, r20
    1050:	25 2b       	or	r18, r21
    1052:	21 f4       	brne	.+8      	; 0x105c <__fp_cmp+0x3e>
    1054:	08 95       	ret
    1056:	0a 26       	eor	r0, r26
    1058:	09 f4       	brne	.+2      	; 0x105c <__fp_cmp+0x3e>
    105a:	a1 40       	sbci	r26, 0x01	; 1
    105c:	a6 95       	lsr	r26
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	81 1d       	adc	r24, r1
    1062:	81 1d       	adc	r24, r1
    1064:	08 95       	ret

00001066 <__fp_inf>:
__fp_inf():
    1066:	97 f9       	bld	r25, 7
    1068:	9f 67       	ori	r25, 0x7F	; 127
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	08 95       	ret

00001072 <__fp_nan>:
__fp_nan():
    1072:	9f ef       	ldi	r25, 0xFF	; 255
    1074:	80 ec       	ldi	r24, 0xC0	; 192
    1076:	08 95       	ret

00001078 <__fp_pscA>:
__fp_pscA():
    1078:	00 24       	eor	r0, r0
    107a:	0a 94       	dec	r0
    107c:	16 16       	cp	r1, r22
    107e:	17 06       	cpc	r1, r23
    1080:	18 06       	cpc	r1, r24
    1082:	09 06       	cpc	r0, r25
    1084:	08 95       	ret

00001086 <__fp_pscB>:
__fp_pscB():
    1086:	00 24       	eor	r0, r0
    1088:	0a 94       	dec	r0
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	14 06       	cpc	r1, r20
    1090:	05 06       	cpc	r0, r21
    1092:	08 95       	ret

00001094 <__fp_round>:
__fp_round():
    1094:	09 2e       	mov	r0, r25
    1096:	03 94       	inc	r0
    1098:	00 0c       	add	r0, r0
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__fp_round+0xc>
    109c:	88 23       	and	r24, r24
    109e:	52 f0       	brmi	.+20     	; 0x10b4 <__fp_round+0x20>
    10a0:	bb 0f       	add	r27, r27
    10a2:	40 f4       	brcc	.+16     	; 0x10b4 <__fp_round+0x20>
    10a4:	bf 2b       	or	r27, r31
    10a6:	11 f4       	brne	.+4      	; 0x10ac <__fp_round+0x18>
    10a8:	60 ff       	sbrs	r22, 0
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__fp_round+0x20>
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8f 4f       	sbci	r24, 0xFF	; 255
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	08 95       	ret

000010b6 <__fp_split3>:
__fp_split3():
    10b6:	57 fd       	sbrc	r21, 7
    10b8:	90 58       	subi	r25, 0x80	; 128
    10ba:	44 0f       	add	r20, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	59 f0       	breq	.+22     	; 0x10d6 <__fp_splitA+0x10>
    10c0:	5f 3f       	cpi	r21, 0xFF	; 255
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <__fp_splitA+0x1a>
    10c4:	47 95       	ror	r20

000010c6 <__fp_splitA>:
    10c6:	88 0f       	add	r24, r24
    10c8:	97 fb       	bst	r25, 7
    10ca:	99 1f       	adc	r25, r25
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <__fp_splitA+0x20>
    10ce:	9f 3f       	cpi	r25, 0xFF	; 255
    10d0:	79 f0       	breq	.+30     	; 0x10f0 <__fp_splitA+0x2a>
    10d2:	87 95       	ror	r24
    10d4:	08 95       	ret
    10d6:	12 16       	cp	r1, r18
    10d8:	13 06       	cpc	r1, r19
    10da:	14 06       	cpc	r1, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	f2 cf       	rjmp	.-28     	; 0x10c4 <__fp_split3+0xe>
    10e0:	46 95       	lsr	r20
    10e2:	f1 df       	rcall	.-30     	; 0x10c6 <__fp_splitA>
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <__fp_splitA+0x30>
    10e6:	16 16       	cp	r1, r22
    10e8:	17 06       	cpc	r1, r23
    10ea:	18 06       	cpc	r1, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	f1 cf       	rjmp	.-30     	; 0x10d2 <__fp_splitA+0xc>
    10f0:	86 95       	lsr	r24
    10f2:	71 05       	cpc	r23, r1
    10f4:	61 05       	cpc	r22, r1
    10f6:	08 94       	sec
    10f8:	08 95       	ret

000010fa <__fp_zero>:
__fp_zero():
    10fa:	e8 94       	clt

000010fc <__fp_szero>:
    10fc:	bb 27       	eor	r27, r27
    10fe:	66 27       	eor	r22, r22
    1100:	77 27       	eor	r23, r23
    1102:	cb 01       	movw	r24, r22
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__mulsf3>:
__mulsf3():
    1108:	0a d0       	rcall	.+20     	; 0x111e <__mulsf3x>
    110a:	c4 cf       	rjmp	.-120    	; 0x1094 <__fp_round>
    110c:	b5 df       	rcall	.-150    	; 0x1078 <__fp_pscA>
    110e:	28 f0       	brcs	.+10     	; 0x111a <__mulsf3+0x12>
    1110:	ba df       	rcall	.-140    	; 0x1086 <__fp_pscB>
    1112:	18 f0       	brcs	.+6      	; 0x111a <__mulsf3+0x12>
    1114:	95 23       	and	r25, r21
    1116:	09 f0       	breq	.+2      	; 0x111a <__mulsf3+0x12>
    1118:	a6 cf       	rjmp	.-180    	; 0x1066 <__fp_inf>
    111a:	ab cf       	rjmp	.-170    	; 0x1072 <__fp_nan>
    111c:	ef cf       	rjmp	.-34     	; 0x10fc <__fp_szero>

0000111e <__mulsf3x>:
__mulsf3x():
    111e:	cb df       	rcall	.-106    	; 0x10b6 <__fp_split3>
    1120:	a8 f3       	brcs	.-22     	; 0x110c <__mulsf3+0x4>

00001122 <__mulsf3_pse>:
    1122:	99 23       	and	r25, r25
    1124:	d9 f3       	breq	.-10     	; 0x111c <__mulsf3+0x14>
    1126:	55 23       	and	r21, r21
    1128:	c9 f3       	breq	.-14     	; 0x111c <__mulsf3+0x14>
    112a:	95 0f       	add	r25, r21
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	55 1f       	adc	r21, r21
    1130:	aa 27       	eor	r26, r26
    1132:	ee 27       	eor	r30, r30
    1134:	ff 27       	eor	r31, r31
    1136:	bb 27       	eor	r27, r27
    1138:	00 24       	eor	r0, r0
    113a:	08 94       	sec
    113c:	67 95       	ror	r22
    113e:	20 f4       	brcc	.+8      	; 0x1148 <__mulsf3_pse+0x26>
    1140:	e2 0f       	add	r30, r18
    1142:	f3 1f       	adc	r31, r19
    1144:	b4 1f       	adc	r27, r20
    1146:	0a 1e       	adc	r0, r26
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	44 1f       	adc	r20, r20
    114e:	aa 1f       	adc	r26, r26
    1150:	66 95       	lsr	r22
    1152:	a9 f7       	brne	.-22     	; 0x113e <__mulsf3_pse+0x1c>
    1154:	77 95       	ror	r23
    1156:	30 f4       	brcc	.+12     	; 0x1164 <__mulsf3_pse+0x42>
    1158:	f3 0f       	add	r31, r19
    115a:	b4 1f       	adc	r27, r20
    115c:	0a 1e       	adc	r0, r26
    115e:	12 1e       	adc	r1, r18
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__mulsf3_pse+0x42>
    1162:	63 95       	inc	r22
    1164:	33 0f       	add	r19, r19
    1166:	44 1f       	adc	r20, r20
    1168:	aa 1f       	adc	r26, r26
    116a:	22 1f       	adc	r18, r18
    116c:	76 95       	lsr	r23
    116e:	99 f7       	brne	.-26     	; 0x1156 <__mulsf3_pse+0x34>
    1170:	87 95       	ror	r24
    1172:	20 f4       	brcc	.+8      	; 0x117c <__mulsf3_pse+0x5a>
    1174:	b4 0f       	add	r27, r20
    1176:	0a 1e       	adc	r0, r26
    1178:	12 1e       	adc	r1, r18
    117a:	63 1f       	adc	r22, r19
    117c:	44 0f       	add	r20, r20
    117e:	aa 1f       	adc	r26, r26
    1180:	22 1f       	adc	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	86 95       	lsr	r24
    1186:	a9 f7       	brne	.-22     	; 0x1172 <__mulsf3_pse+0x50>
    1188:	86 2f       	mov	r24, r22
    118a:	71 2d       	mov	r23, r1
    118c:	60 2d       	mov	r22, r0
    118e:	11 24       	eor	r1, r1
    1190:	9f 57       	subi	r25, 0x7F	; 127
    1192:	50 40       	sbci	r21, 0x00	; 0
    1194:	8a f0       	brmi	.+34     	; 0x11b8 <__mulsf3_pse+0x96>
    1196:	e1 f0       	breq	.+56     	; 0x11d0 <__mulsf3_pse+0xae>
    1198:	88 23       	and	r24, r24
    119a:	4a f0       	brmi	.+18     	; 0x11ae <__mulsf3_pse+0x8c>
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	bb 1f       	adc	r27, r27
    11a2:	66 1f       	adc	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 1f       	adc	r24, r24
    11a8:	91 50       	subi	r25, 0x01	; 1
    11aa:	50 40       	sbci	r21, 0x00	; 0
    11ac:	a9 f7       	brne	.-22     	; 0x1198 <__mulsf3_pse+0x76>
    11ae:	9e 3f       	cpi	r25, 0xFE	; 254
    11b0:	51 05       	cpc	r21, r1
    11b2:	70 f0       	brcs	.+28     	; 0x11d0 <__mulsf3_pse+0xae>
    11b4:	58 cf       	rjmp	.-336    	; 0x1066 <__fp_inf>
    11b6:	a2 cf       	rjmp	.-188    	; 0x10fc <__fp_szero>
    11b8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ba:	ec f3       	brlt	.-6      	; 0x11b6 <__mulsf3_pse+0x94>
    11bc:	98 3e       	cpi	r25, 0xE8	; 232
    11be:	dc f3       	brlt	.-10     	; 0x11b6 <__mulsf3_pse+0x94>
    11c0:	86 95       	lsr	r24
    11c2:	77 95       	ror	r23
    11c4:	67 95       	ror	r22
    11c6:	b7 95       	ror	r27
    11c8:	f7 95       	ror	r31
    11ca:	e7 95       	ror	r30
    11cc:	9f 5f       	subi	r25, 0xFF	; 255
    11ce:	c1 f7       	brne	.-16     	; 0x11c0 <__mulsf3_pse+0x9e>
    11d0:	fe 2b       	or	r31, r30
    11d2:	88 0f       	add	r24, r24
    11d4:	91 1d       	adc	r25, r1
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    11de:	f8 94       	cli

000011e0 <__stop_program>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    11e0:	ff cf       	rjmp	.-2      	; 0x11e0 <__stop_program>
