
/tmp/arduino_build_197194/cellModule.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	69 c4       	rjmp	.+2258   	; 0x8da <__vector_3>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	4a c3       	rjmp	.+1684   	; 0x6a0 <__vector_5>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	fc c4       	rjmp	.+2552   	; 0xa0a <__vector_8>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	42 c4       	rjmp	.+2180   	; 0x8a0 <__vector_13>
  1c:	8b c3       	rjmp	.+1814   	; 0x734 <__vector_14>

0000001e <__trampolines_end>:
__trampolines_start():
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
  24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
  2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
  30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
  36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  48:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  4e:	ee ef       	ldi	r30, 0xFE	; 254
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  50:	ff e0       	ldi	r31, 0x0F	; 15
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  54:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  56:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  58:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  5a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  5e:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  60:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  62:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  68:	a7 3e       	cpi	r26, 0xE7	; 231
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  6a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
.do_clear_bss_start():
  6e:	25 d5       	rcall	.+2634   	; 0xaba <main>
  70:	c4 c7       	rjmp	.+3976   	; 0xffa <_exit>

00000072 <__bad_interrupt>:
__vector_1():
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>:
_Z14calculateCRC32PKhj.constprop.8():
/media/D/Data/Powerwall/cellModule/b_functions.ino:12
inline void ledOFF() {
  DDRB |= (1 << DDB1);
  PORTB &= ~(1 << PB1);
}

uint32_t calculateCRC32(const uint8_t *data, size_t length)
  74:	4f 92       	push	r4
  76:	5f 92       	push	r5
  78:	6f 92       	push	r6
  7a:	7f 92       	push	r7
  7c:	8f 92       	push	r8
  7e:	9f 92       	push	r9
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	fc 01       	movw	r30, r24
  8e:	39 96       	adiw	r30, 0x09	; 9
/media/D/Data/Powerwall/cellModule/b_functions.ino:14
{
  uint32_t crc = 0xffffffff;
  90:	cc 24       	eor	r12, r12
  92:	ca 94       	dec	r12
  94:	dc 2c       	mov	r13, r12
  96:	76 01       	movw	r14, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:15
  while (length--) {
  98:	8e 17       	cp	r24, r30
  9a:	9f 07       	cpc	r25, r31
  9c:	e1 f1       	breq	.+120    	; 0x116 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0xa2>
/media/D/Data/Powerwall/cellModule/b_functions.ino:16
    uint8_t c = *data++;
  9e:	dc 01       	movw	r26, r24
  a0:	4d 90       	ld	r4, X+
  a2:	cd 01       	movw	r24, r26
  a4:	28 e0       	ldi	r18, 0x08	; 8
  a6:	30 e0       	ldi	r19, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
  a8:	40 e8       	ldi	r20, 0x80	; 128
  aa:	84 2e       	mov	r8, r20
  ac:	91 2c       	mov	r9, r1
  ae:	a1 2c       	mov	r10, r1
  b0:	b1 2c       	mov	r11, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:19
      bool bit = crc & 0x80000000;
      if (c & i) {
  b2:	51 2c       	mov	r5, r1
  b4:	71 2c       	mov	r7, r1
  b6:	61 2c       	mov	r6, r1
  b8:	b3 01       	movw	r22, r6
  ba:	a2 01       	movw	r20, r4
  bc:	48 21       	and	r20, r8
  be:	59 21       	and	r21, r9
  c0:	6a 21       	and	r22, r10
  c2:	7b 21       	and	r23, r11
  c4:	45 2b       	or	r20, r21
  c6:	46 2b       	or	r20, r22
  c8:	47 2b       	or	r20, r23
  ca:	f1 f4       	brne	.+60     	; 0x108 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x94>
/media/D/Data/Powerwall/cellModule/b_functions.ino:18
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
      bool bit = crc & 0x80000000;
  cc:	b7 01       	movw	r22, r14
  ce:	a6 01       	movw	r20, r12
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      if (c & i) {
        bit = !bit;
  d0:	44 27       	eor	r20, r20
  d2:	77 fd       	sbrc	r23, 7
  d4:	43 95       	inc	r20
  d6:	55 27       	eor	r21, r21
  d8:	66 27       	eor	r22, r22
  da:	77 27       	eor	r23, r23
/media/D/Data/Powerwall/cellModule/b_functions.ino:22
      }
      crc <<= 1;
  dc:	cc 0c       	add	r12, r12
  de:	dd 1c       	adc	r13, r13
  e0:	ee 1c       	adc	r14, r14
  e2:	ff 1c       	adc	r15, r15
/media/D/Data/Powerwall/cellModule/b_functions.ino:23
      if (bit) {
  e4:	44 23       	and	r20, r20
  e6:	41 f0       	breq	.+16     	; 0xf8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x84>
/media/D/Data/Powerwall/cellModule/b_functions.ino:24
        crc ^= 0x04c11db7;
  e8:	b7 eb       	ldi	r27, 0xB7	; 183
  ea:	cb 26       	eor	r12, r27
  ec:	bd e1       	ldi	r27, 0x1D	; 29
  ee:	db 26       	eor	r13, r27
  f0:	b1 ec       	ldi	r27, 0xC1	; 193
  f2:	eb 26       	eor	r14, r27
  f4:	b4 e0       	ldi	r27, 0x04	; 4
  f6:	fb 26       	eor	r15, r27
/media/D/Data/Powerwall/cellModule/b_functions.ino:17
uint32_t calculateCRC32(const uint8_t *data, size_t length)
{
  uint32_t crc = 0xffffffff;
  while (length--) {
    uint8_t c = *data++;
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
  f8:	b6 94       	lsr	r11
  fa:	a7 94       	ror	r10
  fc:	97 94       	ror	r9
  fe:	87 94       	ror	r8
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	c9 f6       	brne	.-78     	; 0xb8 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x44>
 106:	c8 cf       	rjmp	.-112    	; 0x98 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x24>
/media/D/Data/Powerwall/cellModule/b_functions.ino:20
      bool bit = crc & 0x80000000;
      if (c & i) {
        bit = !bit;
 108:	b7 01       	movw	r22, r14
 10a:	a6 01       	movw	r20, r12
 10c:	40 95       	com	r20
 10e:	50 95       	com	r21
 110:	60 95       	com	r22
 112:	70 95       	com	r23
 114:	dd cf       	rjmp	.-70     	; 0xd0 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]+0x5c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:29
        crc ^= 0x04c11db7;
      }
    }
  }
  return crc;
}
 116:	c7 01       	movw	r24, r14
 118:	b6 01       	movw	r22, r12
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	bf 90       	pop	r11
 124:	af 90       	pop	r10
 126:	9f 90       	pop	r9
 128:	8f 90       	pop	r8
 12a:	7f 90       	pop	r7
 12c:	6f 90       	pop	r6
 12e:	5f 90       	pop	r5
 130:	4f 90       	pop	r4
 132:	08 95       	ret

00000134 <digitalWrite.constprop.1>:
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:138
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
 134:	ea e3       	ldi	r30, 0x3A	; 58
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:139
  uint8_t bit = digitalPinToBitMask(pin);
 13a:	e4 e3       	ldi	r30, 0x34	; 52
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:140
  uint8_t port = digitalPinToPort(pin);
 140:	ee e2       	ldi	r30, 0x2E	; 46
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e4 91       	lpm	r30, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:143
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 146:	ee 23       	and	r30, r30
 148:	c1 f0       	breq	.+48     	; 0x17a <digitalWrite.constprop.1+0x46>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:147

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 14a:	22 23       	and	r18, r18
 14c:	29 f0       	breq	.+10     	; 0x158 <digitalWrite.constprop.1+0x24>
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
 14e:	21 30       	cpi	r18, 0x01	; 1
 150:	a9 f4       	brne	.+42     	; 0x17c <digitalWrite.constprop.1+0x48>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
 152:	2a b5       	in	r18, 0x2a	; 42
 154:	2f 77       	andi	r18, 0x7F	; 127
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
 156:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:149

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ec 5d       	subi	r30, 0xDC	; 220
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	a5 91       	lpm	r26, Z+
 164:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:151

  if (val == LOW) {
 166:	81 11       	cpse	r24, r1
 168:	1a c0       	rjmp	.+52     	; 0x19e <digitalWrite.constprop.1+0x6a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:152
    uint8_t oldSREG = SREG;
 16a:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:153
    cli();
 16c:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:154
    *out &= ~bit;
 16e:	2c 91       	ld	r18, X
 170:	e9 2f       	mov	r30, r25
 172:	e0 95       	com	r30
 174:	e2 23       	and	r30, r18
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
 176:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
 178:	8f bf       	out	0x3f, r24	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:162
  }
}
 17a:	08 95       	ret
turnOffPWM():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
 17c:	22 30       	cpi	r18, 0x02	; 2
 17e:	19 f4       	brne	.+6      	; 0x186 <digitalWrite.constprop.1+0x52>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
 180:	2a b5       	in	r18, 0x2a	; 42
 182:	2f 7d       	andi	r18, 0xDF	; 223
 184:	e8 cf       	rjmp	.-48     	; 0x156 <digitalWrite.constprop.1+0x22>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:106
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
 186:	23 30       	cpi	r18, 0x03	; 3
 188:	21 f4       	brne	.+8      	; 0x192 <digitalWrite.constprop.1+0x5e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:107
    cbi(TCCR1, COM1A1);
 18a:	20 b7       	in	r18, 0x30	; 48
 18c:	2f 7d       	andi	r18, 0xDF	; 223
 18e:	20 bf       	out	0x30, r18	; 48
 190:	e3 cf       	rjmp	.-58     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:120
    //cbi(TCCR1A, COM1B0);
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
 192:	24 30       	cpi	r18, 0x04	; 4
 194:	09 f7       	brne	.-62     	; 0x158 <digitalWrite.constprop.1+0x24>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:121
    cbi(GTCCR, COM1B1);
 196:	2c b5       	in	r18, 0x2c	; 44
 198:	2f 7d       	andi	r18, 0xDF	; 223
 19a:	2c bd       	out	0x2c, r18	; 44
 19c:	dd cf       	rjmp	.-70     	; 0x158 <digitalWrite.constprop.1+0x24>
digitalWrite.constprop.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:157
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 19e:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:158
    cli();
 1a0:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:159
    *out |= bit;
 1a2:	ec 91       	ld	r30, X
 1a4:	e9 2b       	or	r30, r25
 1a6:	e7 cf       	rjmp	.-50     	; 0x176 <digitalWrite.constprop.1+0x42>

000001a8 <micros>:
micros():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:181
  }

  unsigned long micros()
  {
    unsigned long m;
    uint8_t oldSREG = SREG, t;
 1a8:	3f b7       	in	r19, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:183

    cli();
 1aa:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:184
    m = millis_timer_overflow_count;
 1ac:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <millis_timer_overflow_count>
 1b0:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x1>
 1b4:	a0 91 d7 00 	lds	r26, 0x00D7	; 0x8000d7 <millis_timer_overflow_count+0x2>
 1b8:	b0 91 d8 00 	lds	r27, 0x00D8	; 0x8000d8 <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:186
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
 1bc:	22 b7       	in	r18, 0x32	; 50
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:201

  #if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR0 & _BV(TOV0)) && (t < 255))
      m++;
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
 1be:	08 b6       	in	r0, 0x38	; 56
 1c0:	01 fe       	sbrs	r0, 1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <micros+0x26>
 1c4:	2f 3f       	cpi	r18, 0xFF	; 255
 1c6:	19 f0       	breq	.+6      	; 0x1ce <micros+0x26>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:202
      m++;
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	a1 1d       	adc	r26, r1
 1cc:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:211
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
    if ((TIFR & _BV(TOV1)) && (t < 255))
      m++;
  #endif

    SREG = oldSREG;
 1ce:	3f bf       	out	0x3f, r19	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:218

  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
 1d0:	ba 2f       	mov	r27, r26
 1d2:	a9 2f       	mov	r26, r25
 1d4:	98 2f       	mov	r25, r24
 1d6:	88 27       	eor	r24, r24
 1d8:	bc 01       	movw	r22, r24
 1da:	cd 01       	movw	r24, r26
 1dc:	62 0f       	add	r22, r18
 1de:	71 1d       	adc	r23, r1
 1e0:	81 1d       	adc	r24, r1
 1e2:	91 1d       	adc	r25, r1
 1e4:	43 e0       	ldi	r20, 0x03	; 3
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	88 1f       	adc	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	4a 95       	dec	r20
 1f0:	d1 f7       	brne	.-12     	; 0x1e6 <micros+0x3e>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:266
      //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  }
 1f2:	08 95       	ret

000001f4 <usiTwiReceiveByte>:
usiTwiReceiveByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:443
)
{
  uint8_t rtn_byte;

  // wait for Rx data
  while ( !rxCount );
 1f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <rxCount>
 1f8:	88 23       	and	r24, r24
 1fa:	e1 f3       	breq	.-8      	; 0x1f4 <usiTwiReceiveByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:445

  rtn_byte = rxBuf [ rxTail ];
 1fc:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <rxTail>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e6 55       	subi	r30, 0x56	; 86
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:447
  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 208:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <rxTail>
 20c:	9f 5f       	subi	r25, 0xFF	; 255
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:448
  rxCount--;
 214:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <rxCount>
 218:	91 50       	subi	r25, 0x01	; 1
 21a:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:453

  // return data from the buffer.
  return rtn_byte;

} // end usiTwiReceiveByte
 21e:	08 95       	ret

00000220 <usiTwiTransmitByte>:
usiTwiTransmitByte():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:420
{

  uint8_t tmphead;

  // wait for free space in buffer
  while ( txCount == TWI_TX_BUFFER_SIZE) ;
 220:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <txCount>
 224:	90 31       	cpi	r25, 0x10	; 16
 226:	e1 f3       	breq	.-8      	; 0x220 <usiTwiTransmitByte>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:423

  // store data in buffer
  txBuf[ txHead ] = data;
 228:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <txHead>
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	e5 54       	subi	r30, 0x45	; 69
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:424
  txHead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 234:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <txHead>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:425
  txCount++;
 240:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <txCount>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:427

} // end usiTwiTransmitByte
 24a:	08 95       	ret

0000024c <usiTwiSlaveInit>:
usiTwiSlaveInit():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:333
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 24c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <rxTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:334
  rxHead = 0;
 250:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:335
  rxCount = 0;
 254:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:336
  txTail = 0;
 258:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:337
  txHead = 0;
 25c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <txHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:338
  txCount = 0;
 260:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:361
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
 264:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <slaveAddress>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:369
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 268:	87 b3       	in	r24, 0x17	; 23
 26a:	85 60       	ori	r24, 0x05	; 5
 26c:	87 bb       	out	0x17, r24	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:372

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 26e:	c2 9a       	sbi	0x18, 2	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:375

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 270:	c0 9a       	sbi	0x18, 0	; 24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:378

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 272:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:380

  USICR =
 274:	88 ea       	ldi	r24, 0xA8	; 168
 276:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:395
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 278:	80 ef       	ldi	r24, 0xF0	; 240
 27a:	8e b9       	out	0x0e, r24	; 14
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:397

} // end usiTwiSlaveInit
 27c:	08 95       	ret

0000027e <getVoltageMeasurement()>:
_Z21getVoltageMeasurementv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	20 e0       	ldi	r18, 0x00	; 0
/media/D/Data/Powerwall/cellModule/b_functions.ino:120
}


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	dc 01       	movw	r26, r24
/media/D/Data/Powerwall/cellModule/b_functions.ino:122
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
    sum += voltageBuff[k];
 288:	f9 01       	movw	r30, r18
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	e3 58       	subi	r30, 0x83	; 131
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	40 81       	ld	r20, Z
 294:	51 81       	ldd	r21, Z+1	; 0x01
 296:	84 0f       	add	r24, r20
 298:	95 1f       	adc	r25, r21
 29a:	a1 1d       	adc	r26, r1
 29c:	b1 1d       	adc	r27, r1
/media/D/Data/Powerwall/cellModule/b_functions.ino:121


float getVoltageMeasurement() {
  //Oversampling and take average of ADC samples use an unsigned integer
  uint32_t sum = 0;
  for (int k = 0; k < OVERSAMPLE_LOOP; k++) {
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
 2a2:	20 31       	cpi	r18, 0x10	; 16
 2a4:	31 05       	cpc	r19, r1
 2a6:	81 f7       	brne	.-32     	; 0x288 <getVoltageMeasurement()+0xa>
/media/D/Data/Powerwall/cellModule/b_functions.ino:127
    sum += voltageBuff[k];
  }
  //Shift the bits to match OVERSAMPLE_LOOP size (buffer size of 8=3 shifts, 16=4 shifts)
  //Assume perfect reference of 2560mV for reference - we will correct for this with voltageCalibration

  uint16_t raw = (uint16_t)(sum / OVERSAMPLE_LOOP);
 2a8:	24 e0       	ldi	r18, 0x04	; 4
 2aa:	b6 95       	lsr	r27
 2ac:	a7 95       	ror	r26
 2ae:	97 95       	ror	r25
 2b0:	87 95       	ror	r24
 2b2:	2a 95       	dec	r18
 2b4:	d1 f7       	brne	.-12     	; 0x2aa <getVoltageMeasurement()+0x2c>
/media/D/Data/Powerwall/cellModule/b_functions.ino:129

  return (uint16_t)((float)raw * currentConfig.voltageCalibration);
 2b6:	bc 01       	movw	r22, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	81 d5       	rcall	.+2818   	; 0xdc0 <__floatunsisf>
 2be:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
 2c2:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
 2c6:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
 2ca:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
 2ce:	02 d6       	rcall	.+3076   	; 0xed4 <__mulsf3>
 2d0:	4b d5       	rcall	.+2710   	; 0xd68 <__fixunssfsi>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	74 d5       	rcall	.+2792   	; 0xdc0 <__floatunsisf>
/media/D/Data/Powerwall/cellModule/b_functions.ino:130
}
 2d8:	08 95       	ret

000002da <readFloat()>:
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:97
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}

float readFloat() {
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
 2de:	8a df       	rcall	.-236    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:98
  float_to_bytes.b[0] = TinyWireS.receive();
 2e0:	c4 e7       	ldi	r28, 0x74	; 116
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	88 83       	st	Y, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 2e6:	86 df       	rcall	.-244    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:99
  float_to_bytes.b[1] = TinyWireS.receive();
 2e8:	89 83       	std	Y+1, r24	; 0x01
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 2ea:	84 df       	rcall	.-248    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:100
  float_to_bytes.b[2] = TinyWireS.receive();
 2ec:	8a 83       	std	Y+2, r24	; 0x02
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 2ee:	82 df       	rcall	.-252    	; 0x1f4 <usiTwiReceiveByte>
_Z9readFloatv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:101
  float_to_bytes.b[3] = TinyWireS.receive();
 2f0:	8b 83       	std	Y+3, r24	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:103

  return float_to_bytes.val;
 2f2:	68 81       	ld	r22, Y
 2f4:	79 81       	ldd	r23, Y+1	; 0x01
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	9b 81       	ldd	r25, Y+3	; 0x03
/media/D/Data/Powerwall/cellModule/b_functions.ino:104
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <sendFloat(float)>:
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:88

void sendByte(uint8_t number) {
  TinyWireS.send(number);
}

void sendFloat(float number) {
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	17 2f       	mov	r17, r23
 308:	d8 2f       	mov	r29, r24
 30a:	c9 2f       	mov	r28, r25
/media/D/Data/Powerwall/cellModule/b_functions.ino:89
  float_to_bytes.val = number;
 30c:	86 2f       	mov	r24, r22
 30e:	97 2f       	mov	r25, r23
 310:	ad 2f       	mov	r26, r29
 312:	bc 2f       	mov	r27, r28
 314:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 318:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 31c:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <__data_end+0x2>
 320:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <__data_end+0x3>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
void USI_TWI_S::begin(uint8_t slaveAddr){ // initialize I2C lib
  usiTwiSlaveInit(slaveAddr); 
}

void USI_TWI_S::send(uint8_t data){  // send it back to master
  usiTwiTransmitByte(data);
 324:	7d df       	rcall	.-262    	; 0x220 <usiTwiTransmitByte>
 326:	81 2f       	mov	r24, r17
 328:	7b df       	rcall	.-266    	; 0x220 <usiTwiTransmitByte>
 32a:	8d 2f       	mov	r24, r29
 32c:	79 df       	rcall	.-270    	; 0x220 <usiTwiTransmitByte>
 32e:	8c 2f       	mov	r24, r28
_Z9sendFloatf():
/media/D/Data/Powerwall/cellModule/b_functions.ino:95

  TinyWireS.send(float_to_bytes.b[0]);
  TinyWireS.send(float_to_bytes.b[1]);
  TinyWireS.send(float_to_bytes.b[2]);
  TinyWireS.send(float_to_bytes.b[3]);
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
 336:	74 cf       	rjmp	.-280    	; 0x220 <usiTwiTransmitByte>

00000338 <sendUnsignedInt(unsigned int)>:
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:79
  //Infinity
  while (1) {}
}


void sendUnsignedInt(uint16_t number) {
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
 33c:	89 2f       	mov	r24, r25
 33e:	70 df       	rcall	.-288    	; 0x220 <usiTwiTransmitByte>
 340:	8c 2f       	mov	r24, r28
_Z15sendUnsignedIntj():
/media/D/Data/Powerwall/cellModule/b_functions.ino:82
  TinyWireS.send((byte)((number >> 8) & 0xFF));
  TinyWireS.send((byte)(number & 0xFF));
}
 342:	cf 91       	pop	r28
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
 344:	6d cf       	rjmp	.-294    	; 0x220 <usiTwiTransmitByte>

00000346 <requestEvent()>:
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:4
//cellModule -> cellController
// function that executes whenever data is requested by master (this answers requestFrom command)
void requestEvent() {
  switch (cmdByte) {
 346:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <cmdByte>
 34a:	ea 50       	subi	r30, 0x0A	; 10
 34c:	e9 30       	cpi	r30, 0x09	; 9
 34e:	d8 f4       	brcc	.+54     	; 0x386 <requestEvent()+0x40>
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e4 55       	subi	r30, 0x54	; 84
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	09 94       	ijmp
 358:	08 c0       	rjmp	.+16     	; 0x36a <requestEvent()+0x24>
 35a:	29 c0       	rjmp	.+82     	; 0x3ae <requestEvent()+0x68>
 35c:	3b c0       	rjmp	.+118    	; 0x3d4 <requestEvent()+0x8e>
 35e:	44 c0       	rjmp	.+136    	; 0x3e8 <requestEvent()+0xa2>
 360:	18 c0       	rjmp	.+48     	; 0x392 <requestEvent()+0x4c>
 362:	1c c0       	rjmp	.+56     	; 0x39c <requestEvent()+0x56>
 364:	20 c0       	rjmp	.+64     	; 0x3a6 <requestEvent()+0x60>
 366:	05 c0       	rjmp	.+10     	; 0x372 <requestEvent()+0x2c>
 368:	48 c0       	rjmp	.+144    	; 0x3fa <requestEvent()+0xb4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:6
    case READOUT_voltage:
      if (bypassEnabled) {
 36a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <bypassEnabled>
 36e:	88 23       	and	r24, r24
 370:	29 f0       	breq	.+10     	; 0x37c <requestEvent()+0x36>
/media/D/Data/Powerwall/cellModule/c_comm.ino:14
        sendUnsignedInt(voltageMeasurement);
      }

      break;
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
 372:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <voltageMeasurement_bypass>
 376:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <voltageMeasurement_bypass+0x1>
 37a:	04 c0       	rjmp	.+8      	; 0x384 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:9
  switch (cmdByte) {
    case READOUT_voltage:
      if (bypassEnabled) {
        sendUnsignedInt(voltageMeasurement_bypass);
      } else {
        sendUnsignedInt(voltageMeasurement);
 37c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <voltageMeasurement>
 380:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <voltageMeasurement+0x1>
 384:	d9 df       	rcall	.-78     	; 0x338 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:51
      //Dont do anything - timeout
      break;
  }

  //Clear cmdByte
  cmdByte = 0;
 386:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:54

  //if this times out, master has stopped communicating with module
  i2cTmr = 80;//150
 38a:	80 e5       	ldi	r24, 0x50	; 80
 38c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/c_comm.ino:55
}
 390:	08 95       	ret
/media/D/Data/Powerwall/cellModule/c_comm.ino:18
    case READOUT_bypass_voltage_measurement:
      sendUnsignedInt(voltageMeasurement_bypass);
      break;
      
    case READOUT_raw_voltage:
      sendUnsignedInt(last_raw_adc);
 392:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <last_raw_adc>
 396:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <last_raw_adc+0x1>
 39a:	f4 cf       	rjmp	.-24     	; 0x384 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:22
      break;

    case READOUT_error_counter:
      sendUnsignedInt(error_counter);
 39c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <error_counter>
 3a0:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <error_counter+0x1>
 3a4:	ef cf       	rjmp	.-34     	; 0x384 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:26
      break;

    case READOUT_bypass_state:
      sendByte(bypassEnabled);
 3a6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <bypassEnabled>
send():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:38
 3aa:	3a df       	rcall	.-396    	; 0x220 <usiTwiTransmitByte>
 3ac:	ec cf       	rjmp	.-40     	; 0x386 <requestEvent()+0x40>
_Z12requestEventv():
/media/D/Data/Powerwall/cellModule/c_comm.ino:30
      break;

    case READOUT_temperature:
      sendUnsignedInt((uint16_t)((float)tempSensorValue * currentConfig.tempSensorCalibration));
 3ae:	60 91 9f 00 	lds	r22, 0x009F	; 0x80009f <tempSensorValue>
 3b2:	70 91 a0 00 	lds	r23, 0x00A0	; 0x8000a0 <tempSensorValue+0x1>
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	02 d5       	rcall	.+2564   	; 0xdc0 <__floatunsisf>
 3bc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
 3c0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
 3c4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
 3c8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
 3cc:	83 d5       	rcall	.+2822   	; 0xed4 <__mulsf3>
 3ce:	cc d4       	rcall	.+2456   	; 0xd68 <__fixunssfsi>
 3d0:	cb 01       	movw	r24, r22
 3d2:	d8 cf       	rjmp	.-80     	; 0x384 <requestEvent()+0x3e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:34
      break;

    case READOUT_voltage_calibration:
      sendFloat(currentConfig.voltageCalibration);
 3d4:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <currentConfig+0x1>
 3d8:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <currentConfig+0x2>
 3dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <currentConfig+0x3>
 3e0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:38
      break;

    case READOUT_temperature_calibration:
      sendFloat(currentConfig.tempSensorCalibration);
 3e4:	8d df       	rcall	.-230    	; 0x300 <sendFloat(float)>
 3e6:	cf cf       	rjmp	.-98     	; 0x386 <requestEvent()+0x40>
 3e8:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentConfig+0x5>
 3ec:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <currentConfig+0x6>
 3f0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <currentConfig+0x7>
 3f4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <currentConfig+0x8>
 3f8:	f5 cf       	rjmp	.-22     	; 0x3e4 <requestEvent()+0x9e>
/media/D/Data/Powerwall/cellModule/c_comm.ino:41
      break;
    case READOUT_burningCounter:
      sendUnsignedInt(iBurningCounter);
 3fa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <iBurningCounter>
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9b df       	rcall	.-202    	; 0x338 <sendUnsignedInt(unsigned int)>
/media/D/Data/Powerwall/cellModule/c_comm.ino:42
      iBurningCounter = 0;//resest after it is read
 402:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <iBurningCounter>
 406:	bf cf       	rjmp	.-130    	; 0x386 <requestEvent()+0x40>

00000408 <ledOFF()>:
_Z6ledOFFv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:8
  DDRB |= (1 << DDB1);
  PORTB |=  (1 << PB1);
}

inline void ledOFF() {
  DDRB |= (1 << DDB1);
 408:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:9
  PORTB &= ~(1 << PB1);
 40a:	c1 98       	cbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:10
}
 40c:	08 95       	ret

0000040e <ledON()>:
_Z5ledONv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:3

inline void ledON() {
  DDRB |= (1 << DDB1);
 40e:	b9 9a       	sbi	0x17, 1	; 23
/media/D/Data/Powerwall/cellModule/b_functions.ino:4
  PORTB |=  (1 << PB1);
 410:	c1 9a       	sbi	0x18, 1	; 24
/media/D/Data/Powerwall/cellModule/b_functions.ino:5
}
 412:	08 95       	ret

00000414 <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	ec 01       	movw	r28, r24
 420:	f6 2e       	mov	r15, r22
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 422:	08 81       	ld	r16, Y
 424:	19 81       	ldd	r17, Y+1	; 0x01
 426:	c8 01       	movw	r24, r16
 428:	85 d4       	rcall	.+2314   	; 0xd34 <eeprom_read_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 42a:	f8 16       	cp	r15, r24
 42c:	19 f0       	breq	.+6      	; 0x434 <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
 42e:	6f 2d       	mov	r22, r15
 430:	c8 01       	movw	r24, r16
 432:	88 d4       	rcall	.+2320   	; 0xd44 <eeprom_write_byte>
_ZN5EERef6updateEh():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
 434:	ce 01       	movw	r24, r28
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	08 95       	ret

00000442 <WriteConfigToEEPROM()>:
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:31
    }
  }
  return crc;
}

void WriteConfigToEEPROM() {
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <WriteConfigToEEPROM()+0xe>
 450:	00 d0       	rcall	.+0      	; 0x452 <WriteConfigToEEPROM()+0x10>
 452:	00 d0       	rcall	.+0      	; 0x454 <WriteConfigToEEPROM()+0x12>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	82 e6       	ldi	r24, 0x62	; 98
 45a:	e8 2e       	mov	r14, r24
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	f8 2e       	mov	r15, r24
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
 460:	04 e1       	ldi	r16, 0x14	; 20
 462:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
 464:	1a 83       	std	Y+2, r17	; 0x02
 466:	09 83       	std	Y+1, r16	; 0x01
 468:	f7 01       	movw	r30, r14
 46a:	61 91       	ld	r22, Z+
 46c:	7f 01       	movw	r14, r30
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	d0 df       	rcall	.-96     	; 0x414 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
 474:	0f 5f       	subi	r16, 0xFF	; 255
 476:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putI18cell_module_configEERKT_iS4_.isra.1():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
 478:	0d 31       	cpi	r16, 0x1D	; 29
 47a:	11 05       	cpc	r17, r1
 47c:	99 f7       	brne	.-26     	; 0x464 <WriteConfigToEEPROM()+0x22>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:33
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
 47e:	82 e6       	ldi	r24, 0x62	; 98
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	f8 dd       	rcall	.-1040   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
 484:	69 83       	std	Y+1, r22	; 0x01
 486:	7a 83       	std	Y+2, r23	; 0x02
 488:	8b 83       	std	Y+3, r24	; 0x03
 48a:	9c 83       	std	Y+4, r25	; 0x04
 48c:	8e 01       	movw	r16, r28
 48e:	0f 5f       	subi	r16, 0xFF	; 255
 490:	1f 4f       	sbci	r17, 0xFF	; 255
 492:	f1 2c       	mov	r15, r1
 494:	e1 2c       	mov	r14, r1
_ZN11EEPROMClass3putImEERKT_iS3_.isra.2():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
 496:	fe 82       	std	Y+6, r15	; 0x06
 498:	ed 82       	std	Y+5, r14	; 0x05
 49a:	f8 01       	movw	r30, r16
 49c:	61 91       	ld	r22, Z+
 49e:	8f 01       	movw	r16, r30
 4a0:	ce 01       	movw	r24, r28
 4a2:	05 96       	adiw	r24, 0x05	; 5
 4a4:	b7 df       	rcall	.-146    	; 0x414 <EERef::update(unsigned char)>
 4a6:	ff ef       	ldi	r31, 0xFF	; 255
 4a8:	ef 1a       	sub	r14, r31
 4aa:	ff 0a       	sbc	r15, r31
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	e8 16       	cp	r14, r24
 4b0:	f1 04       	cpc	r15, r1
 4b2:	89 f7       	brne	.-30     	; 0x496 <WriteConfigToEEPROM()+0x54>
_Z19WriteConfigToEEPROMv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:34
}
 4b4:	26 96       	adiw	r28, 0x06	; 6
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <receiveEvent(unsigned char)>:
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:65
 * The I2C data received handler
 *
 * This needs to complete before the next incoming transaction (start, data, restart/stop) on the bus does
 * so be quick, set flags for long running tasks to be called from the mainloop instead of running them directly
 */
void receiveEvent(uint8_t bytesCnt) {
 4ce:	cf 92       	push	r12
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	00 d0       	rcall	.+0      	; 0x4de <receiveEvent(unsigned char)+0x10>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
/media/D/Data/Powerwall/cellModule/c_comm.ino:66
  if (bytesCnt <= 0) return;
 4e2:	88 23       	and	r24, r24
 4e4:	a1 f1       	breq	.+104    	; 0x54e <receiveEvent(unsigned char)+0x80>
/media/D/Data/Powerwall/cellModule/c_comm.ino:70

  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;
 4e6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <cmdByte>
 4ea:	99 23       	and	r25, r25
 4ec:	51 f0       	breq	.+20     	; 0x502 <receiveEvent(unsigned char)+0x34>
 4ee:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <error_counter>
 4f2:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <error_counter+0x1>
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	30 93 dd 00 	sts	0x00DD, r19	; 0x8000dd <error_counter+0x1>
 4fe:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <error_counter>
 502:	18 2f       	mov	r17, r24
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
  return usiTwiAmountDataInReceiveBuffer(); 
  //return usiTwiDataInReceiveBuffer(); // This is wrong as far as the Wire API is concerned since it returns boolean and not amount
}
 
uint8_t USI_TWI_S::receive(){ // returns the bytes received one at a time
  return usiTwiReceiveByte(); 
 504:	77 de       	rcall	.-786    	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:72

  cmdByte = TinyWireS.receive();
 506:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:76
  bytesCnt--;

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {
 50a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <cmdByte>
 50e:	86 ff       	sbrs	r24, 6
 510:	b8 c0       	rjmp	.+368    	; 0x682 <receiveEvent(unsigned char)+0x1b4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:73
  //If cmdByte is not zero then something went wrong in the i2c comms,
  //master failed to request any data after command
  if (cmdByte != 0) error_counter++;

  cmdByte = TinyWireS.receive();
  bytesCnt--;
 512:	11 50       	subi	r17, 0x01	; 1
/media/D/Data/Powerwall/cellModule/c_comm.ino:78

  //Is it a command
  if (bitRead(cmdByte, COMMAND_BIT)) {

    bitClear(cmdByte, COMMAND_BIT);
 514:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <cmdByte>
 518:	9f 7b       	andi	r25, 0xBF	; 191
 51a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:80

    switch (cmdByte) {
 51e:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <cmdByte>
 522:	e1 50       	subi	r30, 0x01	; 1
 524:	e8 30       	cpi	r30, 0x08	; 8
 526:	88 f4       	brcc	.+34     	; 0x54a <receiveEvent(unsigned char)+0x7c>
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	e8 56       	subi	r30, 0x68	; 104
 52c:	fd 4f       	sbci	r31, 0xFD	; 253
 52e:	09 94       	ijmp
 530:	07 c0       	rjmp	.+14     	; 0x540 <receiveEvent(unsigned char)+0x72>
 532:	0b c0       	rjmp	.+22     	; 0x54a <receiveEvent(unsigned char)+0x7c>
 534:	16 c0       	rjmp	.+44     	; 0x562 <receiveEvent(unsigned char)+0x94>
 536:	93 c0       	rjmp	.+294    	; 0x65e <receiveEvent(unsigned char)+0x190>
 538:	8f c0       	rjmp	.+286    	; 0x658 <receiveEvent(unsigned char)+0x18a>
 53a:	22 c0       	rjmp	.+68     	; 0x580 <receiveEvent(unsigned char)+0xb2>
 53c:	3b c0       	rjmp	.+118    	; 0x5b4 <receiveEvent(unsigned char)+0xe6>
 53e:	54 c0       	rjmp	.+168    	; 0x5e8 <receiveEvent(unsigned char)+0x11a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:82
      case COMMAND_green_led_pattern:
        if (bytesCnt == 1) {
 540:	11 30       	cpi	r17, 0x01	; 1
 542:	19 f4       	brne	.+6      	; 0x54a <receiveEvent(unsigned char)+0x7c>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 544:	57 de       	rcall	.-850    	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:83
          green_pattern = TinyWireS.receive();
 546:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:152
        }
        break;

    }

    cmdByte = 0;
 54a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <cmdByte>
/media/D/Data/Powerwall/cellModule/c_comm.ino:164
        ledFlash = true;
        break;
    }
  }

}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	08 95       	ret
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:155
 562:	1a 82       	std	Y+2, r1	; 0x02
 564:	19 82       	std	Y+1, r1	; 0x01
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	53 df       	rcall	.-346    	; 0x414 <EERef::update(unsigned char)>
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	9a 83       	std	Y+2, r25	; 0x02
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	4b df       	rcall	.-362    	; 0x414 <EERef::update(unsigned char)>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:145
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
            currentConfig.SLAVE_ADDR = newAddress;
            WriteConfigToEEPROM();
            Reboot();
 57e:	97 d2       	rcall	.+1326   	; 0xaae <Reboot()>
/media/D/Data/Powerwall/cellModule/c_comm.ino:97
        factory_default();
        Reboot();
        break;

      case COMMAND_set_voltage_calibration:
        if (bytesCnt == sizeof(float)) {
 580:	14 30       	cpi	r17, 0x04	; 4
 582:	19 f7       	brne	.-58     	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:98
          float newValue = readFloat();
 584:	aa de       	rcall	.-684    	; 0x2da <readFloat()>
 586:	6b 01       	movw	r12, r22
 588:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:100
          //Only accept if its different
          if (newValue != currentConfig.voltageCalibration) {
 58a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <currentConfig+0x1>
 58e:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <currentConfig+0x2>
 592:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentConfig+0x3>
 596:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <currentConfig+0x4>
 59a:	e2 d3       	rcall	.+1988   	; 0xd60 <__cmpsf2>
 59c:	88 23       	and	r24, r24
 59e:	a9 f2       	breq	.-86     	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:101
            currentConfig.voltageCalibration = newValue;
 5a0:	c0 92 63 00 	sts	0x0063, r12	; 0x800063 <currentConfig+0x1>
 5a4:	d0 92 64 00 	sts	0x0064, r13	; 0x800064 <currentConfig+0x2>
 5a8:	e0 92 65 00 	sts	0x0065, r14	; 0x800065 <currentConfig+0x3>
 5ac:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <currentConfig+0x4>
/media/D/Data/Powerwall/cellModule/c_comm.ino:113
        if (bytesCnt == sizeof(float)) {
          float newValue = readFloat();
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
            currentConfig.tempSensorCalibration = newValue;
            WriteConfigToEEPROM();
 5b0:	48 df       	rcall	.-368    	; 0x442 <WriteConfigToEEPROM()>
 5b2:	cb cf       	rjmp	.-106    	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:108
          }
        }
        break;

      case COMMAND_set_temperature_calibration:
        if (bytesCnt == sizeof(float)) {
 5b4:	14 30       	cpi	r17, 0x04	; 4
 5b6:	49 f6       	brne	.-110    	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:109
          float newValue = readFloat();
 5b8:	90 de       	rcall	.-736    	; 0x2da <readFloat()>
 5ba:	6b 01       	movw	r12, r22
 5bc:	7c 01       	movw	r14, r24
/media/D/Data/Powerwall/cellModule/c_comm.ino:111
          //Only accept if its different
          if (newValue != currentConfig.tempSensorCalibration) {
 5be:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentConfig+0x5>
 5c2:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <currentConfig+0x6>
 5c6:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <currentConfig+0x7>
 5ca:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <currentConfig+0x8>
 5ce:	c8 d3       	rcall	.+1936   	; 0xd60 <__cmpsf2>
 5d0:	88 23       	and	r24, r24
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <receiveEvent(unsigned char)+0x108>
 5d4:	ba cf       	rjmp	.-140    	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:112
            currentConfig.tempSensorCalibration = newValue;
 5d6:	c0 92 67 00 	sts	0x0067, r12	; 0x800067 <currentConfig+0x5>
 5da:	d0 92 68 00 	sts	0x0068, r13	; 0x800068 <currentConfig+0x6>
 5de:	e0 92 69 00 	sts	0x0069, r14	; 0x800069 <currentConfig+0x7>
 5e2:	f0 92 6a 00 	sts	0x006A, r15	; 0x80006a <currentConfig+0x8>
 5e6:	e4 cf       	rjmp	.-56     	; 0x5b0 <receiveEvent(unsigned char)+0xe2>
/media/D/Data/Powerwall/cellModule/c_comm.ino:119
          }
        }
        break;

      case COMMAND_set_bypass_voltage:
        if (bytesCnt == sizeof(uint16_t)) {
 5e8:	12 30       	cpi	r17, 0x02	; 2
 5ea:	09 f0       	breq	.+2      	; 0x5ee <receiveEvent(unsigned char)+0x120>
 5ec:	ae cf       	rjmp	.-164    	; 0x54a <receiveEvent(unsigned char)+0x7c>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 5ee:	02 de       	rcall	.-1020   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:106
  float_to_bytes.b[3] = TinyWireS.receive();

  return float_to_bytes.val;
}
uint16_t readUINT16() {
  uint16_t_to_bytes.b[0] = TinyWireS.receive();
 5f0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <uint16_t_to_bytes>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 5f4:	ff dd       	rcall	.-1026   	; 0x1f4 <usiTwiReceiveByte>
readUINT16():
/media/D/Data/Powerwall/cellModule/b_functions.ino:107
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
 5f6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <uint16_t_to_bytes+0x1>
/media/D/Data/Powerwall/cellModule/b_functions.ino:108
  return uint16_t_to_bytes.val;
 5fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <uint16_t_to_bytes>
 5fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <uint16_t_to_bytes+0x1>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:122
          uint16_t newValue = readUINT16();
          //Only accept if its a realistic value and the value is LESS than the last voltage reading
          if (newValue >= MIN_BYPASS_VOLTAGE && newValue <= MAX_BYPASS_VOLTAGE && newValue < voltageMeasurement) {
 602:	9c 01       	movw	r18, r24
 604:	2c 52       	subi	r18, 0x2C	; 44
 606:	31 40       	sbci	r19, 0x01	; 1
 608:	29 37       	cpi	r18, 0x79	; 121
 60a:	31 05       	cpc	r19, r1
 60c:	e8 f4       	brcc	.+58     	; 0x648 <receiveEvent(unsigned char)+0x17a>
 60e:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <voltageMeasurement>
 612:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <voltageMeasurement+0x1>
 616:	82 17       	cp	r24, r18
 618:	93 07       	cpc	r25, r19
 61a:	b0 f4       	brcc	.+44     	; 0x648 <receiveEvent(unsigned char)+0x17a>
/media/D/Data/Powerwall/cellModule/c_comm.ino:123
            targetBypassVoltage = newValue;
 61c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <targetBypassVoltage+0x1>
 620:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/c_comm.ino:124
            voltageMeasurement_bypass = voltageMeasurement;//init bypass voltage
 624:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <voltageMeasurement>
 628:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <voltageMeasurement+0x1>
 62c:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <voltageMeasurement_bypass+0x1>
 630:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/c_comm.ino:125
            bypassCnt = BYPASS_COUNTER_MAX;
 634:	80 ef       	ldi	r24, 0xF0	; 240
 636:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <bypassCnt>
/media/D/Data/Powerwall/cellModule/c_comm.ino:126
            green_pattern = GREEN_LED_PATTERN_BYPASS;
 63a:	8c e6       	ldi	r24, 0x6C	; 108
 63c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/c_comm.ino:127
            bypassEnabled = true;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <bypassEnabled>
 646:	81 cf       	rjmp	.-254    	; 0x54a <receiveEvent(unsigned char)+0x7c>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
}

void bypass_off() {
  targetBypassVoltage = 0;
 648:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <targetBypassVoltage+0x1>
 64c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
 650:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
 654:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <bypassEnabled>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:131
          } else {
            //Disable
            bypass_off();
            green_pattern = GREEN_LED_PATTERN_STANDARD;
 658:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 65c:	76 cf       	rjmp	.-276    	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:139
        break;


      case COMMAND_set_slave_address:
        //Set i2c slave address and write to EEPROM, then reboot
        if (bytesCnt == 1 ) {
 65e:	11 30       	cpi	r17, 0x01	; 1
 660:	09 f0       	breq	.+2      	; 0x664 <receiveEvent(unsigned char)+0x196>
 662:	73 cf       	rjmp	.-282    	; 0x54a <receiveEvent(unsigned char)+0x7c>
receive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:47
 664:	c7 dd       	rcall	.-1138   	; 0x1f4 <usiTwiReceiveByte>
_Z12receiveEventh():
/media/D/Data/Powerwall/cellModule/c_comm.ino:142
          uint8_t newAddress = TinyWireS.receive();
          //Only accept if its a different address
          if (newAddress != currentConfig.SLAVE_ADDR && newAddress >= SLAVE_ADDR_START_RANGE && newAddress <= SLAVE_ADDR_END_RANGE) {
 666:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <currentConfig>
 66a:	98 17       	cp	r25, r24
 66c:	09 f4       	brne	.+2      	; 0x670 <receiveEvent(unsigned char)+0x1a2>
 66e:	6d cf       	rjmp	.-294    	; 0x54a <receiveEvent(unsigned char)+0x7c>
 670:	98 ee       	ldi	r25, 0xE8	; 232
 672:	98 0f       	add	r25, r24
 674:	9d 30       	cpi	r25, 0x0D	; 13
 676:	08 f0       	brcs	.+2      	; 0x67a <receiveEvent(unsigned char)+0x1ac>
 678:	68 cf       	rjmp	.-304    	; 0x54a <receiveEvent(unsigned char)+0x7c>
/media/D/Data/Powerwall/cellModule/c_comm.ino:143
            currentConfig.SLAVE_ADDR = newAddress;
 67a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/c_comm.ino:144
            WriteConfigToEEPROM();
 67e:	e1 de       	rcall	.-574    	; 0x442 <WriteConfigToEEPROM()>
 680:	7e cf       	rjmp	.-260    	; 0x57e <receiveEvent(unsigned char)+0xb0>
/media/D/Data/Powerwall/cellModule/c_comm.ino:156

    cmdByte = 0;
  } else {
    //Its a READ request

    switch (cmdByte) {
 682:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <cmdByte>
 686:	8a 30       	cpi	r24, 0x0A	; 10
 688:	09 f0       	breq	.+2      	; 0x68c <receiveEvent(unsigned char)+0x1be>
 68a:	61 cf       	rjmp	.-318    	; 0x54e <receiveEvent(unsigned char)+0x80>
/media/D/Data/Powerwall/cellModule/c_comm.ino:158
      case READOUT_voltage:
        voltageMeasurement = getVoltageMeasurement();
 68c:	f8 dd       	rcall	.-1040   	; 0x27e <getVoltageMeasurement()>
 68e:	6c d3       	rcall	.+1752   	; 0xd68 <__fixunssfsi>
 690:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <voltageMeasurement+0x1>
 694:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <voltageMeasurement>
/media/D/Data/Powerwall/cellModule/c_comm.ino:159
        ledFlash = true;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <ledFlash>
 69e:	57 cf       	rjmp	.-338    	; 0x54e <receiveEvent(unsigned char)+0x80>

000006a0 <__vector_5>:
__vector_5():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:139
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:142
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
 6b6:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <millis_timer_millis>
 6ba:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <millis_timer_millis+0x1>
 6be:	a0 91 d3 00 	lds	r26, 0x00D3	; 0x8000d3 <millis_timer_millis+0x2>
 6c2:	b0 91 d4 00 	lds	r27, 0x00D4	; 0x8000d4 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:143
    unsigned char f = millis_timer_fract;
 6c6:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:145

    f += FRACT_INC;
 6ca:	26 e0       	ldi	r18, 0x06	; 6
 6cc:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:147

    if (f >= FRACT_MAX)
 6ce:	2d 37       	cpi	r18, 0x7D	; 125
 6d0:	68 f1       	brcs	.+90     	; 0x72c <__vector_5+0x8c>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:149
    {
      f -= FRACT_MAX;
 6d2:	29 e8       	ldi	r18, 0x89	; 137
 6d4:	23 0f       	add	r18, r19
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:151
    m += 1;
      m += MILLIS_INC;
 6d6:	03 96       	adiw	r24, 0x03	; 3
 6d8:	a1 1d       	adc	r26, r1
 6da:	b1 1d       	adc	r27, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:158
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
 6dc:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <millis_timer_fract>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:159
    millis_timer_millis = m;
 6e0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <millis_timer_millis>
 6e4:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <millis_timer_millis+0x1>
 6e8:	a0 93 d3 00 	sts	0x00D3, r26	; 0x8000d3 <millis_timer_millis+0x2>
 6ec:	b0 93 d4 00 	sts	0x00D4, r27	; 0x8000d4 <millis_timer_millis+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:160
    millis_timer_overflow_count++;
 6f0:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <millis_timer_overflow_count>
 6f4:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x1>
 6f8:	a0 91 d7 00 	lds	r26, 0x00D7	; 0x8000d7 <millis_timer_overflow_count+0x2>
 6fc:	b0 91 d8 00 	lds	r27, 0x00D8	; 0x8000d8 <millis_timer_overflow_count+0x3>
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	a1 1d       	adc	r26, r1
 704:	b1 1d       	adc	r27, r1
 706:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <millis_timer_overflow_count>
 70a:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <millis_timer_overflow_count+0x1>
 70e:	a0 93 d7 00 	sts	0x00D7, r26	; 0x8000d7 <millis_timer_overflow_count+0x2>
 712:	b0 93 d8 00 	sts	0x00D8, r27	; 0x8000d8 <millis_timer_overflow_count+0x3>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:162

  }
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	3f 91       	pop	r19
 720:	2f 91       	pop	r18
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0
 728:	1f 90       	pop	r1
 72a:	18 95       	reti
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:155
    m += 1;
      m += MILLIS_INC;
    }
    else
    {
      m += MILLIS_INC;
 72c:	02 96       	adiw	r24, 0x02	; 2
 72e:	a1 1d       	adc	r26, r1
 730:	b1 1d       	adc	r27, r1
 732:	d4 cf       	rjmp	.-88     	; 0x6dc <__vector_5+0x3c>

00000734 <__vector_14>:
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:564
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566

  switch ( overflowState )
 756:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <overflowState>
 75a:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <overflowState+0x1>
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	91 05       	cpc	r25, r1
 762:	09 f4       	brne	.+2      	; 0x766 <__vector_14+0x32>
 764:	8b c0       	rjmp	.+278    	; 0x87c <__vector_14+0x148>
 766:	b0 f4       	brcc	.+44     	; 0x794 <__vector_14+0x60>
 768:	00 97       	sbiw	r24, 0x00	; 0
 76a:	a9 f1       	breq	.+106    	; 0x7d6 <__vector_14+0xa2>
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	09 f4       	brne	.+2      	; 0x772 <__vector_14+0x3e>
 770:	60 c0       	rjmp	.+192    	; 0x832 <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:659
      SET_USI_TO_SEND_ACK( );
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:566
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
 794:	84 30       	cpi	r24, 0x04	; 4
 796:	91 05       	cpc	r25, r1
 798:	09 f4       	brne	.+2      	; 0x79c <__vector_14+0x68>
 79a:	7a c0       	rjmp	.+244    	; 0x890 <__vector_14+0x15c>
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <__vector_14+0x6c>
 79e:	43 c0       	rjmp	.+134    	; 0x826 <__vector_14+0xf2>
 7a0:	05 97       	sbiw	r24, 0x05	; 5
 7a2:	39 f7       	brne	.-50     	; 0x772 <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:643
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // check buffer size
      if ( rxCount < TWI_RX_BUFFER_SIZE )
 7a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <rxCount>
 7a8:	80 31       	cpi	r24, 0x10	; 16
 7aa:	90 f4       	brcc	.+36     	; 0x7d0 <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:645
      {
        rxBuf[ rxHead ] = USIDR;
 7ac:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <rxHead>
 7b0:	8f b1       	in	r24, 0x0f	; 15
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	e6 55       	subi	r30, 0x56	; 86
 7b6:	ff 4f       	sbci	r31, 0xFF	; 255
 7b8:	80 83       	st	Z, r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:646
        rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 7ba:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <rxHead>
 7be:	8f 5f       	subi	r24, 0xFF	; 255
 7c0:	8f 70       	andi	r24, 0x0F	; 15
 7c2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <rxHead>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:647
        rxCount++;
 7c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <rxCount>
 7ca:	8f 5f       	subi	r24, 0xFF	; 255
 7cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <rxCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	21 c0       	rjmp	.+66     	; 0x818 <__vector_14+0xe4>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:572
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 7d6:	8f b1       	in	r24, 0x0f	; 15
 7d8:	88 23       	and	r24, r24
 7da:	31 f0       	breq	.+12     	; 0x7e8 <__vector_14+0xb4>
 7dc:	8f b1       	in	r24, 0x0f	; 15
 7de:	86 95       	lsr	r24
 7e0:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <slaveAddress>
 7e4:	89 13       	cpse	r24, r25
 7e6:	22 c0       	rjmp	.+68     	; 0x82c <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:574
      {
        if ( USIDR & 0x01 )
 7e8:	78 9b       	sbis	0x0f, 0	; 15
 7ea:	f2 cf       	rjmp	.-28     	; 0x7d0 <__vector_14+0x9c>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
        {
          USI_REQUEST_CALLBACK();
 7ec:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <usi_onReceiverPtr>
 7f0:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <usi_onReceiverPtr+0x1>
 7f4:	30 97       	sbiw	r30, 0x00	; 0
 7f6:	39 f0       	breq	.+14     	; 0x806 <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
 7f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
 7fc:	88 23       	and	r24, r24
 7fe:	19 f0       	breq	.+6      	; 0x806 <__vector_14+0xd2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
 800:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <rxCount>
__vector_14():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:576
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
      {
        if ( USIDR & 0x01 )
        {
          USI_REQUEST_CALLBACK();
 804:	09 95       	icall
 806:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <usi_onRequestPtr>
 80a:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <usi_onRequestPtr+0x1>
 80e:	30 97       	sbiw	r30, 0x00	; 0
 810:	09 f0       	breq	.+2      	; 0x814 <__vector_14+0xe0>
 812:	09 95       	icall
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:577
          overflowState = USI_SLAVE_SEND_DATA;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:653
      } else {
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 818:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <overflowState+0x1>
 81c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
      SET_USI_TO_SEND_ACK( );
 820:	1f b8       	out	0x0f, r1	; 15
 822:	b8 9a       	sbi	0x17, 0	; 23
 824:	33 c0       	rjmp	.+102    	; 0x88c <__vector_14+0x158>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:594
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 826:	8f b1       	in	r24, 0x0f	; 15
 828:	88 23       	and	r24, r24
 82a:	19 f0       	breq	.+6      	; 0x832 <__vector_14+0xfe>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:617
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 82c:	88 ea       	ldi	r24, 0xA8	; 168
 82e:	8d b9       	out	0x0d, r24	; 13
 830:	1d c0       	rjmp	.+58     	; 0x86c <__vector_14+0x138>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:607

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txCount )
 832:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <txCount>
 836:	88 23       	and	r24, r24
 838:	e1 f0       	breq	.+56     	; 0x872 <__vector_14+0x13e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:609
      {
        USIDR = txBuf[ txTail ];
 83a:	e0 91 cb 00 	lds	r30, 0x00CB	; 0x8000cb <txTail>
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	e5 54       	subi	r30, 0x45	; 69
 842:	ff 4f       	sbci	r31, 0xFF	; 255
 844:	80 81       	ld	r24, Z
 846:	8f b9       	out	0x0f, r24	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:610
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 848:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <txTail>
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	8f 70       	andi	r24, 0x0F	; 15
 850:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <txTail>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:611
        txCount--;
 854:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <txCount>
 858:	81 50       	subi	r24, 0x01	; 1
 85a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <txCount>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:620
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <overflowState+0x1>
 866:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:621
      SET_USI_TO_SEND_DATA( );
 86a:	b8 9a       	sbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
      SET_USI_TO_READ_DATA( );
 86c:	80 e7       	ldi	r24, 0x70	; 112
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
 86e:	8e b9       	out	0x0e, r24	; 14
 870:	80 cf       	rjmp	.-256    	; 0x772 <__vector_14+0x3e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:616
        txCount--;
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
 872:	b8 98       	cbi	0x17, 0	; 23
 874:	1f b8       	out	0x0f, r1	; 15
 876:	8e e7       	ldi	r24, 0x7E	; 126
 878:	8e b9       	out	0x0e, r24	; 14
 87a:	d8 cf       	rjmp	.-80     	; 0x82c <__vector_14+0xf8>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:627
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 87c:	83 e0       	ldi	r24, 0x03	; 3
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <overflowState+0x1>
 884:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:628
      SET_USI_TO_READ_ACK( );
 888:	b8 98       	cbi	0x17, 0	; 23
 88a:	1f b8       	out	0x0f, r1	; 15
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:654
        // overrun
        // drop data
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
      SET_USI_TO_SEND_ACK( );
 88c:	8e e7       	ldi	r24, 0x7E	; 126
 88e:	ef cf       	rjmp	.-34     	; 0x86e <__vector_14+0x13a>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:634
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 890:	85 e0       	ldi	r24, 0x05	; 5
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <overflowState+0x1>
 898:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:635
      SET_USI_TO_READ_DATA( );
 89c:	b8 98       	cbi	0x17, 0	; 23
 89e:	e6 cf       	rjmp	.-52     	; 0x86c <__vector_14+0x138>

000008a0 <__vector_13>:
__vector_13():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:472
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	8f 93       	push	r24
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:484
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 8ac:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <overflowState+0x1>
 8b0:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <overflowState>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:487

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 8b4:	b8 98       	cbi	0x17, 0	; 23
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:494
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 8b6:	b2 9b       	sbis	0x16, 2	; 22
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__vector_13+0x1e>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:496
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 8ba:	b0 9b       	sbis	0x16, 0	; 22
 8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <__vector_13+0x16>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:502
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 8be:	b0 99       	sbic	0x16, 0	; 22
 8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <__vector_13+0x36>
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:507
  {

    // a Stop Condition did not occur

    USICR =
 8c2:	88 ef       	ldi	r24, 0xF8	; 248
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
 8c4:	8d b9       	out	0x0d, r24	; 13
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:540
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 8c6:	80 ef       	ldi	r24, 0xF0	; 240
 8c8:	8e b9       	out	0x0e, r24	; 14
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:549
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
 8ca:	8f 91       	pop	r24
 8cc:	0f 90       	pop	r0
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	0f 90       	pop	r0
 8d2:	1f 90       	pop	r1
 8d4:	18 95       	reti
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:525
  }
  else
  {
    // a Stop Condition did occur

    USICR =
 8d6:	88 ea       	ldi	r24, 0xA8	; 168
 8d8:	f5 cf       	rjmp	.-22     	; 0x8c4 <__vector_13+0x24>

000008da <__vector_3>:
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:42
  }
}


ISR(TIMER1_COMPA_vect) // timer interrupt
{
 8da:	1f 92       	push	r1
 8dc:	0f 92       	push	r0
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	0f 92       	push	r0
 8e2:	11 24       	eor	r1, r1
 8e4:	2f 93       	push	r18
 8e6:	3f 93       	push	r19
 8e8:	4f 93       	push	r20
 8ea:	5f 93       	push	r21
 8ec:	6f 93       	push	r22
 8ee:	7f 93       	push	r23
 8f0:	8f 93       	push	r24
 8f2:	9f 93       	push	r25
 8f4:	af 93       	push	r26
 8f6:	bf 93       	push	r27
 8f8:	ef 93       	push	r30
 8fa:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/z_main.ino:44

  if (i2cTmr > 0) {
 8fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
 900:	88 23       	and	r24, r24
 902:	29 f0       	breq	.+10     	; 0x90e <__vector_3+0x34>
/media/D/Data/Powerwall/cellModule/z_main.ino:46
    //Count down loop for requests to see if i2c bus hangs or controller stops talking
    i2cTmr--;
 904:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
 908:	81 50       	subi	r24, 0x01	; 1
 90a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i2cTmr>
/media/D/Data/Powerwall/cellModule/z_main.ino:50
  }
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
 90e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 912:	81 11       	cpse	r24, r1
 914:	60 c0       	rjmp	.+192    	; 0x9d6 <__vector_3+0xfc>
/media/D/Data/Powerwall/cellModule/z_main.ino:51
    if (ledFlash)  {
 916:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <ledFlash>
 91a:	88 23       	and	r24, r24
 91c:	09 f4       	brne	.+2      	; 0x920 <__vector_3+0x46>
 91e:	59 c0       	rjmp	.+178    	; 0x9d2 <__vector_3+0xf8>
/media/D/Data/Powerwall/cellModule/z_main.ino:52
      ledON();
 920:	76 dd       	rcall	.-1300   	; 0x40e <ledON()>
/media/D/Data/Powerwall/cellModule/z_main.ino:54
    }else ledOFF();
    ledFlash = false;
 922:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <ledFlash>
/media/D/Data/Powerwall/cellModule/z_main.ino:66
      ledOFF();
    }
  }
  ///////////////////////////////////////////////////
  
  if (bypassEnabled) {// burning energy in resistor
 926:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <bypassEnabled>
 92a:	88 23       	and	r24, r24
 92c:	09 f4       	brne	.+2      	; 0x930 <__vector_3+0x56>
 92e:	6a c0       	rjmp	.+212    	; 0xa04 <__vector_3+0x12a>
/media/D/Data/Powerwall/cellModule/z_main.ino:67
    if(iBurningCounter<65535)iBurningCounter++;//counting burned Wh, reset by reading
 930:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <iBurningCounter>
 934:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <iBurningCounter>
 938:	8f 5f       	subi	r24, 0xFF	; 255
 93a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <iBurningCounter>
/media/D/Data/Powerwall/cellModule/z_main.ino:69
    
    if (bypassCnt == 0 && voltageBufferReady) {
 93e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <bypassCnt>
 942:	81 11       	cpse	r24, r1
 944:	20 c0       	rjmp	.+64     	; 0x986 <__vector_3+0xac>
 946:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <voltageBufferReady>
 94a:	88 23       	and	r24, r24
 94c:	e1 f0       	breq	.+56     	; 0x986 <__vector_3+0xac>
/media/D/Data/Powerwall/cellModule/z_main.ino:71
      //We are in bypass and just filled in whole buffer with voltage measurements
      voltageMeasurement_bypass = getVoltageMeasurement();
 94e:	97 dc       	rcall	.-1746   	; 0x27e <getVoltageMeasurement()>
 950:	0b d2       	rcall	.+1046   	; 0xd68 <__fixunssfsi>
 952:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <voltageMeasurement_bypass+0x1>
 956:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <voltageMeasurement_bypass>
/media/D/Data/Powerwall/cellModule/z_main.ino:73

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
 95a:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <targetBypassVoltage>
 95e:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <targetBypassVoltage+0x1>
 962:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <voltageMeasurement_bypass>
 966:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <voltageMeasurement_bypass+0x1>
 96a:	28 17       	cp	r18, r24
 96c:	39 07       	cpc	r19, r25
 96e:	08 f4       	brcc	.+2      	; 0x972 <__vector_3+0x98>
 970:	45 c0       	rjmp	.+138    	; 0x9fc <__vector_3+0x122>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
 972:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <targetBypassVoltage+0x1>
 976:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
 97a:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
 97e:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <bypassEnabled>
__vector_3():
/media/D/Data/Powerwall/cellModule/z_main.ino:75
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
 982:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:81
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
      }
    }

    if (bypassCnt > 0)
 986:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <bypassCnt>
 98a:	88 23       	and	r24, r24
 98c:	81 f0       	breq	.+32     	; 0x9ae <__vector_3+0xd4>
/media/D/Data/Powerwall/cellModule/z_main.ino:84
    {
      //We are in ACTIVE BYPASS mode -> BURNING ENERGY in resistor
      bypassCnt--;
 98e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <bypassCnt>
 992:	81 50       	subi	r24, 0x01	; 1
 994:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <bypassCnt>
/media/D/Data/Powerwall/cellModule/z_main.ino:85
      digitalWrite(PB4, HIGH);
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	cc db       	rcall	.-2152   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:87

      if (bypassCnt == 0)
 99c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <bypassCnt>
 9a0:	81 11       	cpse	r24, r1
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <__vector_3+0xd4>
/media/D/Data/Powerwall/cellModule/z_main.ino:91
      {
        //We have just finished this timed ACTIVE BYPASS mode, disable resistor
        //and measure resting voltage now before possible re-enable.
        digitalWrite(PB4, LOW);
 9a4:	c7 db       	rcall	.-2162   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/z_main.ino:94

        //Reset voltage ADC buffer
        voltageBufIdx = 0;//we want whole one cycle
 9a6:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/z_main.ino:95
        voltageBufferReady = false;
 9aa:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/z_main.ino:104
  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
  }

  //trigger ADC reading
  ADCSRA |= (1 << ADSC);
 9ae:	36 9a       	sbi	0x06, 6	; 6
/media/D/Data/Powerwall/cellModule/z_main.ino:105
}
 9b0:	ff 91       	pop	r31
 9b2:	ef 91       	pop	r30
 9b4:	bf 91       	pop	r27
 9b6:	af 91       	pop	r26
 9b8:	9f 91       	pop	r25
 9ba:	8f 91       	pop	r24
 9bc:	7f 91       	pop	r23
 9be:	6f 91       	pop	r22
 9c0:	5f 91       	pop	r21
 9c2:	4f 91       	pop	r20
 9c4:	3f 91       	pop	r19
 9c6:	2f 91       	pop	r18
 9c8:	0f 90       	pop	r0
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	0f 90       	pop	r0
 9ce:	1f 90       	pop	r1
 9d0:	18 95       	reti
/media/D/Data/Powerwall/cellModule/z_main.ino:53
  
  /////////////////Flash LED in sync with bit pattern
  if (green_pattern == 0) {//if not showing any pattern
    if (ledFlash)  {
      ledON();
    }else ledOFF();
 9d2:	1a dd       	rcall	.-1484   	; 0x408 <ledOFF()>
 9d4:	a6 cf       	rjmp	.-180    	; 0x922 <__vector_3+0x48>
/media/D/Data/Powerwall/cellModule/z_main.ino:56
    ledFlash = false;
  } else {
    green_pattern = (byte)(green_pattern << 1) | (green_pattern >> 7);//rotate pattern left
 9d6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9de:	99 0f       	add	r25, r25
 9e0:	88 1f       	adc	r24, r24
 9e2:	88 27       	eor	r24, r24
 9e4:	88 1f       	adc	r24, r24
 9e6:	89 2b       	or	r24, r25
 9e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:58

    if (green_pattern & 0x01) {
 9ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9f0:	80 ff       	sbrs	r24, 0
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__vector_3+0x11e>
/media/D/Data/Powerwall/cellModule/z_main.ino:59
      ledON();
 9f4:	0c dd       	rcall	.-1512   	; 0x40e <ledON()>
 9f6:	97 cf       	rjmp	.-210    	; 0x926 <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:61
    } else {
      ledOFF();
 9f8:	07 dd       	rcall	.-1522   	; 0x408 <ledOFF()>
 9fa:	95 cf       	rjmp	.-214    	; 0x926 <__vector_3+0x4c>
/media/D/Data/Powerwall/cellModule/z_main.ino:77

      if (targetBypassVoltage >= voltageMeasurement_bypass) {//We have reached the goal
        bypass_off();
        green_pattern = GREEN_LED_PATTERN_STANDARD;
      } else { //Keep burning
        bypassCnt = BYPASS_COUNTER_MAX;
 9fc:	80 ef       	ldi	r24, 0xF0	; 240
 9fe:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <bypassCnt>
 a02:	c1 cf       	rjmp	.-126    	; 0x986 <__vector_3+0xac>
/media/D/Data/Powerwall/cellModule/z_main.ino:100
        voltageBufferReady = false;
      }
    }

  } else {
    digitalWrite(PB4, LOW);//Safety check we ensure bypass is always off if not enabled
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	96 db       	rcall	.-2260   	; 0x134 <digitalWrite.constprop.1>
 a08:	d2 cf       	rjmp	.-92     	; 0x9ae <__vector_3+0xd4>

00000a0a <__vector_8>:
__vector_8():
/media/D/Data/Powerwall/cellModule/d_adc.ino:16
// changed MUX
// skipping this ADC reading
// temperature = ADC; + changing MUX + next reading will be skipped


ISR(ADC_vect) {
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	2f 93       	push	r18
 a16:	8f 93       	push	r24
 a18:	9f 93       	push	r25
 a1a:	ef 93       	push	r30
 a1c:	ff 93       	push	r31
/media/D/Data/Powerwall/cellModule/d_adc.ino:21
  
  //uint8_t adcl = ADCL;
  //uint16_t value = ADCH << 8 | adcl;

  uint16_t value = ADCW;
 a1e:	84 b1       	in	r24, 0x04	; 4
 a20:	95 b1       	in	r25, 0x05	; 5
/media/D/Data/Powerwall/cellModule/d_adc.ino:24

  //If we skip this ADC reading, quit ISR here
  if (skipNextADC) {
 a22:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <skipNextADC>
 a26:	22 23       	and	r18, r18
 a28:	61 f0       	breq	.+24     	; 0xa42 <__vector_8+0x38>
/media/D/Data/Powerwall/cellModule/d_adc.ino:25
    skipNextADC = false;
 a2a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <skipNextADC>
/media/D/Data/Powerwall/cellModule/d_adc.ino:71
      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
    }
  }

}
 a2e:	ff 91       	pop	r31
 a30:	ef 91       	pop	r30
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti
/media/D/Data/Powerwall/cellModule/d_adc.ino:29
  if (skipNextADC) {
    skipNextADC = false;
    return;
  }

  if (tempReadingCnt == TEMP_READING_LOOP_FREQ ) {
 a42:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <tempReadingCnt>
 a46:	20 31       	cpi	r18, 0x10	; 16
 a48:	61 f4       	brne	.+24     	; 0xa62 <__vector_8+0x58>
/media/D/Data/Powerwall/cellModule/d_adc.ino:34
    //Use A0 (RESET PIN) to act as an analogue input
    //note that we cannot take the pin below 1.4V or the CPU resets
    //so we use the top half between 1.6V and 2.56V (voltage reference)
    //we avoid switching references (VCC vs 2.56V) so the capacitors dont have to keep draining and recharging
    tempReadingCnt = 0;
 a4a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:37

    //We reduce the value by 512 as we have a DC offset we need to remove
    tempSensorValue = value;
 a4e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <tempSensorValue+0x1>
 a52:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <tempSensorValue>
/media/D/Data/Powerwall/cellModule/d_adc.ino:40

    // use ADC3 for input for next reading (voltage)
    ADMUX = B10010011;
 a56:	83 e9       	ldi	r24, 0x93	; 147
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
    tempReadingCnt++;
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
 a58:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/d_adc.ino:67

      //Set skipNextADC to delay the next TIMER1 call to ADC reading to allow the ADC to settle after changing MUX
      skipNextADC = true;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <skipNextADC>
 a60:	e6 cf       	rjmp	.-52     	; 0xa2e <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:48
    skipNextADC = true;

  } else {

    //Populate the rolling buffer with values from the ADC
    last_raw_adc = value;
 a62:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <last_raw_adc+0x1>
 a66:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <last_raw_adc>
/media/D/Data/Powerwall/cellModule/d_adc.ino:49
    voltageBuff[voltageBufIdx] = value;
 a6a:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <voltageBufIdx>
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	ee 0f       	add	r30, r30
 a72:	ff 1f       	adc	r31, r31
 a74:	e3 58       	subi	r30, 0x83	; 131
 a76:	ff 4f       	sbci	r31, 0xFF	; 255
 a78:	91 83       	std	Z+1, r25	; 0x01
 a7a:	80 83       	st	Z, r24
/media/D/Data/Powerwall/cellModule/d_adc.ino:51

    voltageBufIdx++;
 a7c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <voltageBufIdx>
 a80:	8f 5f       	subi	r24, 0xFF	; 255
 a82:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:53

    if (voltageBufIdx == OVERSAMPLE_LOOP) {
 a86:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <voltageBufIdx>
 a8a:	80 31       	cpi	r24, 0x10	; 16
 a8c:	29 f4       	brne	.+10     	; 0xa98 <__vector_8+0x8e>
/media/D/Data/Powerwall/cellModule/d_adc.ino:54
      voltageBufIdx = 0;
 a8e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <voltageBufIdx>
/media/D/Data/Powerwall/cellModule/d_adc.ino:55
      voltageBufferReady = 1;// indicates valid data, used in main logic
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <voltageBufferReady>
/media/D/Data/Powerwall/cellModule/d_adc.ino:59
    }


    tempReadingCnt++;
 a98:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <tempReadingCnt>
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <tempReadingCnt>
/media/D/Data/Powerwall/cellModule/d_adc.ino:60
    if (tempReadingCnt == TEMP_READING_LOOP_FREQ) {
 aa2:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <tempReadingCnt>
 aa6:	80 31       	cpi	r24, 0x10	; 16
 aa8:	11 f6       	brne	.-124    	; 0xa2e <__vector_8+0x24>
/media/D/Data/Powerwall/cellModule/d_adc.ino:64
      //use ADC0 for temp probe input on next ADC loop

      //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
      ADMUX = B10010000;
 aaa:	80 e9       	ldi	r24, 0x90	; 144
 aac:	d5 cf       	rjmp	.-86     	; 0xa58 <__vector_8+0x4e>

00000aae <Reboot()>:
_Z6Rebootv():
/media/D/Data/Powerwall/cellModule/b_functions.ino:62
void factory_default() {
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, 0);
}

void Reboot() {
  TCCR1 = 0;
 aae:	10 be       	out	0x30, r1	; 48
/media/D/Data/Powerwall/cellModule/b_functions.ino:63
  TIMSK |= (1 << OCIE1A); //Disable timer1
 ab0:	89 b7       	in	r24, 0x39	; 57
 ab2:	80 64       	ori	r24, 0x40	; 64
 ab4:	89 bf       	out	0x39, r24	; 57
/media/D/Data/Powerwall/cellModule/b_functions.ino:66

  //Now power down loop until the watchdog timer kicks a reset
  ledON();
 ab6:	ab dc       	rcall	.-1706   	; 0x40e <ledON()>
 ab8:	ff cf       	rjmp	.-2      	; 0xab8 <Reboot()+0xa>

00000aba <main>:
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/main.cpp:4
#include <Arduino.h>

int main(void)
{
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
 ac2:	2d 97       	sbiw	r28, 0x0d	; 13
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:904
  */

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
 ace:	83 e0       	ldi	r24, 0x03	; 3
 ad0:	8a bd       	out	0x2a, r24	; 42
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:907
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
 ad2:	83 bf       	out	0x33, r24	; 51
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:928
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
 ad4:	78 94       	sei
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:933

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
 ad6:	89 b7       	in	r24, 0x39	; 57
 ad8:	82 60       	ori	r24, 0x02	; 2
 ada:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:594
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
 adc:	80 e4       	ldi	r24, 0x40	; 64
 ade:	8c bd       	out	0x2c, r24	; 44
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:595
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	8d bd       	out	0x2d, r24	; 45
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:596
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
 ae4:	87 ec       	ldi	r24, 0xC7	; 199
 ae6:	80 bf       	out	0x30, r24	; 48
init():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:972

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 ae8:	86 b1       	in	r24, 0x06	; 6
 aea:	88 77       	andi	r24, 0x78	; 120
 aec:	86 68       	ori	r24, 0x86	; 134
 aee:	86 b9       	out	0x06, r24	; 6
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:974
      // enable a2d conversions
      sbi(ADCSRA, ADEN);
 af0:	37 9a       	sbi	0x06, 7	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:23
  USISR = 0; //status register
}

void setup() {
  //Must be first line of setup()
  MCUSR &= ~(1 << WDRF); // reset status flag
 af2:	84 b7       	in	r24, 0x34	; 52
 af4:	87 7f       	andi	r24, 0xF7	; 247
 af6:	84 bf       	out	0x34, r24	; 52
wdt_disable():
/home/zz/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:510
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
 af8:	0f b6       	in	r0, 0x3f	; 63
 afa:	f8 94       	cli
 afc:	a8 95       	wdr
 afe:	81 b5       	in	r24, 0x21	; 33
 b00:	88 61       	ori	r24, 0x18	; 24
 b02:	81 bd       	out	0x21, r24	; 33
 b04:	11 bc       	out	0x21, r1	; 33
 b06:	0f be       	out	0x3f, r0	; 63
pinMode():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:35
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
 b08:	e4 e3       	ldi	r30, 0x34	; 52
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	24 91       	lpm	r18, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
 b0e:	ee e2       	ldi	r30, 0x2E	; 46
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	84 91       	lpm	r24, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 b14:	88 23       	and	r24, r24
 b16:	99 f0       	breq	.+38     	; 0xb3e <main+0x84>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	88 0f       	add	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	fc 01       	movw	r30, r24
 b20:	e2 5e       	subi	r30, 0xE2	; 226
 b22:	ff 4f       	sbci	r31, 0xFF	; 255
 b24:	a5 91       	lpm	r26, Z+
 b26:	b4 91       	lpm	r27, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
 b28:	fc 01       	movw	r30, r24
 b2a:	ec 5d       	subi	r30, 0xDC	; 220
 b2c:	ff 4f       	sbci	r31, 0xFF	; 255
 b2e:	85 91       	lpm	r24, Z+
 b30:	94 91       	lpm	r25, Z
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 b32:	8f b7       	in	r24, 0x3f	; 63
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:58
                cli();
 b34:	f8 94       	cli
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:59
    *reg |= bit;
 b36:	ec 91       	ld	r30, X
 b38:	e2 2b       	or	r30, r18
 b3a:	ec 93       	st	X, r30
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
 b3c:	8f bf       	out	0x3f, r24	; 63
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:40
    DDRB &= ~(1 << DDB5);
    PORTB &= ~(1 << PB5);
  */

  pinMode(PB4, OUTPUT); //bypass - burning resistor
  digitalWrite(PB4, LOW);
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	f9 da       	rcall	.-2574   	; 0x134 <digitalWrite.constprop.1>
/media/D/Data/Powerwall/cellModule/e_setup.ino:42

  ledON();
 b42:	65 dc       	rcall	.-1846   	; 0x40e <ledON()>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:278
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
 b44:	31 db       	rcall	.-2462   	; 0x1a8 <micros>
 b46:	8b 01       	movw	r16, r22
 b48:	34 ef       	ldi	r19, 0xF4	; 244
 b4a:	c3 2e       	mov	r12, r19
 b4c:	dd 24       	eor	r13, r13
 b4e:	d3 94       	inc	r13
 b50:	e1 2c       	mov	r14, r1
 b52:	f1 2c       	mov	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:282

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
 b54:	29 db       	rcall	.-2478   	; 0x1a8 <micros>
 b56:	60 1b       	sub	r22, r16
 b58:	71 0b       	sbc	r23, r17
 b5a:	68 3e       	cpi	r22, 0xE8	; 232
 b5c:	73 40       	sbci	r23, 0x03	; 3
 b5e:	08 f4       	brcc	.+2      	; 0xb62 <main+0xa8>
 b60:	d8 c0       	rjmp	.+432    	; 0xd12 <main+0x258>
 b62:	c1 14       	cp	r12, r1
 b64:	d1 04       	cpc	r13, r1
 b66:	e1 04       	cpc	r14, r1
 b68:	f1 04       	cpc	r15, r1
 b6a:	09 f0       	breq	.+2      	; 0xb6e <main+0xb4>
 b6c:	ca c0       	rjmp	.+404    	; 0xd02 <main+0x248>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:44
  delay(500);
  ledOFF();
 b6e:	4c dc       	rcall	.-1896   	; 0x408 <ledOFF()>
/media/D/Data/Powerwall/cellModule/e_setup.ino:46

  green_pattern = GREEN_LED_PATTERN_STANDARD;
 b70:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:37
  EEPROM.put(EEPROM_CONFIG_ADDRESS, currentConfig);
  EEPROM.put(EEPROM_CHECKSUM_ADDRESS, calculateCRC32((uint8_t*)&currentConfig, sizeof(cell_module_config)));
}

bool LoadConfigFromEEPROM() {
  cell_module_config restoredConfig;
 b74:	89 e0       	ldi	r24, 0x09	; 9
 b76:	eb e6       	ldi	r30, 0x6B	; 107
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	de 01       	movw	r26, r28
 b7c:	11 96       	adiw	r26, 0x01	; 1
 b7e:	01 90       	ld	r0, Z+
 b80:	0d 92       	st	X+, r0
 b82:	8a 95       	dec	r24
 b84:	e1 f7       	brne	.-8      	; 0xb7e <main+0xc4>
 b86:	fe 01       	movw	r30, r28
 b88:	31 96       	adiw	r30, 0x01	; 1
 b8a:	7f 01       	movw	r14, r30
main():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:105
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
 b8c:	04 e1       	ldi	r16, 0x14	; 20
 b8e:	10 e0       	ldi	r17, 0x00	; 0
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 b90:	c8 01       	movw	r24, r16
 b92:	d0 d0       	rcall	.+416    	; 0xd34 <eeprom_read_byte>
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 b94:	f7 01       	movw	r30, r14
 b96:	81 93       	st	Z+, r24
 b98:	7f 01       	movw	r14, r30
_ZN5EEPtrppEv():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:115
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
 b9a:	0f 5f       	subi	r16, 0xFF	; 255
 b9c:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getI18cell_module_configEERT_iS3_.isra.3():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 b9e:	0d 31       	cpi	r16, 0x1D	; 29
 ba0:	11 05       	cpc	r17, r1
 ba2:	b1 f7       	brne	.-20     	; 0xb90 <main+0xd6>
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	c5 d0       	rcall	.+394    	; 0xd34 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 baa:	8a 87       	std	Y+10, r24	; 0x0a
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	c1 d0       	rcall	.+386    	; 0xd34 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 bb2:	8b 87       	std	Y+11, r24	; 0x0b
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 bb4:	82 e0       	ldi	r24, 0x02	; 2
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	bd d0       	rcall	.+378    	; 0xd34 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 bba:	8c 87       	std	Y+12, r24	; 0x0c
operator*():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 bbc:	83 e0       	ldi	r24, 0x03	; 3
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	b9 d0       	rcall	.+370    	; 0xd34 <eeprom_read_byte>
_ZN11EEPROMClass3getImEERT_iS2_.isra.4():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/libraries/EEPROM/EEPROM.h:148

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
 bc2:	8d 87       	std	Y+13, r24	; 0x0d
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:44

  EEPROM.get(EEPROM_CONFIG_ADDRESS, restoredConfig);
  EEPROM.get(EEPROM_CHECKSUM_ADDRESS, existingChecksum);

  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));
 bc4:	ce 01       	movw	r24, r28
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	55 da       	rcall	.-2902   	; 0x74 <calculateCRC32(unsigned char const*, unsigned int) [clone .constprop.8]>
/media/D/Data/Powerwall/cellModule/b_functions.ino:46

  if (checksum == existingChecksum) {
 bca:	0a 85       	ldd	r16, Y+10	; 0x0a
 bcc:	1b 85       	ldd	r17, Y+11	; 0x0b
 bce:	2c 85       	ldd	r18, Y+12	; 0x0c
 bd0:	3d 85       	ldd	r19, Y+13	; 0x0d
 bd2:	60 17       	cp	r22, r16
 bd4:	71 07       	cpc	r23, r17
 bd6:	82 07       	cpc	r24, r18
 bd8:	93 07       	cpc	r25, r19
 bda:	09 f4       	brne	.+2      	; 0xbde <main+0x124>
 bdc:	a1 c0       	rjmp	.+322    	; 0xd20 <main+0x266>
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:50
    
  //Load our EEPROM configuration
  if (!LoadConfigFromEEPROM()) {
    badConfiguration = true;
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <badConfiguration>
/media/D/Data/Powerwall/cellModule/e_setup.ino:52
  }
  if (badConfiguration || currentConfig.SLAVE_ADDR == DEFAULT_SLAVE_ADDR) {
 be4:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <badConfiguration>
 be8:	81 11       	cpse	r24, r1
 bea:	04 c0       	rjmp	.+8      	; 0xbf4 <main+0x13a>
 bec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
 bf0:	85 31       	cpi	r24, 0x15	; 21
 bf2:	31 f4       	brne	.+12     	; 0xc00 <main+0x146>
/media/D/Data/Powerwall/cellModule/e_setup.ino:53
    green_pattern = GREEN_LED_PATTERN_UNCONFIGURED;
 bf4:	8f ee       	ldi	r24, 0xEF	; 239
 bf6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/e_setup.ino:54
    currentConfig.SLAVE_ADDR = DEFAULT_SLAVE_ADDR;//need to be here, compiler probably doesn't init struct properly
 bfa:	85 e1       	ldi	r24, 0x15	; 21
 bfc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <currentConfig>
/media/D/Data/Powerwall/cellModule/e_setup.ino:57
  }

  cli();//stop interrupts
 c00:	f8 94       	cli
/media/D/Data/Powerwall/cellModule/e_setup.ino:59

  voltageBufIdx = 0;
 c02:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <voltageBufIdx>
initTimer1():
/media/D/Data/Powerwall/cellModule/e_setup.ino:5
void initADC();

static inline void initTimer1(void)
{
  TCCR1 |= (1 << CTC1);  // clear timer on compare match
 c06:	80 b7       	in	r24, 0x30	; 48
 c08:	80 68       	ori	r24, 0x80	; 128
 c0a:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:6
  TCCR1 |= (1 << CS13) | (1 << CS12) | (1 << CS11) | (1 << CS10); //clock prescaler 16384
 c0c:	80 b7       	in	r24, 0x30	; 48
 c0e:	8f 60       	ori	r24, 0x0F	; 15
 c10:	80 bf       	out	0x30, r24	; 48
/media/D/Data/Powerwall/cellModule/e_setup.ino:7
  OCR1C = 64;  //About eighth of a second trigger Timer1  (there are 488 counts per second @ 8mhz)
 c12:	80 e4       	ldi	r24, 0x40	; 64
 c14:	8d bd       	out	0x2d, r24	; 45
/media/D/Data/Powerwall/cellModule/e_setup.ino:8
  TIMSK |= (1 << OCIE1A); // enable compare match interrupt
 c16:	89 b7       	in	r24, 0x39	; 57
 c18:	80 64       	ori	r24, 0x40	; 64
 c1a:	89 bf       	out	0x39, r24	; 57
initADC():
/media/D/Data/Powerwall/cellModule/e_setup.ino:112

  //REFS1 REFS0 ADLAR REFS2 MUX3 MUX2 MUX1 MUX0
  //Internal 2.56V Voltage Reference without external bypass capacitor, disconnected from PB0 (AREF)
  //ADLAR =0 and PB3 (B0011) for INPUT (A3)
  //We have to set the registers directly because the ATTINYCORE appears broken for internal 2v56 register without bypass capacitor
  ADMUX = B10010011;
 c1c:	83 e9       	ldi	r24, 0x93	; 147
 c1e:	87 b9       	out	0x07, r24	; 7
/media/D/Data/Powerwall/cellModule/e_setup.ino:135
      (1 << ADPS0);      // set prescaler bit 0
    #endif
  */
  //#if (F_CPU == 8000000)
  //8MHZ clock so set prescaler to 64 (B110)
  ADCSRA =
 c20:	8e e8       	ldi	r24, 0x8E	; 142
 c22:	86 b9       	out	0x06, r24	; 6
setup():
/media/D/Data/Powerwall/cellModule/e_setup.ino:66
  initTimer1();
  initADC();

  // WDTCSR configuration:     WDIE = 1: Interrupt Enable     WDE = 1 :Reset Enable
  // Enter Watchdog Configuration mode:
  WDTCR |= (1 << WDCE) | (1 << WDE);
 c24:	81 b5       	in	r24, 0x21	; 33
 c26:	88 61       	ori	r24, 0x18	; 24
 c28:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:69

  // Set Watchdog settings - 4000ms timeout
  WDTCR = (1 << WDIE) | (1 << WDE) | (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (0 << WDP0);
 c2a:	88 e6       	ldi	r24, 0x68	; 104
 c2c:	81 bd       	out	0x21, r24	; 33
/media/D/Data/Powerwall/cellModule/e_setup.ino:72

  // Enable Global Interrupts
  sei();
 c2e:	78 94       	sei
begin():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:34


// Public Methods //////////////////////////////////////////////////////////////

void USI_TWI_S::begin(uint8_t slaveAddr){ // initialize I2C lib
  usiTwiSlaveInit(slaveAddr); 
 c30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
 c34:	0b db       	rcall	.-2538   	; 0x24c <usiTwiSlaveInit>
onReceive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:53
}

// sets function called on slave write
void USI_TWI_S::onReceive( void (*function)(uint8_t) )
{
  usi_onReceiverPtr = function;
 c36:	87 e6       	ldi	r24, 0x67	; 103
 c38:	92 e0       	ldi	r25, 0x02	; 2
 c3a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <usi_onReceiverPtr+0x1>
 c3e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <usi_onReceiverPtr>
onRequest():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:59
}

// sets function called on slave read
void USI_TWI_S::onRequest( void (*function)(void) )
{
  usi_onRequestPtr = function;
 c42:	83 ea       	ldi	r24, 0xA3	; 163
 c44:	91 e0       	ldi	r25, 0x01	; 1
 c46:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <usi_onRequestPtr+0x1>
 c4a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <usi_onRequestPtr>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:25
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests

    green_pattern = GREEN_LED_PANIC;
 c4e:	25 e5       	ldi	r18, 0x55	; 85
 c50:	d2 2e       	mov	r13, r18
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
 c52:	cc 24       	eor	r12, r12
 c54:	c3 94       	inc	r12
onReceive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:53
}

// sets function called on slave write
void USI_TWI_S::onReceive( void (*function)(uint8_t) )
{
  usi_onReceiverPtr = function;
 c56:	07 e6       	ldi	r16, 0x67	; 103
 c58:	12 e0       	ldi	r17, 0x02	; 2
onRequest():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:59
}

// sets function called on slave read
void USI_TWI_S::onRequest( void (*function)(void) )
{
  usi_onRequestPtr = function;
 c5a:	7c 01       	movw	r14, r24
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:3

void loop() {
  wdt_reset();
 c5c:	a8 95       	wdr
/media/D/Data/Powerwall/cellModule/z_main.ino:6

  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
 c5e:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <badConfiguration>
 c62:	81 11       	cpse	r24, r1
 c64:	32 c0       	rjmp	.+100    	; 0xcca <main+0x210>
 c66:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
 c6a:	85 31       	cpi	r24, 0x15	; 21
 c6c:	71 f1       	breq	.+92     	; 0xcca <main+0x210>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:23
     */
  TinyWireS_stop_check();
}

void HandlePanicMode(){
  if (i2cTmr == 0 && inPanicMode == false) {//go to panic mode, when timeout of I2C requests
 c6e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
 c72:	81 11       	cpse	r24, r1
 c74:	1e c0       	rjmp	.+60     	; 0xcb2 <main+0x1f8>
 c76:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <inPanicMode>
 c7a:	81 11       	cpse	r24, r1
 c7c:	1a c0       	rjmp	.+52     	; 0xcb2 <main+0x1f8>
/media/D/Data/Powerwall/cellModule/z_main.ino:25

    green_pattern = GREEN_LED_PANIC;
 c7e:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:26
    inPanicMode = true;
 c82:	c0 92 e5 00 	sts	0x00E5, r12	; 0x8000e5 <inPanicMode>
disable_i2c():
/media/D/Data/Powerwall/cellModule/e_setup.ino:17
  TinyWireS.onReceive(receiveEvent);
  TinyWireS.onRequest(requestEvent);
}

void disable_i2c(){
  USICR = 0; //control register
 c86:	1d b8       	out	0x0d, r1	; 13
/media/D/Data/Powerwall/cellModule/e_setup.ino:18
  USISR = 0; //status register
 c88:	1e b8       	out	0x0e, r1	; 14
begin():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:34


// Public Methods //////////////////////////////////////////////////////////////

void USI_TWI_S::begin(uint8_t slaveAddr){ // initialize I2C lib
  usiTwiSlaveInit(slaveAddr); 
 c8a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <currentConfig>
 c8e:	de da       	rcall	.-2628   	; 0x24c <usiTwiSlaveInit>
onReceive():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:53
}

// sets function called on slave write
void USI_TWI_S::onReceive( void (*function)(uint8_t) )
{
  usi_onReceiverPtr = function;
 c90:	10 93 e4 00 	sts	0x00E4, r17	; 0x8000e4 <usi_onReceiverPtr+0x1>
 c94:	00 93 e3 00 	sts	0x00E3, r16	; 0x8000e3 <usi_onReceiverPtr>
onRequest():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:59
}

// sets function called on slave read
void USI_TWI_S::onRequest( void (*function)(void) )
{
  usi_onRequestPtr = function;
 c98:	f0 92 db 00 	sts	0x00DB, r15	; 0x8000db <usi_onRequestPtr+0x1>
 c9c:	e0 92 da 00 	sts	0x00DA, r14	; 0x8000da <usi_onRequestPtr>
HandlePanicMode():
/media/D/Data/Powerwall/cellModule/z_main.ino:31
    //Try resetting the i2c bus
    disable_i2c();
    init_i2c();

    error_counter++;
 ca0:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <error_counter>
 ca4:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <error_counter+0x1>
 ca8:	01 96       	adiw	r24, 0x01	; 1
 caa:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <error_counter+0x1>
 cae:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <error_counter>
/media/D/Data/Powerwall/cellModule/z_main.ino:34
  }

  if (i2cTmr > 0 && inPanicMode == true) {//return from panic mode
 cb2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i2cTmr>
 cb6:	88 23       	and	r24, r24
 cb8:	41 f0       	breq	.+16     	; 0xcca <main+0x210>
 cba:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <inPanicMode>
 cbe:	81 30       	cpi	r24, 0x01	; 1
 cc0:	21 f4       	brne	.+8      	; 0xcca <main+0x210>
/media/D/Data/Powerwall/cellModule/z_main.ino:35
    green_pattern = GREEN_LED_PATTERN_STANDARD;
 cc2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
/media/D/Data/Powerwall/cellModule/z_main.ino:36
    inPanicMode = false;
 cc6:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <inPanicMode>
loop():
/media/D/Data/Powerwall/cellModule/z_main.ino:10
  //If we are on the default SLAVE address signalize it
  if (!badConfiguration && currentConfig.SLAVE_ADDR != DEFAULT_SLAVE_ADDR) {
    HandlePanicMode();//reset i2c bus if no communication going on for some time
  }

  if(inPanicMode)
 cca:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <inPanicMode>
 cce:	88 23       	and	r24, r24
 cd0:	41 f0       	breq	.+16     	; 0xce2 <main+0x228>
bypass_off():
/media/D/Data/Powerwall/cellModule/b_functions.ino:112
  uint16_t_to_bytes.b[1] = TinyWireS.receive();
  return uint16_t_to_bytes.val;
}

void bypass_off() {
  targetBypassVoltage = 0;
 cd2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <targetBypassVoltage+0x1>
 cd6:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <targetBypassVoltage>
/media/D/Data/Powerwall/cellModule/b_functions.ino:113
  bypassCnt = 0;
 cda:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <bypassCnt>
/media/D/Data/Powerwall/cellModule/b_functions.ino:114
  bypassEnabled = false;
 cde:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <bypassEnabled>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:64
}

void TinyWireS_stop_check()
{
    if (!usi_onReceiverPtr)
 ce2:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <usi_onReceiverPtr>
 ce6:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <usi_onReceiverPtr+0x1>
 cea:	30 97       	sbiw	r30, 0x00	; 0
 cec:	09 f4       	brne	.+2      	; 0xcf0 <main+0x236>
 cee:	b6 cf       	rjmp	.-148    	; 0xc5c <main+0x1a2>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:69
    {
        // no onReceive callback, nothing to do...
        return;
    }
    if (!(USISR & ( 1 << USIPF )))
 cf0:	75 9b       	sbis	0x0e, 5	; 14
 cf2:	b4 cf       	rjmp	.-152    	; 0xc5c <main+0x1a2>
usiTwiAmountDataInReceiveBuffer():
/home/zz/Arduino/libraries/TinyWireS/usiTwiSlave.c:459



uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    return rxCount;
 cf4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <rxCount>
TinyWireS_stop_check():
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:75
    {
        // Stop not detected
        return;
    }
    uint8_t amount = usiTwiAmountDataInReceiveBuffer();
    if (amount == 0)
 cf8:	88 23       	and	r24, r24
 cfa:	09 f4       	brne	.+2      	; 0xcfe <main+0x244>
 cfc:	af cf       	rjmp	.-162    	; 0xc5c <main+0x1a2>
/home/zz/Arduino/libraries/TinyWireS/TinyWireS.cpp:80
    {
        // no data in buffer
        return;
    }
    usi_onReceiverPtr(amount);
 cfe:	09 95       	icall
 d00:	ad cf       	rjmp	.-166    	; 0xc5c <main+0x1a2>
delay():
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:283
        ms--;
 d02:	81 e0       	ldi	r24, 0x01	; 1
 d04:	c8 1a       	sub	r12, r24
 d06:	d1 08       	sbc	r13, r1
 d08:	e1 08       	sbc	r14, r1
 d0a:	f1 08       	sbc	r15, r1
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:284
        start += 1000;
 d0c:	08 51       	subi	r16, 0x18	; 24
 d0e:	1c 4f       	sbci	r17, 0xFC	; 252
 d10:	21 cf       	rjmp	.-446    	; 0xb54 <main+0x9a>
/home/zz/.arduino15/packages/ATTinyCore/hardware/avr/1.4.1/cores/tiny/wiring.c:280
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
 d12:	c1 14       	cp	r12, r1
 d14:	d1 04       	cpc	r13, r1
 d16:	e1 04       	cpc	r14, r1
 d18:	f1 04       	cpc	r15, r1
 d1a:	09 f0       	breq	.+2      	; 0xd1e <main+0x264>
 d1c:	1b cf       	rjmp	.-458    	; 0xb54 <main+0x9a>
 d1e:	27 cf       	rjmp	.-434    	; 0xb6e <main+0xb4>
LoadConfigFromEEPROM():
/media/D/Data/Powerwall/cellModule/b_functions.ino:48
  // Calculate the checksum of an entire buffer at once.
  uint32_t checksum = calculateCRC32((uint8_t*)&restoredConfig, sizeof(cell_module_config));

  if (checksum == existingChecksum) {
    //Clone the config into our global variable and return all OK
    memcpy(&currentConfig, &restoredConfig, sizeof(cell_module_config));
 d20:	89 e0       	ldi	r24, 0x09	; 9
 d22:	fe 01       	movw	r30, r28
 d24:	31 96       	adiw	r30, 0x01	; 1
 d26:	a2 e6       	ldi	r26, 0x62	; 98
 d28:	b0 e0       	ldi	r27, 0x00	; 0
 d2a:	01 90       	ld	r0, Z+
 d2c:	0d 92       	st	X+, r0
 d2e:	8a 95       	dec	r24
 d30:	e1 f7       	brne	.-8      	; 0xd2a <main+0x270>
 d32:	58 cf       	rjmp	.-336    	; 0xbe4 <main+0x12a>

00000d34 <eeprom_read_byte>:
eeprom_read_byte():
 d34:	e1 99       	sbic	0x1c, 1	; 28
 d36:	fe cf       	rjmp	.-4      	; 0xd34 <eeprom_read_byte>
 d38:	9f bb       	out	0x1f, r25	; 31
 d3a:	8e bb       	out	0x1e, r24	; 30
 d3c:	e0 9a       	sbi	0x1c, 0	; 28
 d3e:	99 27       	eor	r25, r25
 d40:	8d b3       	in	r24, 0x1d	; 29
 d42:	08 95       	ret

00000d44 <eeprom_write_byte>:
eeprom_write_byte():
 d44:	26 2f       	mov	r18, r22

00000d46 <eeprom_write_r18>:
 d46:	e1 99       	sbic	0x1c, 1	; 28
 d48:	fe cf       	rjmp	.-4      	; 0xd46 <eeprom_write_r18>
 d4a:	1c ba       	out	0x1c, r1	; 28
 d4c:	9f bb       	out	0x1f, r25	; 31
 d4e:	8e bb       	out	0x1e, r24	; 30
 d50:	2d bb       	out	0x1d, r18	; 29
 d52:	0f b6       	in	r0, 0x3f	; 63
 d54:	f8 94       	cli
 d56:	e2 9a       	sbi	0x1c, 2	; 28
 d58:	e1 9a       	sbi	0x1c, 1	; 28
 d5a:	0f be       	out	0x3f, r0	; 63
 d5c:	01 96       	adiw	r24, 0x01	; 1
 d5e:	08 95       	ret

00000d60 <__cmpsf2>:
__cmpsf2():
 d60:	6c d0       	rcall	.+216    	; 0xe3a <__fp_cmp>
 d62:	08 f4       	brcc	.+2      	; 0xd66 <__cmpsf2+0x6>
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	08 95       	ret

00000d68 <__fixunssfsi>:
__fixunssfsi():
 d68:	94 d0       	rcall	.+296    	; 0xe92 <__fp_splitA>
 d6a:	88 f0       	brcs	.+34     	; 0xd8e <__fixunssfsi+0x26>
 d6c:	9f 57       	subi	r25, 0x7F	; 127
 d6e:	90 f0       	brcs	.+36     	; 0xd94 <__fixunssfsi+0x2c>
 d70:	b9 2f       	mov	r27, r25
 d72:	99 27       	eor	r25, r25
 d74:	b7 51       	subi	r27, 0x17	; 23
 d76:	a0 f0       	brcs	.+40     	; 0xda0 <__fixunssfsi+0x38>
 d78:	d1 f0       	breq	.+52     	; 0xdae <__fixunssfsi+0x46>
 d7a:	66 0f       	add	r22, r22
 d7c:	77 1f       	adc	r23, r23
 d7e:	88 1f       	adc	r24, r24
 d80:	99 1f       	adc	r25, r25
 d82:	1a f0       	brmi	.+6      	; 0xd8a <__fixunssfsi+0x22>
 d84:	ba 95       	dec	r27
 d86:	c9 f7       	brne	.-14     	; 0xd7a <__fixunssfsi+0x12>
 d88:	12 c0       	rjmp	.+36     	; 0xdae <__fixunssfsi+0x46>
 d8a:	b1 30       	cpi	r27, 0x01	; 1
 d8c:	81 f0       	breq	.+32     	; 0xdae <__fixunssfsi+0x46>
 d8e:	9b d0       	rcall	.+310    	; 0xec6 <__fp_zero>
 d90:	b1 e0       	ldi	r27, 0x01	; 1
 d92:	08 95       	ret
 d94:	98 c0       	rjmp	.+304    	; 0xec6 <__fp_zero>
 d96:	67 2f       	mov	r22, r23
 d98:	78 2f       	mov	r23, r24
 d9a:	88 27       	eor	r24, r24
 d9c:	b8 5f       	subi	r27, 0xF8	; 248
 d9e:	39 f0       	breq	.+14     	; 0xdae <__fixunssfsi+0x46>
 da0:	b9 3f       	cpi	r27, 0xF9	; 249
 da2:	cc f3       	brlt	.-14     	; 0xd96 <__fixunssfsi+0x2e>
 da4:	86 95       	lsr	r24
 da6:	77 95       	ror	r23
 da8:	67 95       	ror	r22
 daa:	b3 95       	inc	r27
 dac:	d9 f7       	brne	.-10     	; 0xda4 <__fixunssfsi+0x3c>
 dae:	3e f4       	brtc	.+14     	; 0xdbe <__fixunssfsi+0x56>
 db0:	90 95       	com	r25
 db2:	80 95       	com	r24
 db4:	70 95       	com	r23
 db6:	61 95       	neg	r22
 db8:	7f 4f       	sbci	r23, 0xFF	; 255
 dba:	8f 4f       	sbci	r24, 0xFF	; 255
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255
 dbe:	08 95       	ret

00000dc0 <__floatunsisf>:
__floatunsisf():
 dc0:	e8 94       	clt
 dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <__floatsisf+0x12>

00000dc4 <__floatsisf>:
 dc4:	97 fb       	bst	r25, 7
 dc6:	3e f4       	brtc	.+14     	; 0xdd6 <__floatsisf+0x12>
 dc8:	90 95       	com	r25
 dca:	80 95       	com	r24
 dcc:	70 95       	com	r23
 dce:	61 95       	neg	r22
 dd0:	7f 4f       	sbci	r23, 0xFF	; 255
 dd2:	8f 4f       	sbci	r24, 0xFF	; 255
 dd4:	9f 4f       	sbci	r25, 0xFF	; 255
 dd6:	99 23       	and	r25, r25
 dd8:	a9 f0       	breq	.+42     	; 0xe04 <__floatsisf+0x40>
 dda:	f9 2f       	mov	r31, r25
 ddc:	96 e9       	ldi	r25, 0x96	; 150
 dde:	bb 27       	eor	r27, r27
 de0:	93 95       	inc	r25
 de2:	f6 95       	lsr	r31
 de4:	87 95       	ror	r24
 de6:	77 95       	ror	r23
 de8:	67 95       	ror	r22
 dea:	b7 95       	ror	r27
 dec:	f1 11       	cpse	r31, r1
 dee:	f8 cf       	rjmp	.-16     	; 0xde0 <__floatsisf+0x1c>
 df0:	fa f4       	brpl	.+62     	; 0xe30 <__floatsisf+0x6c>
 df2:	bb 0f       	add	r27, r27
 df4:	11 f4       	brne	.+4      	; 0xdfa <__floatsisf+0x36>
 df6:	60 ff       	sbrs	r22, 0
 df8:	1b c0       	rjmp	.+54     	; 0xe30 <__floatsisf+0x6c>
 dfa:	6f 5f       	subi	r22, 0xFF	; 255
 dfc:	7f 4f       	sbci	r23, 0xFF	; 255
 dfe:	8f 4f       	sbci	r24, 0xFF	; 255
 e00:	9f 4f       	sbci	r25, 0xFF	; 255
 e02:	16 c0       	rjmp	.+44     	; 0xe30 <__floatsisf+0x6c>
 e04:	88 23       	and	r24, r24
 e06:	11 f0       	breq	.+4      	; 0xe0c <__floatsisf+0x48>
 e08:	96 e9       	ldi	r25, 0x96	; 150
 e0a:	11 c0       	rjmp	.+34     	; 0xe2e <__floatsisf+0x6a>
 e0c:	77 23       	and	r23, r23
 e0e:	21 f0       	breq	.+8      	; 0xe18 <__floatsisf+0x54>
 e10:	9e e8       	ldi	r25, 0x8E	; 142
 e12:	87 2f       	mov	r24, r23
 e14:	76 2f       	mov	r23, r22
 e16:	05 c0       	rjmp	.+10     	; 0xe22 <__floatsisf+0x5e>
 e18:	66 23       	and	r22, r22
 e1a:	71 f0       	breq	.+28     	; 0xe38 <__floatsisf+0x74>
 e1c:	96 e8       	ldi	r25, 0x86	; 134
 e1e:	86 2f       	mov	r24, r22
 e20:	70 e0       	ldi	r23, 0x00	; 0
 e22:	60 e0       	ldi	r22, 0x00	; 0
 e24:	2a f0       	brmi	.+10     	; 0xe30 <__floatsisf+0x6c>
 e26:	9a 95       	dec	r25
 e28:	66 0f       	add	r22, r22
 e2a:	77 1f       	adc	r23, r23
 e2c:	88 1f       	adc	r24, r24
 e2e:	da f7       	brpl	.-10     	; 0xe26 <__floatsisf+0x62>
 e30:	88 0f       	add	r24, r24
 e32:	96 95       	lsr	r25
 e34:	87 95       	ror	r24
 e36:	97 f9       	bld	r25, 7
 e38:	08 95       	ret

00000e3a <__fp_cmp>:
__fp_cmp():
 e3a:	99 0f       	add	r25, r25
 e3c:	00 08       	sbc	r0, r0
 e3e:	55 0f       	add	r21, r21
 e40:	aa 0b       	sbc	r26, r26
 e42:	e0 e8       	ldi	r30, 0x80	; 128
 e44:	fe ef       	ldi	r31, 0xFE	; 254
 e46:	16 16       	cp	r1, r22
 e48:	17 06       	cpc	r1, r23
 e4a:	e8 07       	cpc	r30, r24
 e4c:	f9 07       	cpc	r31, r25
 e4e:	c0 f0       	brcs	.+48     	; 0xe80 <__fp_cmp+0x46>
 e50:	12 16       	cp	r1, r18
 e52:	13 06       	cpc	r1, r19
 e54:	e4 07       	cpc	r30, r20
 e56:	f5 07       	cpc	r31, r21
 e58:	98 f0       	brcs	.+38     	; 0xe80 <__fp_cmp+0x46>
 e5a:	62 1b       	sub	r22, r18
 e5c:	73 0b       	sbc	r23, r19
 e5e:	84 0b       	sbc	r24, r20
 e60:	95 0b       	sbc	r25, r21
 e62:	39 f4       	brne	.+14     	; 0xe72 <__fp_cmp+0x38>
 e64:	0a 26       	eor	r0, r26
 e66:	61 f0       	breq	.+24     	; 0xe80 <__fp_cmp+0x46>
 e68:	23 2b       	or	r18, r19
 e6a:	24 2b       	or	r18, r20
 e6c:	25 2b       	or	r18, r21
 e6e:	21 f4       	brne	.+8      	; 0xe78 <__fp_cmp+0x3e>
 e70:	08 95       	ret
 e72:	0a 26       	eor	r0, r26
 e74:	09 f4       	brne	.+2      	; 0xe78 <__fp_cmp+0x3e>
 e76:	a1 40       	sbci	r26, 0x01	; 1
 e78:	a6 95       	lsr	r26
 e7a:	8f ef       	ldi	r24, 0xFF	; 255
 e7c:	81 1d       	adc	r24, r1
 e7e:	81 1d       	adc	r24, r1
 e80:	08 95       	ret

00000e82 <__fp_split3>:
__fp_split3():
 e82:	57 fd       	sbrc	r21, 7
 e84:	90 58       	subi	r25, 0x80	; 128
 e86:	44 0f       	add	r20, r20
 e88:	55 1f       	adc	r21, r21
 e8a:	59 f0       	breq	.+22     	; 0xea2 <__fp_splitA+0x10>
 e8c:	5f 3f       	cpi	r21, 0xFF	; 255
 e8e:	71 f0       	breq	.+28     	; 0xeac <__fp_splitA+0x1a>
 e90:	47 95       	ror	r20

00000e92 <__fp_splitA>:
 e92:	88 0f       	add	r24, r24
 e94:	97 fb       	bst	r25, 7
 e96:	99 1f       	adc	r25, r25
 e98:	61 f0       	breq	.+24     	; 0xeb2 <__fp_splitA+0x20>
 e9a:	9f 3f       	cpi	r25, 0xFF	; 255
 e9c:	79 f0       	breq	.+30     	; 0xebc <__fp_splitA+0x2a>
 e9e:	87 95       	ror	r24
 ea0:	08 95       	ret
 ea2:	12 16       	cp	r1, r18
 ea4:	13 06       	cpc	r1, r19
 ea6:	14 06       	cpc	r1, r20
 ea8:	55 1f       	adc	r21, r21
 eaa:	f2 cf       	rjmp	.-28     	; 0xe90 <__fp_split3+0xe>
 eac:	46 95       	lsr	r20
 eae:	f1 df       	rcall	.-30     	; 0xe92 <__fp_splitA>
 eb0:	08 c0       	rjmp	.+16     	; 0xec2 <__fp_splitA+0x30>
 eb2:	16 16       	cp	r1, r22
 eb4:	17 06       	cpc	r1, r23
 eb6:	18 06       	cpc	r1, r24
 eb8:	99 1f       	adc	r25, r25
 eba:	f1 cf       	rjmp	.-30     	; 0xe9e <__fp_splitA+0xc>
 ebc:	86 95       	lsr	r24
 ebe:	71 05       	cpc	r23, r1
 ec0:	61 05       	cpc	r22, r1
 ec2:	08 94       	sec
 ec4:	08 95       	ret

00000ec6 <__fp_zero>:
__fp_zero():
 ec6:	e8 94       	clt

00000ec8 <__fp_szero>:
 ec8:	bb 27       	eor	r27, r27
 eca:	66 27       	eor	r22, r22
 ecc:	77 27       	eor	r23, r23
 ece:	cb 01       	movw	r24, r22
 ed0:	97 f9       	bld	r25, 7
 ed2:	08 95       	ret

00000ed4 <__mulsf3>:
__mulsf3():
 ed4:	0a d0       	rcall	.+20     	; 0xeea <__mulsf3x>
 ed6:	80 c0       	rjmp	.+256    	; 0xfd8 <__fp_round>
 ed8:	71 d0       	rcall	.+226    	; 0xfbc <__fp_pscA>
 eda:	28 f0       	brcs	.+10     	; 0xee6 <__mulsf3+0x12>
 edc:	76 d0       	rcall	.+236    	; 0xfca <__fp_pscB>
 ede:	18 f0       	brcs	.+6      	; 0xee6 <__mulsf3+0x12>
 ee0:	95 23       	and	r25, r21
 ee2:	09 f0       	breq	.+2      	; 0xee6 <__mulsf3+0x12>
 ee4:	62 c0       	rjmp	.+196    	; 0xfaa <__fp_inf>
 ee6:	67 c0       	rjmp	.+206    	; 0xfb6 <__fp_nan>
 ee8:	ef cf       	rjmp	.-34     	; 0xec8 <__fp_szero>

00000eea <__mulsf3x>:
__mulsf3x():
 eea:	cb df       	rcall	.-106    	; 0xe82 <__fp_split3>
 eec:	a8 f3       	brcs	.-22     	; 0xed8 <__mulsf3+0x4>

00000eee <__mulsf3_pse>:
 eee:	99 23       	and	r25, r25
 ef0:	d9 f3       	breq	.-10     	; 0xee8 <__mulsf3+0x14>
 ef2:	55 23       	and	r21, r21
 ef4:	c9 f3       	breq	.-14     	; 0xee8 <__mulsf3+0x14>
 ef6:	95 0f       	add	r25, r21
 ef8:	50 e0       	ldi	r21, 0x00	; 0
 efa:	55 1f       	adc	r21, r21
 efc:	aa 27       	eor	r26, r26
 efe:	ee 27       	eor	r30, r30
 f00:	ff 27       	eor	r31, r31
 f02:	bb 27       	eor	r27, r27
 f04:	00 24       	eor	r0, r0
 f06:	08 94       	sec
 f08:	67 95       	ror	r22
 f0a:	20 f4       	brcc	.+8      	; 0xf14 <__mulsf3_pse+0x26>
 f0c:	e2 0f       	add	r30, r18
 f0e:	f3 1f       	adc	r31, r19
 f10:	b4 1f       	adc	r27, r20
 f12:	0a 1e       	adc	r0, r26
 f14:	22 0f       	add	r18, r18
 f16:	33 1f       	adc	r19, r19
 f18:	44 1f       	adc	r20, r20
 f1a:	aa 1f       	adc	r26, r26
 f1c:	66 95       	lsr	r22
 f1e:	a9 f7       	brne	.-22     	; 0xf0a <__mulsf3_pse+0x1c>
 f20:	77 95       	ror	r23
 f22:	30 f4       	brcc	.+12     	; 0xf30 <__mulsf3_pse+0x42>
 f24:	f3 0f       	add	r31, r19
 f26:	b4 1f       	adc	r27, r20
 f28:	0a 1e       	adc	r0, r26
 f2a:	12 1e       	adc	r1, r18
 f2c:	08 f4       	brcc	.+2      	; 0xf30 <__mulsf3_pse+0x42>
 f2e:	63 95       	inc	r22
 f30:	33 0f       	add	r19, r19
 f32:	44 1f       	adc	r20, r20
 f34:	aa 1f       	adc	r26, r26
 f36:	22 1f       	adc	r18, r18
 f38:	76 95       	lsr	r23
 f3a:	99 f7       	brne	.-26     	; 0xf22 <__mulsf3_pse+0x34>
 f3c:	87 95       	ror	r24
 f3e:	20 f4       	brcc	.+8      	; 0xf48 <__mulsf3_pse+0x5a>
 f40:	b4 0f       	add	r27, r20
 f42:	0a 1e       	adc	r0, r26
 f44:	12 1e       	adc	r1, r18
 f46:	63 1f       	adc	r22, r19
 f48:	44 0f       	add	r20, r20
 f4a:	aa 1f       	adc	r26, r26
 f4c:	22 1f       	adc	r18, r18
 f4e:	33 1f       	adc	r19, r19
 f50:	86 95       	lsr	r24
 f52:	a9 f7       	brne	.-22     	; 0xf3e <__mulsf3_pse+0x50>
 f54:	86 2f       	mov	r24, r22
 f56:	71 2d       	mov	r23, r1
 f58:	60 2d       	mov	r22, r0
 f5a:	11 24       	eor	r1, r1
 f5c:	9f 57       	subi	r25, 0x7F	; 127
 f5e:	50 40       	sbci	r21, 0x00	; 0
 f60:	8a f0       	brmi	.+34     	; 0xf84 <__mulsf3_pse+0x96>
 f62:	e1 f0       	breq	.+56     	; 0xf9c <__mulsf3_pse+0xae>
 f64:	88 23       	and	r24, r24
 f66:	4a f0       	brmi	.+18     	; 0xf7a <__mulsf3_pse+0x8c>
 f68:	ee 0f       	add	r30, r30
 f6a:	ff 1f       	adc	r31, r31
 f6c:	bb 1f       	adc	r27, r27
 f6e:	66 1f       	adc	r22, r22
 f70:	77 1f       	adc	r23, r23
 f72:	88 1f       	adc	r24, r24
 f74:	91 50       	subi	r25, 0x01	; 1
 f76:	50 40       	sbci	r21, 0x00	; 0
 f78:	a9 f7       	brne	.-22     	; 0xf64 <__mulsf3_pse+0x76>
 f7a:	9e 3f       	cpi	r25, 0xFE	; 254
 f7c:	51 05       	cpc	r21, r1
 f7e:	70 f0       	brcs	.+28     	; 0xf9c <__mulsf3_pse+0xae>
 f80:	14 c0       	rjmp	.+40     	; 0xfaa <__fp_inf>
 f82:	a2 cf       	rjmp	.-188    	; 0xec8 <__fp_szero>
 f84:	5f 3f       	cpi	r21, 0xFF	; 255
 f86:	ec f3       	brlt	.-6      	; 0xf82 <__mulsf3_pse+0x94>
 f88:	98 3e       	cpi	r25, 0xE8	; 232
 f8a:	dc f3       	brlt	.-10     	; 0xf82 <__mulsf3_pse+0x94>
 f8c:	86 95       	lsr	r24
 f8e:	77 95       	ror	r23
 f90:	67 95       	ror	r22
 f92:	b7 95       	ror	r27
 f94:	f7 95       	ror	r31
 f96:	e7 95       	ror	r30
 f98:	9f 5f       	subi	r25, 0xFF	; 255
 f9a:	c1 f7       	brne	.-16     	; 0xf8c <__mulsf3_pse+0x9e>
 f9c:	fe 2b       	or	r31, r30
 f9e:	88 0f       	add	r24, r24
 fa0:	91 1d       	adc	r25, r1
 fa2:	96 95       	lsr	r25
 fa4:	87 95       	ror	r24
 fa6:	97 f9       	bld	r25, 7
 fa8:	08 95       	ret

00000faa <__fp_inf>:
 faa:	97 f9       	bld	r25, 7
 fac:	9f 67       	ori	r25, 0x7F	; 127
 fae:	80 e8       	ldi	r24, 0x80	; 128
 fb0:	70 e0       	ldi	r23, 0x00	; 0
 fb2:	60 e0       	ldi	r22, 0x00	; 0
 fb4:	08 95       	ret

00000fb6 <__fp_nan>:
 fb6:	9f ef       	ldi	r25, 0xFF	; 255
 fb8:	80 ec       	ldi	r24, 0xC0	; 192
 fba:	08 95       	ret

00000fbc <__fp_pscA>:
__fp_pscA():
 fbc:	00 24       	eor	r0, r0
 fbe:	0a 94       	dec	r0
 fc0:	16 16       	cp	r1, r22
 fc2:	17 06       	cpc	r1, r23
 fc4:	18 06       	cpc	r1, r24
 fc6:	09 06       	cpc	r0, r25
 fc8:	08 95       	ret

00000fca <__fp_pscB>:
__fp_pscB():
 fca:	00 24       	eor	r0, r0
 fcc:	0a 94       	dec	r0
 fce:	12 16       	cp	r1, r18
 fd0:	13 06       	cpc	r1, r19
 fd2:	14 06       	cpc	r1, r20
 fd4:	05 06       	cpc	r0, r21
 fd6:	08 95       	ret

00000fd8 <__fp_round>:
__fp_round():
 fd8:	09 2e       	mov	r0, r25
 fda:	03 94       	inc	r0
 fdc:	00 0c       	add	r0, r0
 fde:	11 f4       	brne	.+4      	; 0xfe4 <__fp_round+0xc>
 fe0:	88 23       	and	r24, r24
 fe2:	52 f0       	brmi	.+20     	; 0xff8 <__fp_round+0x20>
 fe4:	bb 0f       	add	r27, r27
 fe6:	40 f4       	brcc	.+16     	; 0xff8 <__fp_round+0x20>
 fe8:	bf 2b       	or	r27, r31
 fea:	11 f4       	brne	.+4      	; 0xff0 <__fp_round+0x18>
 fec:	60 ff       	sbrs	r22, 0
 fee:	04 c0       	rjmp	.+8      	; 0xff8 <__fp_round+0x20>
 ff0:	6f 5f       	subi	r22, 0xFF	; 255
 ff2:	7f 4f       	sbci	r23, 0xFF	; 255
 ff4:	8f 4f       	sbci	r24, 0xFF	; 255
 ff6:	9f 4f       	sbci	r25, 0xFF	; 255
 ff8:	08 95       	ret

00000ffa <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 ffa:	f8 94       	cli

00000ffc <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 ffc:	ff cf       	rjmp	.-2      	; 0xffc <__stop_program>
